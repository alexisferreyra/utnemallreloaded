<XPLDocument><DocumentBody ldsrc="1,1,.\\MainTemplate.es\\ServiceLayerTemplate.dpp"><Import ldsrc="1"><ns>Microsoft</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><documentation short="import &quot;System.ServiceModel&quot;, &quot;platform=DotNET&quot;, &quot;ns=DotNET&quot;, &quot;assemblyfilename=C:\\Program files\\Reference Assemblies\\Microsoft\\Framework\\v3.0\\System.ServiceModel.dll&quot;;&#xD;&#xA;" /><Import ldsrc="3"><ns>System</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Import ldsrc="4"><ns>LayerD.CodeDOM</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_layerd_xpl_codedom_net</ns></Import><Import ldsrc="5"><ns>LayerD.ZOECompiler</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_zoec_core</ns></Import><Using ldsrc="6"><ns>DotNET::System</ns></Using><Using ldsrc="7"><ns>DotNET::System::IO</ns></Using><Using ldsrc="8"><ns>DotNET::System::Collections</ns></Using><Using ldsrc="9"><ns>DotNET::LayerD::CodeDOM</ns></Using><Using ldsrc="10"><ns>DotNET::LayerD::ZOECompiler</ns></Using><Namespace name="UtnEmall::Utils" ldsrc="12,427"><Class name="SALGenerator" access="public" isfactory="true" ldsrc="13,426"><Field name="EntityTypesNamespace" storage="static" ldsrc="14,14"><type ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="ServiceNamespace" storage="static" ldsrc="15,15"><type ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Function name="GenerateWSProxy" internalname="GenerateWSProxy#3" access="public" storage="static" ldsrc="17,17"><Parameters><P name="serviceNamespace" number="1"><type ispointer="true" typeStr="^_$STRING$" ldsrc="17"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="entityTypesNamespace" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="17"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="17,40"><e ldsrc="18"><a><l><n>ServiceNamespace</n></l><r><n>serviceNamespace</n></r></a></e><e ldsrc="19"><a><l><n>EntityTypesNamespace</n></l><r><n>entityTypesNamespace</n></r></a></e><Decls><d name="clase" ldsrc="21"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="21"><e><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></e></i></d></Decls><documentation short=" Create a request and response for every request and response.&#xD;&#xA; Iterate through class members, they are all methods&#xD;&#xA;" /><for ldsrc="25,25"><init><dl><d name="member" ldsrc="25"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>clase</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="25,31"><if ldsrc="26"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>member</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunction" /></r></bo></boolean><ifbk ldsrc="27,30"><e ldsrc="28"><fc><l><n>CreateRequestFunction</n></l><args><e><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></args></fc></e><e ldsrc="29"><fc><l><n>CreateResponseFunction</n></l><args><e><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></args></fc></e></ifbk></if></forblock></for><documentation short="Change the original class name IBAR to IBARContract		            &#xD;&#xA;clase.set_name(clase.get_name()+&quot;Contract&quot;);&#xD;&#xA; Create the Client&#xD;&#xA;" /><e ldsrc="37"><fc><l><n>CreateClient</n></l><args /></fc></e><return ldsrc="39,39"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="CreateRequestFunction" internalname="CreateRequestFunction#4" storage="static" ldsrc="42,42"><Parameters><P name="function" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunction" ldsrc="42"><dt typename="XplFunction" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="43,151"><documentation short=" Define the request name&#xD;&#xA;" /><Decls><d name="requestName" ldsrc="45"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="45"><e><new><type typename="XplIName" /><init ldsrc="45"><list><e><fc><l><n>GetRequestName</n></l><args><e><n>function</n></e></args></fc></e></list></init></new></e></i></d></Decls><Decls><d name="exists" ldsrc="47"><type typename="$BOOLEAN$" /><i ldsrc="47"><e><lit str="false" type="bool" /></e></i></d></Decls><for ldsrc="48,48"><init><dl><d name="node" ldsrc="48"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="49,58"><if ldsrc="50"><boolean><is><e><n>node</n></e><type typename="XplClass" /></is></boolean><ifbk ldsrc="51,57"><Decls><d name="nodeFunc" ldsrc="52"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="52"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type></cast></e></i></d></Decls><if ldsrc="53"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>nodeFunc</n></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><bo op="m"><l><n>requestName</n></l><r><n>Identifier</n></r></bo></r></bo></boolean><ifbk ldsrc="54,56"><e ldsrc="55"><a><l><n>exists</n></l><r><lit str="true" type="bool" /></r></a></e></ifbk></if></ifbk></if></forblock></for><if ldsrc="60"><boolean><uo op="not"><u><n>exists</n></u></uo></boolean><ifbk ldsrc="61,150"><documentation short=" Add the request attribute&#xD;&#xA;" /><Decls><d name="attribute" ldsrc="63"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="63"><e><bo><l><bo><l><bo><l><bo><l><lit str="System.Xml.Serialization.XmlRootAttribute(ElementName=\\&quot;" /></l><r><fc><l><bo op="m"><l><n>function</n></l><r><n>get_name</n></r></bo></l><args /></fc></r></bo></l><r><lit str="\\&quot;, Namespace=\\&quot;" /></r></bo></l><r><n>ServiceNamespace</n></r></bo></l><r><lit str="\\&quot;), System.CodeDom.Compiler.GeneratedCodeAttribute(\\&quot;LayerD Proxy Generator\\&quot;, \\&quot;1.0.0.0\\&quot;)" /></r></bo></e></i></d></Decls><e ldsrc="66"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="65"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><n>$attribute</n></e></args></fc></e></writecode></e></args></fc></e><documentation short=" Generate the skeleton for the request class&#xD;&#xA;" /><Decls><d name="request" ldsrc="69"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="69"><e><writecode ldsrc="69"><class name="$requestName" access="public" ldsrc="70,73"><Function name="$requestName" access="public" ldsrc="72,72"><ReturnType /><FunctionBody ldsrc="72,72" /></Function></class></writecode></e></i></d></Decls><e ldsrc="76"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>request</n></e></args></fc></e><documentation short=" Add the set of fields for the request class based on parameters&#xD;&#xA;" /><Decls><d name="order" ldsrc="79"><type typename="$INTEGER$" /><i ldsrc="79"><e><lit str="0" type="integer" /></e></i></d></Decls><for ldsrc="80,80"><init><dl><d name="member" ldsrc="80"><type ispointer="true"><dt typename="XplParameter" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="81,120"><documentation short=" Declare a set of important values&#xD;&#xA;" /><Decls><d name="orderStr" ldsrc="83"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="83"><e><fc><l><bo op="m"><l><n>order</n></l><r><n>ToString</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="strVar" ldsrc="84"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="84"><e><lit str="0" type="null" /></e></i></d></Decls><if ldsrc="86"><boolean><fc><l><n>IsNullableType</n></l><args><e><fc><l><bo op="m"><l><n>member</n></l><r><n>get_type</n></r></bo></l><args /></fc></e></args></fc></boolean><ifbk ldsrc="86,88"><e ldsrc="87"><a><l><n>strVar</n></l><r><bo><l><bo><l><bo><l><bo><l><lit str="System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace=\\&quot;" /></l><r><n>ServiceNamespace</n></r></bo></l><r><lit str="\\&quot;, Order=" /></r></bo></l><r><n>orderStr</n></r></bo></l><r><lit str=")" /></r></bo></r></a></e></ifbk><else ldsrc="89"><e ldsrc="90"><a><l><n>strVar</n></l><r><bo><l><bo><l><bo><l><bo><l><lit str="System.Xml.Serialization.XmlElementAttribute(Namespace=\\&quot;" /></l><r><n>ServiceNamespace</n></r></bo></l><r><lit str="\\&quot;, Order=" /></r></bo></l><r><n>orderStr</n></r></bo></l><r><lit str=")" /></r></bo></r></a></e></else></if><Decls><d name="parameterName" ldsrc="93"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="93"><e><new><type typename="XplIName" /><init ldsrc="93"><list><e><fc><l><bo op="m"><l><n>member</n></l><r><n>get_name</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="parameterType" ldsrc="94"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="94"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>member</n></l><r><n>get_type</n></r></bo></l><args /></fc></l><r><n>Clone</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short=" Prepare the field&#xD;&#xA;" /><Decls><d name="field" ldsrc="97"><type ispointer="true"><dt typename="XplField" /><pi ref="true" /></type><i ldsrc="97"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="97"><classmembers><Field name="$parameterName" access="public" ldsrc="99,99"><type typename="$parameterType" /></Field></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplField" /><pi ref="true" /></type></cast></e></i></d></Decls><if ldsrc="102"><boolean><fc><l><n>IsArrayType</n></l><args><e><fc><l><bo op="m"><l><n>member</n></l><r><n>get_type</n></r></bo></l><args /></fc></e></args></fc></boolean><ifbk ldsrc="102,110"><documentation short="Insert the attribute for ArrayItems&#xD;&#xA;" /><e ldsrc="104"><a><l><n>strVar</n></l><r><bo><l><bo><l><lit str="System.Xml.Serialization.XmlArrayItem(Namespace = \\&quot;" /></l><r><n>EntityTypesNamespace</n></r></bo></l><r><lit str="\\&quot;)" /></r></bo></r></a></e><e ldsrc="107"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>request</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="105"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><n>$strVar</n></e></args></fc></e></writecode></e></args></fc></e><documentation short="Change the attribute for field becouse it's an array&#xD;&#xA;" /><e ldsrc="109"><a><l><n>strVar</n></l><r><bo><l><bo><l><bo><l><bo><l><lit str="System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace=\\&quot;" /></l><r><n>ServiceNamespace</n></r></bo></l><r><lit str="\\&quot;, Order=" /></r></bo></l><r><n>orderStr</n></r></bo></l><r><lit str=")" /></r></bo></r></a></e></ifbk></if><documentation short=" Insert the attribute of the field&#xD;&#xA;" /><e ldsrc="114"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>request</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="112"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><n>$strVar</n></e></args></fc></e></writecode></e></args></fc></e><documentation short=" Insert the field&#xD;&#xA;" /><e ldsrc="117"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>request</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>field</n></e></args></fc></e><e ldsrc="119"><uo op="inc"><u><n>order</n></u></uo></e></forblock></for><documentation short=" In case there was no parameters&#xD;&#xA;" /><if ldsrc="123"><boolean><bo op="NOTEQ"><l><n>order</n></l><r><lit str="0" type="integer" /></r></bo></boolean><ifbk ldsrc="124,149"><documentation short=" Create the full constructor&#xD;&#xA; Create the block of assignments&#xD;&#xA;" /><Decls><d name="constructorBlock" ldsrc="127"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="127"><e><new><type typename="XplFunctionBody" /></new></e></i></d></Decls><for ldsrc="128,128"><init><dl><d name="member" ldsrc="128"><type ispointer="true"><dt typename="XplParameter" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="129,136"><Decls><d name="fieldName" ldsrc="130"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="130"><e><new><type typename="XplIName" /><init ldsrc="130"><list><e><fc><l><bo op="m"><l><n>member</n></l><r><n>get_name</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><e ldsrc="135"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>constructorBlock</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="132"><e><a><l><bo op="m"><l><n>this</n></l><r><n>$fieldName</n></r></bo></l><r><n>$fieldName</n></r></a></e></writecode></e></args></fc></e></forblock></for><documentation short=" Create the constructor skeleton&#xD;&#xA;" /><Decls><d name="fullConstructor" ldsrc="139"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="139"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="139"><classmembers><Function name="$requestName" access="public" ldsrc="141,141"><ReturnType /><FunctionBody ldsrc="141,141"><e ldsrc="141"><n>$constructorBlock</n></e></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short=" Copy the parameters&#xD;&#xA;" /><e ldsrc="145"><fc><l><bo op="m"><l><n>fullConstructor</n></l><r><n>set_Parameters</n></r></bo></l><args><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Clone</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplParameters" /><pi ref="true" /></type></cast></e></args></fc></e><documentation short=" Add the constructor with all the parameters&#xD;&#xA;" /><e ldsrc="148"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>request</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>fullConstructor</n></e></args></fc></e></ifbk></if></ifbk></if></FunctionBody></Function><Function name="IsArrayType" internalname="IsArrayType#5" storage="static" ldsrc="152,152"><Parameters><P name="zoeType" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplType" ldsrc="152"><dt typename="XplType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" typeStr="$BOOLEAN$" /><FunctionBody ldsrc="152,162"><documentation short=" If it isn't a derived type it isn't a valid array type&#xD;&#xA;" /><if ldsrc="154"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_dt</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk><return ldsrc="155,155"><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_isarray</n></r></bo></l><args /></fc></return></ifbk></if><documentation short=" If it is a derived type it must be a pointer to ListOf... or ArrayList&#xD;&#xA;" /><return ldsrc="157,161"><bo op="OR"><l><bo op="OR"><l><bo op="OR"><l><bo op="GREQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_dt</n></r></bo></l><args /></fc></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><n>IndexOf</n></r></bo></l><args><e><lit str="List" /></e></args></fc></l><r><lit str="0" type="integer" /></r></bo></l><r><bo op="GREQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_dt</n></r></bo></l><args /></fc></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><n>IndexOf</n></r></bo></l><args><e><lit str="Collection" /></e></args></fc></l><r><lit str="0" type="integer" /></r></bo></r></bo></l><r><bo op="GREQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_dt</n></r></bo></l><args /></fc></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><n>IndexOf</n></r></bo></l><args><e><lit str="ArrayList" /></e></args></fc></l><r><lit str="0" type="integer" /></r></bo></r></bo></l><r><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_dt</n></r></bo></l><args /></fc></l><r><n>get_isarray</n></r></bo></l><args /></fc></r></bo></return></FunctionBody></Function><Function name="IsNullableType" internalname="IsNullableType#6" storage="static" ldsrc="163,163"><Parameters><P name="zoeType" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplType" ldsrc="163"><dt typename="XplType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" typeStr="$BOOLEAN$" /><FunctionBody ldsrc="163,166"><if ldsrc="164"><boolean><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_ispointer</n></r></bo></l><args /></fc></boolean><ifbk><return ldsrc="164,164"><lit str="true" type="bool" /></return></ifbk><else ldsrc="165"><return ldsrc="165,165"><lit str="false" type="bool" /></return></else></if></FunctionBody></Function><Function name="GetResponseName" internalname="GetResponseName#7" storage="static" ldsrc="167,167"><Parameters><P name="function" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunction" ldsrc="167"><dt typename="XplFunction" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="167,169"><return ldsrc="168,168"><bo><l><bo><l><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>function</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type></cast></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><fc><l><bo op="m"><l><n>function</n></l><r><n>get_name</n></r></bo></l><args /></fc></r></bo></l><r><lit str="Response" /></r></bo></return></FunctionBody></Function><Function name="GetRequestName" internalname="GetRequestName#8" storage="static" ldsrc="170,170"><Parameters><P name="function" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunction" ldsrc="170"><dt typename="XplFunction" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="170,172"><return ldsrc="171,171"><bo><l><bo><l><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>function</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type></cast></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><fc><l><bo op="m"><l><n>function</n></l><r><n>get_name</n></r></bo></l><args /></fc></r></bo></l><r><lit str="Request" /></r></bo></return></FunctionBody></Function><Function name="CreateResponseFunction" internalname="CreateResponseFunction#9" storage="static" ldsrc="174,174"><Parameters><P name="function" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunction" ldsrc="174"><dt typename="XplFunction" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="175,259"><documentation short=" Define the response name&#xD;&#xA;" /><Decls><d name="responseName" ldsrc="177"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="177"><e><new><type typename="XplIName" /><init ldsrc="177"><list><e><fc><l><n>GetResponseName</n></l><args><e><n>function</n></e></args></fc></e></list></init></new></e></i></d></Decls><Decls><d name="exists" ldsrc="179"><type typename="$BOOLEAN$" /><i ldsrc="179"><e><lit str="false" type="bool" /></e></i></d></Decls><for ldsrc="180,180"><init><dl><d name="node" ldsrc="180"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="181,190"><if ldsrc="182"><boolean><is><e><n>node</n></e><type typename="XplClass" /></is></boolean><ifbk ldsrc="183,189"><Decls><d name="nodeFunc" ldsrc="184"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="184"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type></cast></e></i></d></Decls><if ldsrc="185"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>nodeFunc</n></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><bo op="m"><l><n>responseName</n></l><r><n>Identifier</n></r></bo></r></bo></boolean><ifbk ldsrc="186,188"><e ldsrc="187"><a><l><n>exists</n></l><r><lit str="true" type="bool" /></r></a></e></ifbk></if></ifbk></if></forblock></for><if ldsrc="192"><boolean><uo op="not"><u><n>exists</n></u></uo></boolean><ifbk ldsrc="193,258"><documentation short=" Add the request attribute&#xD;&#xA;" /><Decls><d name="attribute" ldsrc="195"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="195"><e><bo><l><bo><l><bo><l><bo><l><lit str="System.Xml.Serialization.XmlRootAttribute(ElementName=\\&quot;" /></l><r><fc><l><bo op="m"><l><n>function</n></l><r><n>get_name</n></r></bo></l><args /></fc></r></bo></l><r><lit str="Response\\&quot;, Namespace=\\&quot;" /></r></bo></l><r><n>ServiceNamespace</n></r></bo></l><r><lit str="\\&quot;), System.CodeDom.Compiler.GeneratedCodeAttribute(\\&quot;LayerD Proxy Generator\\&quot;, \\&quot;1.0.0.0\\&quot;)" /></r></bo></e></i></d></Decls><e ldsrc="198"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="197"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><n>$attribute</n></e></args></fc></e></writecode></e></args></fc></e><documentation short=" Generate the skeleton for the response class            &#xD;&#xA;" /><Decls><d name="response" ldsrc="201"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="201"><e><writecode ldsrc="201"><class name="$responseName" access="public" ldsrc="202,205"><Function name="$responseName" access="public" ldsrc="204,204"><ReturnType /><FunctionBody ldsrc="204,204" /></Function></class></writecode></e></i></d></Decls><e ldsrc="208"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>response</n></e></args></fc></e><documentation short=" Add the set of fields for the response class based on return type&#xD;&#xA;" /><if ldsrc="211"><boolean><bo op="NOTEQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_ReturnType</n></r></bo></l><args /></fc></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><n>NativeTypes::Void</n></r></bo></boolean><ifbk ldsrc="212,257"><documentation short=" Declare a set of important values&#xD;&#xA;" /><Decls><d name="strVar" ldsrc="214"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="214"><e><lit str="0" type="null" /></e></i></d></Decls><if ldsrc="215"><boolean><fc><l><n>IsNullableType</n></l><args><e><fc><l><bo op="m"><l><n>function</n></l><r><n>get_ReturnType</n></r></bo></l><args /></fc></e></args></fc></boolean><ifbk><e ldsrc="216"><a><l><n>strVar</n></l><r><bo><l><bo><l><lit str="System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace=\\&quot;" /></l><r><n>ServiceNamespace</n></r></bo></l><r><lit str="\\&quot;, Order=0)" /></r></bo></r></a></e></ifbk><else ldsrc="217"><e ldsrc="218"><a><l><n>strVar</n></l><r><bo><l><bo><l><lit str="System.Xml.Serialization.XmlElementAttribute(Namespace=\\&quot;" /></l><r><n>ServiceNamespace</n></r></bo></l><r><lit str="\\&quot;, Order=0)" /></r></bo></r></a></e></else></if><Decls><d name="returnName" ldsrc="220"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="220"><e><new><type typename="XplIName" /><init ldsrc="220"><list><e><bo><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><lit str="Result" /></r></bo></e></list></init></new></e></i></d></Decls><Decls><d name="returnType" ldsrc="221"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="221"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_ReturnType</n></r></bo></l><args /></fc></l><r><n>Clone</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short=" Prepare the field&#xD;&#xA;" /><Decls><d name="field" ldsrc="224"><type ispointer="true"><dt typename="XplField" /><pi ref="true" /></type><i ldsrc="224"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="224"><classmembers><Field name="$returnName" access="public" ldsrc="226,226"><type typename="$returnType" /></Field></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplField" /><pi ref="true" /></type></cast></e></i></d></Decls><if ldsrc="229"><boolean><fc><l><n>IsArrayType</n></l><args><e><fc><l><bo op="m"><l><n>function</n></l><r><n>get_ReturnType</n></r></bo></l><args /></fc></e></args></fc></boolean><ifbk ldsrc="229,237"><documentation short="Insert the attribute for ArrayItems&#xD;&#xA;" /><e ldsrc="231"><a><l><n>strVar</n></l><r><bo><l><bo><l><lit str="System.Xml.Serialization.XmlArrayItem(Namespace = \\&quot;" /></l><r><n>EntityTypesNamespace</n></r></bo></l><r><lit str="\\&quot;)" /></r></bo></r></a></e><e ldsrc="234"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>response</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="232"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><n>$strVar</n></e></args></fc></e></writecode></e></args></fc></e><documentation short="Change the attribute for field becouse it's an array&#xD;&#xA;" /><e ldsrc="236"><a><l><n>strVar</n></l><r><bo><l><bo><l><lit str="System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace=\\&quot;" /></l><r><n>ServiceNamespace</n></r></bo></l><r><lit str="\\&quot;, Order=0)" /></r></bo></r></a></e></ifbk></if><documentation short=" Insert the attribute of the field&#xD;&#xA;" /><e ldsrc="241"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>response</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="239"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><n>$strVar</n></e></args></fc></e></writecode></e></args></fc></e><documentation short=" Insert the field&#xD;&#xA;" /><e ldsrc="244"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>response</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>field</n></e></args></fc></e><documentation short=" Create the full constructor   &#xD;&#xA;" /><Decls><d name="constructor" ldsrc="247"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="247"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="247"><classmembers><Function name="$responseName" access="public" ldsrc="249,249"><Parameters><P name="$returnName" number="1"><type typename="$returnType" ldsrc="249" /></P></Parameters><ReturnType /><FunctionBody ldsrc="250,252"><e ldsrc="251"><a><l><bo op="m"><l><n>this</n></l><r><n>$returnName</n></r></bo></l><r><n>$returnName</n></r></a></e></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short=" Add the constructor&#xD;&#xA;" /><e ldsrc="256"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>response</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>constructor</n></e></args></fc></e></ifbk></if></ifbk></if></FunctionBody></Function><Function name="CreateClient" internalname="CreateClient#10" storage="static" ldsrc="261,261"><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="262,425"><documentation short=" Construct the contract and client name IBAR and BARClient&#xD;&#xA; Declare all the necessary nodes&#xD;&#xA;" /><Decls><d name="contractNameString" ldsrc="265"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="265"><e><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>get_name</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="currentClass" ldsrc="266"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="266"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="267"><fc><l><bo op="m"><l><n>currentClass</n></l><r><n>set_typename</n></r></bo></l><args><e><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>get_TypeName</n></r></bo></l><args /></fc></e></args></fc></e><Decls><d name="contractName" ldsrc="268"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="268"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="269"><fc><l><bo op="m"><l><n>contractName</n></l><r><n>set_typename</n></r></bo></l><args><e><n>contractNameString</n></e></args></fc></e><Decls><d name="clientName" ldsrc="270"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="270"><e><lit str="0" type="null" /></e></i></d></Decls><if ldsrc="271"><boolean><bo op="EQ"><l><b><l><n>contractNameString</n></l><args><e><lit str="0" type="integer" /></e></args></b></l><r><lit str="I" type="char" /></r></bo></boolean><ifbk ldsrc="271,273"><e ldsrc="272"><a><l><n>clientName</n></l><r><new><type typename="XplIName" /><init ldsrc="272"><list><e><bo><l><fc><l><bo op="m"><l><n>contractNameString</n></l><r><n>Substring</n></r></bo></l><args><e><lit str="1" type="integer" /></e><e><bo op="min"><l><bo op="m"><l><n>contractNameString</n></l><r><n>Length</n></r></bo></l><r><lit str="1" type="integer" /></r></bo></e></args></fc></l><r><lit str="Client" /></r></bo></e></list></init></new></r></a></e></ifbk><else ldsrc="274"><e ldsrc="275"><a><l><n>clientName</n></l><r><new><type typename="XplIName" /><init ldsrc="275"><list><e><bo><l><n>contractNameString</n></l><r><lit str="Client" /></r></bo></e></list></init></new></r></a></e></else></if><Decls><d name="genericClassType" ldsrc="277"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="277"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="278"><fc><l><bo op="m"><l><n>genericClassType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><lit str="CFClientBase" /></l><r><n>contractNameString</n></r></bo></e></args></fc></e><Decls><d name="genericClassIName" ldsrc="279"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="279"><e><new><type typename="XplIName" /><init ldsrc="279"><list><e><bo><l><lit str="CFClientBase" /></l><r><n>contractNameString</n></r></bo></e></list></init></new></e></i></d></Decls><Decls><d name="serviceEndpointStr" ldsrc="281"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="281"><e><bo><l><lit str="http://utnEmallserver/" /></l><r><n>contractNameString</n></r></bo></e></i></d></Decls><documentation short=" Create a stub for the client            &#xD;&#xA;" /><Decls><d name="client" ldsrc="284"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="284"><e><writecode ldsrc="284"><class name="$clientName" access="public" ldsrc="285,305"><Inherits><c name="_genericClassType" access="public" ldsrc="285" /></Inherits><Implements><i name="_contractName" access="public" ldsrc="285" /></Implements><Field name="EndpointAddress" storage="static" ldsrc="287,287"><type ispointer="true"><dt typename="EndpointAddress" /><pi ref="true" /></type><i ldsrc="287"><e><new><type typename="EndpointAddress" /><init ldsrc="287"><list><e><n>$serviceEndpointStr</n></e></list></init></new></e></i></Field><Function name="$clientName" access="public" ldsrc="289,289"><ReturnType /><FunctionBody ldsrc="289,289" /><BaseInitializers><i className="this" ldsrc="289,289"><params><e><fc><l><n>CreateDefaultBinding</n></l><args /></fc></e><e><n>EndpointAddress</n></e></params></i></BaseInitializers></Function><Function name="$clientName" access="public" ldsrc="291,291"><Parameters><P name="binding" number="1"><type ispointer="true" ldsrc="291"><dt typename="DotNET::System::ServiceModel::Channels::Binding" /><pi ref="true" /></type></P><P name="remoteAddress" number="2"><type ispointer="true" ldsrc="291"><dt typename="EndpointAddress" /><pi ref="true" /></type></P></Parameters><ReturnType /><FunctionBody ldsrc="293,294" /><BaseInitializers><i className="base" ldsrc="292,292"><params><e><n>binding</n></e><e><n>remoteAddress</n></e></params></i></BaseInitializers></Function><Function name="CreateDefaultBinding" access="public" storage="static" ldsrc="296,296"><ReturnType ispointer="true"><dt typename="Channels::Binding" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="297,304"><Decls><d name="binding" ldsrc="298"><type ispointer="true"><dt typename="Channels::CustomBinding" /><pi ref="true" /></type><i ldsrc="298"><e><new><type typename="Channels::CustomBinding" /></new></e></i></d></Decls><e ldsrc="302"><fc><l><bo op="m"><l><bo op="m"><l><n>binding</n></l><r><n>Elements</n></r></bo></l><r><n>AddRange</n></r></bo></l><args><e><new><type isarray="true"><dt ispointer="true"><dt typename="BindingElement" /><pi ref="true" /></dt></type><init array="true"><e><new><type typename="DotNET::System::ServiceModel::Channels::TextMessageEncodingBindingElement" /><init ldsrc="300"><list><e><n>MessageVersion::Soap11</n></e><e><n>DotNET::System::Text::Encoding::UTF8</n></e></list></init></new></e><e><new><type typename="DotNET::System::ServiceModel::Channels::HttpTransportBindingElement" /></new></e></init></new></e></args></fc></e><return ldsrc="303,303"><n>binding</n></return></FunctionBody></Function></class></writecode></e></i></d></Decls><documentation short=" Add the generic header and the Client class&#xD;&#xA;" /><e ldsrc="313"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="310"><e><fc><l><n>UtnEmall::Utils::CFClientBase::New</n></l><args><e><n>$genericClassIName</n></e><e><t typename="$contractName" /></e></args></fc></e></writecode></e></args></fc></e><e ldsrc="314"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>client</n></e></args></fc></e><documentation short="Esto es por un error en writecode :P&#xD;&#xA;Alguna vez dijo aca: contractName.Identifier &#xD;&#xA;" /><e ldsrc="318"><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>client</n></l><r><n>FindNode</n></r></bo></l><args><e><lit str="/@XplInherit" /></e></args></fc></e><type ispointer="true"><dt typename="XplInherit" /><pi ref="true" /></type></cast></l><r><n>set_name</n></r></bo></l><args><e><bo op="m"><l><n>genericClassIName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><e ldsrc="319"><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>client</n></l><r><n>FindNode</n></r></bo></l><args><e><lit str="/@XplImplement" /></e></args></fc></e><type ispointer="true"><dt typename="XplImplement" /><pi ref="true" /></type></cast></l><r><n>set_name</n></r></bo></l><args><e><fc><l><bo op="m"><l><n>contractName</n></l><r><n>get_typename</n></r></bo></l><args /></fc></e></args></fc></e><Decls><d name="lastDocummentation" ldsrc="321"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="321"><e><lit str="0" type="null" /></e></i></d></Decls><documentation short=" Iterate through class members, they are all methods&#xD;&#xA;" /><for ldsrc="323,323"><init><dl><d name="member" ldsrc="323"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="323,424"><if ldsrc="324"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>member</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplDocumentation" /></r></bo></boolean><ifbk ldsrc="324,327"><documentation short=" Backup the comment&#xD;&#xA;" /><e ldsrc="326"><a><l><n>lastDocummentation</n></l><r><n>member</n></r></a></e></ifbk><else ldsrc="328"><if ldsrc="328"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>member</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunction" /></r></bo></boolean><ifbk ldsrc="329,423"><documentation short=" Define useful strings&#xD;&#xA;" /><Decls><d name="functionName" ldsrc="331"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="331"><e><fc><l><bo op="m"><l><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></l><r><n>get_name</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="methodResponseString" ldsrc="332"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="332"><e><fc><l><n>GetResponseName</n></l><args><e><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></args></fc></e></i></d></Decls><documentation short=" Define useful nodes for the client&#xD;&#xA;" /><Decls><d name="methodName" ldsrc="335"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="335"><e><new><type typename="XplIName" /><init ldsrc="335"><list><e><n>functionName</n></e></list></init></new></e></i></d></Decls><Decls><d name="methodRequest" ldsrc="336"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="336"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="337"><fc><l><bo op="m"><l><n>methodRequest</n></l><r><n>set_typename</n></r></bo></l><args><e><fc><l><n>GetRequestName</n></l><args><e><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></args></fc></e></args></fc></e><Decls><d name="methodResponse" ldsrc="338"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="338"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="339"><fc><l><bo op="m"><l><n>methodResponse</n></l><r><n>set_typename</n></r></bo></l><args><e><n>methodResponseString</n></e></args></fc></e><Decls><d name="actionAddress" ldsrc="341"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="341"><e><bo><l><bo><l><bo><l><n>ServiceNamespace</n></l><r><n>contractNameString</n></r></bo></l><r><lit str="/" /></r></bo></l><r><n>functionName</n></r></bo></e></i></d></Decls><Decls><d name="replyAddress" ldsrc="342"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="342"><e><bo><l><n>actionAddress</n></l><r><lit str="Response" /></r></bo></e></i></d></Decls><Decls><d name="func" ldsrc="344"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="344"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="344"><classmembers><Function name="$methodName" ldsrc="347,347"><Parameters><P name="request" number="1"><type ispointer="true" ldsrc="347"><dt typename="$methodRequest" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$methodResponse" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="348,359"><Decls><d name="info" ldsrc="349"><type ispointer="true"><dt typename="CFInvokeInfo" /><pi ref="true" /></type><i ldsrc="349"><e><new><type typename="CFInvokeInfo" /></new></e></i></d></Decls><e ldsrc="350"><a><l><bo op="m"><l><n>info</n></l><r><n>Action</n></r></bo></l><r><n>$actionAddress</n></r></a></e><e ldsrc="351"><a><l><bo op="m"><l><n>info</n></l><r><n>RequestIsWrapped</n></r></bo></l><r><lit str="true" type="bool" /></r></a></e><e ldsrc="352"><a><l><bo op="m"><l><n>info</n></l><r><n>ReplyAction</n></r></bo></l><r><n>$replyAddress</n></r></a></e><e ldsrc="353"><a><l><bo op="m"><l><n>info</n></l><r><n>ResponseIsWrapped</n></r></bo></l><r><lit str="true" type="bool" /></r></a></e><e ldsrc="355"><fc><l><n>CFClientBase::MakeInvoke</n></l><args><e><n>$genericClassIName</n></e><e><t typename="$methodRequest" /></e><e><t typename="$methodResponse" /></e></args></fc></e><Decls><d name="retVal" ldsrc="356"><type ispointer="true"><dt typename="$methodResponse" /><pi ref="true" /></type><i ldsrc="356"><e><fc><l><bo op="m"><l><n>this</n></l><r><n>Invoke</n></r></bo></l><args><e><n>info</n></e><e><n>request</n></e></args></fc></e></i></d></Decls><return ldsrc="358,358"><n>retVal</n></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><e ldsrc="362"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>client</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>func</n></e></args></fc></e><documentation short=" Define some nodes for the following method&#xD;&#xA;" /><Decls><d name="methodReturnType" ldsrc="365"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="365"><e><new><type typename="XplType" /></new></e></i></d></Decls><Decls><d name="functionMember" ldsrc="366"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="366"><e><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><e ldsrc="367"><a><l><n>methodReturnType</n></l><r><fc><l><bo op="m"><l><n>functionMember</n></l><r><n>get_ReturnType</n></r></bo></l><args /></fc></r></a></e><Decls><d name="methodRequestName" ldsrc="368"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="368"><e><new><type typename="XplIName" /><init ldsrc="368"><list><e><n>functionName</n></e></list></init></new></e></i></d></Decls><Decls><d name="methodResult" ldsrc="369"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="369"><e><new><type typename="XplIName" /><init ldsrc="369"><list><e><bo><l><n>functionName</n></l><r><lit str="Result" /></r></bo></e></list></init></new></e></i></d></Decls><if ldsrc="371"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>methodReturnType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><n>NativeTypes::Void</n></r></bo></boolean><ifbk ldsrc="371,383"><documentation short=" Create the method skeleton&#xD;&#xA;" /><e ldsrc="382"><a><l><n>func</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="373"><classmembers><Function name="$methodName" access="public" ldsrc="376,376"><ReturnType typename="$methodReturnType" /><FunctionBody ldsrc="377,381"><Decls><d name="request" ldsrc="378"><type ispointer="true"><dt typename="$methodRequest" /><pi ref="true" /></type><i ldsrc="378"><e><new><type typename="$methodRequest" /></new></e></i></d></Decls><Decls><d name="response" ldsrc="379"><type ispointer="true"><dt typename="$methodResponse" /><pi ref="true" /></type><i ldsrc="379"><e><fc><l><bo op="m"><l><n>this</n></l><r><n>$methodRequestName</n></r></bo></l><args><e><n>request</n></e></args></fc></e></i></d></Decls><return ldsrc="380" /></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></r></a></e></ifbk><else ldsrc="384"><documentation short=" Create the method skeleton&#xD;&#xA;" /><e ldsrc="395"><a><l><n>func</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="386"><classmembers><Function name="$methodName" access="public" ldsrc="389,389"><ReturnType typename="$methodReturnType" /><FunctionBody ldsrc="390,394"><Decls><d name="request" ldsrc="391"><type ispointer="true"><dt typename="$methodRequest" /><pi ref="true" /></type><i ldsrc="391"><e><new><type typename="$methodRequest" /></new></e></i></d></Decls><Decls><d name="response" ldsrc="392"><type ispointer="true"><dt typename="$methodResponse" /><pi ref="true" /></type><i ldsrc="392"><e><fc><l><bo op="m"><l><n>this</n></l><r><n>$methodRequestName</n></r></bo></l><args><e><n>request</n></e></args></fc></e></i></d></Decls><return ldsrc="393,393"><bo op="m"><l><n>response</n></l><r><n>$methodResult</n></r></bo></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></r></a></e></else></if><if ldsrc="398"><boolean><bo op="GR"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionMember</n></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>GetLength</n></r></bo></l><args /></fc></l><r><lit str="0" type="integer" /></r></bo></boolean><ifbk ldsrc="398,411"><Decls><d name="initList" ldsrc="399"><type ispointer="true"><dt typename="XplInitializerList" /><pi ref="true" /></type><i ldsrc="399"><e><fc><l><n>XplNewExpression::new_init</n></l><args /></fc></e></i></d></Decls><e ldsrc="400"><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>func</n></l><r><n>FindNode</n></r></bo></l><args><e><lit str="/new" /></e></args></fc></e><type ispointer="true"><dt typename="XplNewExpression" /><pi ref="true" /></type></cast></l><r><n>set_init</n></r></bo></l><args><e><n>initList</n></e></args></fc></e><e ldsrc="402"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>initList</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><n>XplInitializerList::new_list</n></l><args /></fc></e></args></fc></e><e ldsrc="403"><a><l><n>initList</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>initList</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplInitializerList" /><pi ref="true" /></type></cast></r></a></e><for ldsrc="405,405"><init><dl><d name="param" ldsrc="405"><type ispointer="true"><dt typename="XplParameter" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionMember</n></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="405,410"><Decls><d name="paramName" ldsrc="406"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="406"><e><new><type typename="XplIName" /><init ldsrc="406"><list><e><fc><l><bo op="m"><l><n>param</n></l><r><n>get_name</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><e ldsrc="409"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>initList</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="408"><e><n>$paramName</n></e></writecode></e></args></fc></e></forblock></for></ifbk></if><documentation short="XplInitializerList&#xD;&#xA; Copy the parameters into the method and into method request (its first child)&#xD;&#xA;" /><Decls><d name="methodParameters" ldsrc="414"><type ispointer="true"><dt typename="XplParameters" /><pi ref="true" /></type><i ldsrc="414"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionMember</n></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Clone</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplParameters" /><pi ref="true" /></type></cast></e></i></d></Decls><e ldsrc="415"><fc><l><bo op="m"><l><n>func</n></l><r><n>set_Parameters</n></r></bo></l><args><e><n>methodParameters</n></e></args></fc></e><documentation short=" Insert the comment if exists&#xD;&#xA;" /><if ldsrc="417"><boolean><bo op="NOTEQ"><l><n>lastDocummentation</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="417,420"><e ldsrc="418"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>client</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>lastDocummentation</n></e></args></fc></e><e ldsrc="419"><a><l><n>lastDocummentation</n></l><r><lit str="0" type="null" /></r></a></e></ifbk></if><documentation short=" Insert the function inside the class&#xD;&#xA;" /><e ldsrc="422"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>client</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>func</n></e></args></fc></e></ifbk></if></else></if></forblock></for></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class></Namespace></DocumentBody></XPLDocument>