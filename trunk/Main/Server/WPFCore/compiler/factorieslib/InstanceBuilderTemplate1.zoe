<XPLDocument><DocumentBody ldsrc="1,1,.\\MainTemplate\\InstanceBuilderTemplate.dpp"><Import ldsrc="1"><ns>System</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Using ldsrc="2"><ns>DotNET::System</ns></Using><Using ldsrc="3"><ns>DotNET::System::IO</ns></Using><Using ldsrc="4"><ns>DotNET::System::Collections</ns></Using><Using ldsrc="5"><ns>DotNET::LayerD::CodeDOM</ns></Using><Using ldsrc="6"><ns>DotNET::LayerD::ZOECompiler</ns></Using><Namespace name="Zoe::Tools" ldsrc="8,486"><Class name="iObjectInterpreterBuilder" access="public" isfactory="true" isinteractive="true" ldsrc="10,75"><Function name="Sample" internalname="Sample#1" access="public" storage="static" ldsrc="12,12"><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplClass"><dt typename="XplClass" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="12,14"><return ldsrc="13,13"><fc><l><n>Help</n></l><args /></fc></return></FunctionBody></Function><Function name="Help" internalname="Help#2" access="public" storage="static" ldsrc="15,15"><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplClass"><dt typename="XplClass" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="15,74"><e ldsrc="16"><fc><l><n>Console::WriteLine</n></l><args><e><lit str="Ejecutando Help de iObjectInterpreterBuilder." /></e></args></fc></e><return ldsrc="17,73"><writecode ldsrc="17"><class name="SampleDSL" access="public" isfactory="true" ldsrc="18,72"><Function name="New" access="public" storage="static" ldsrc="21,21"><Parameters><P name="dslData" number="1"><type typename="$BLOCK$" ldsrc="21" /></P></Parameters><ReturnType ispointer="true"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="21,27"><Decls><d name="interpreter" ldsrc="22"><type ispointer="true"><dt typename="MyInterpreter" /><pi ref="true" /></type><i ldsrc="22"><e><new><type typename="MyInterpreter" /></new></e></i></d></Decls><documentation short=" Reemplaze this with your data class&#xD;&#xA;" /><Decls><d name="data" ldsrc="24"><type ispointer="true"><dt typename="DSLData" /><pi ref="true" /></type><i ldsrc="24"><e><fc><l><bo op="m"><l><n>interpreter</n></l><r><n>ProcessDSLData</n></r></bo></l><args><e><n>dslData</n></e></args></fc></e></i></d></Decls><documentation short=" Call code generation function&#xD;&#xA;" /><return ldsrc="26,26"><fc><l><n>Generate</n></l><args><e><n>data</n></e></args></fc></return></FunctionBody></Function><Function name="Generate" access="public" storage="static" ldsrc="29,29"><Parameters><P name="data" number="1"><type ispointer="true" ldsrc="29"><dt typename="DSLData" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" /><FunctionBody ldsrc="29,31"><documentation short=" Place your generation code here&#xD;&#xA;" /></FunctionBody></Function><documentation short=" Class to store main DSL data&#xD;&#xA;" /><Class name="DSLData" ldsrc="34,40"><Field name="SampleName" access="public" ldsrc="36,36"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type></Field><Field name="SampleInt" access="public" ldsrc="37,37"><type typename="$INTEGER$" /></Field><Field name="SampleString" access="public" ldsrc="38,38"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="SampleCollection" access="public" ldsrc="39,39"><type ispointer="true"><dt typename="ArrayList" /><pi ref="true" /></type><i ldsrc="39"><e><new><type typename="ArrayList" /></new></e></i></Field></Class><documentation short=" Class to store collection item data&#xD;&#xA;" /><Class name="SampleItem" ldsrc="42,47"><Field name="SampleExpression" access="public" ldsrc="44,44"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type></Field><Field name="SampleFloat" access="public" ldsrc="45,45"><type typename="$FLOAT$" /></Field><Field name="SampleBoolean" access="public" ldsrc="46,46"><type typename="$BOOLEAN$" /></Field></Class><documentation short=" Sample DSL Model for ObjectInterpreterBuilder&#xD;&#xA;" /><e ldsrc="71"><fc><l><n>ObjectInterpreterBuilder::New</n></l><args><e><n>MyInterpreter</n></e><e><n>DSLData</n></e></args><bk ldsrc="49,71"><documentation short=" Use &quot;INAME&quot; to capture an identifier on a XplIName field&#xD;&#xA;" /><e ldsrc="51"><a><l><n>SampleName</n></l><r><n>INAME</n></r></a></e><documentation short=" Use &quot;INT&quot; to capture an integer literal&#xD;&#xA;" /><e ldsrc="53"><a><l><n>SampleInt</n></l><r><n>INT</n></r></a></e><documentation short=" Use &quot;STRING&quot; to capture a string literal&#xD;&#xA;" /><e ldsrc="55"><a><l><n>SampleString</n></l><r><n>STRING</n></r></a></e><documentation short=" Use &quot;Collection(COLLECTION_FIELD_NAME) { ... };&quot; to capture&#xD;&#xA; collection of items, the collection must have an &quot;Add( item )&quot;&#xD;&#xA; method and must be initialized&#xD;&#xA;" /><e ldsrc="70"><fc><l><n>Collection</n></l><args><e><n>SampleCollection</n></e></args><bk ldsrc="59,70"><documentation short=" Use &quot;ITEM_TYPE { ...item content... };&quot; to capture&#xD;&#xA; each type of items inside the collection&#xD;&#xA;" /><e ldsrc="69"><fc><l><n>SampleItem</n></l><bk ldsrc="62,69"><documentation short=" Use &quot;EXPRESSION&quot; to capture a complete expression&#xD;&#xA;" /><e ldsrc="64"><a><l><n>SampleExpression</n></l><r><n>EXPRESSION</n></r></a></e><documentation short=" Use &quot;FLOAT&quot; to capture a float literal&#xD;&#xA;" /><e ldsrc="66"><a><l><n>SampleFloat</n></l><r><n>FLOAT</n></r></a></e><documentation short=" Use &quot;BOOL&quot; to capture a boolean literal&#xD;&#xA;" /><e ldsrc="68"><a><l><n>SampleBoolean</n></l><r><n>BOOL</n></r></a></e></bk></fc></e></bk></fc></e></bk></fc></e></class></writecode></return></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryInteractiveBase" access="public" /></Inherits></Class><Class name="ObjectInterpreterBuilder" access="public" isfactory="true" ldsrc="77,373"><Field name="generatedFunctions" storage="static" ldsrc="78,78"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type></Field><Function name="New" internalname="New#2" access="public" storage="static" ldsrc="80,80"><Parameters><P name="interpreterName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="80" /></P><P name="mainClass" number="2"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="80" /></P><P name="contentTemplate" number="3"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="80" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="80,92"><Decls><d name="interpreterClass" ldsrc="81"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="81"><e><writecode ldsrc="81"><class name="$interpreterName" access="public" ldsrc="82,85"><Field name="compiler" ldsrc="83,83"><type ispointer="true"><dt typename="ZOECompilerCore" /><pi ref="true" /></type><i ldsrc="83"><e><n>ClassfactoryBase::compiler</n></e></i></Field></class></writecode></e></i></d></Decls><e ldsrc="87"><a><l><n>generatedFunctions</n></l><r><new><type typename="Hashtable" /></new></r></a></e><e ldsrc="89"><fc><l><n>MakeFunctionForType</n></l><args><e><n>interpreterClass</n></e><e><n>mainClass</n></e><e><n>contentTemplate</n></e></args></fc></e><return ldsrc="91,91"><n>interpreterClass</n></return></FunctionBody></Function><Function name="MakeFunctionForType" internalname="MakeFunctionForType#3" storage="static" ldsrc="94,94"><Parameters><P name="interpreterClass" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplClass" ldsrc="94"><dt typename="XplClass" /><pi ref="true" /></type></P><P name="classType" number="2"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="94" /></P><P name="contentTemplate" number="3"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunctionBody" ldsrc="94"><dt typename="XplFunctionBody" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="94,372"><Decls><d name="functionName" ldsrc="95"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="95"><e><new><type typename="XplIName" /><init ldsrc="95"><list><e><bo><l><lit str="Process" /></l><r><bo op="m"><l><n>classType</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><if ldsrc="97"><boolean><fc><l><bo op="m"><l><n>generatedFunctions</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>functionName</n></l><r><n>Identifier</n></r></bo></e></args></fc></boolean><ifbk><return ldsrc="97" /></ifbk></if><e ldsrc="98"><fc><l><bo op="m"><l><n>generatedFunctions</n></l><r><n>Add</n></r></bo></l><args><e><bo op="m"><l><n>functionName</n></l><r><n>Identifier</n></r></bo></e><e><bo op="m"><l><n>functionName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><Decls><d name="propertysIfs" ldsrc="100"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="100"><e><new><type typename="XplFunctionBody" /></new></e></i></d><d name="collectionsIfs" ldsrc="100"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="100"><e><new><type typename="XplFunctionBody" /></new></e></i></d></Decls><documentation short="Itero en los nodos del template para generar los Ifs y otras funciones que hagan falta&#xD;&#xA;" /><for ldsrc="103,103"><init><dl><d name="nodeIt" ldsrc="103"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>contentTemplate</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="103,303"><Decls><d name="node" ldsrc="104"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="104"><e><fc><l><bo op="m"><l><n>nodeIt</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="105"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplAssing" /></r></bo></r></bo></boolean><ifbk ldsrc="105,214"><Decls><d name="assingNode" ldsrc="106"><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type><i ldsrc="106"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="leftExp" ldsrc="107"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="107"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_l</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="rightExp" ldsrc="108"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="108"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_r</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="109"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="110,113"><e ldsrc="111"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="111"><list><e><lit str="Se requiere un identificador en lado izquierdo de Content Tempalte." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="112" /></ifbk></if><if ldsrc="114"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="115,118"><e ldsrc="116"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="116"><list><e><lit str="Se requiere un identificador en lado derecho de Content Tempalte." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="117" /></ifbk></if><Decls><d name="propertyName" ldsrc="119"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="119"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="propertyType" ldsrc="120"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="120"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="propertyIf" ldsrc="121"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="121"><e><lit str="0" type="null" /></e></i></d></Decls><documentation short="Armo el if para la propiedad actual&#xD;&#xA;" /><if ldsrc="123"><boolean><bo op="AND"><l><bo op="AND"><l><bo op="AND"><l><bo op="AND"><l><bo op="AND"><l><bo op="AND"><l><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="STRING" /></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="INT" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="LONG" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="FLOAT" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="BOOL" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="INAME" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="EXPRESSION" /></r></bo></r></bo></boolean><ifbk ldsrc="123,125"><e ldsrc="124"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="124"><list><e><lit str="Se requiere un tipo soportado en lado derecho propiedad de Content Tempalte." /></e><e><n>node</n></e></list></init></new></e></args></fc></e></ifbk><else ldsrc="126"><if ldsrc="127"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="EXPRESSION" /></r></bo></boolean><ifbk ldsrc="127,134"><e ldsrc="133"><a><l><n>propertyIf</n></l><r><writecode ldsrc="128"><bk><if ldsrc="129"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="129,132"><e ldsrc="130"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><e ldsrc="131"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></r></a></e></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="135"><if ldsrc="135"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="INAME" /></r></bo></boolean><ifbk ldsrc="135,142"><e ldsrc="141"><a><l><n>propertyIf</n></l><r><writecode ldsrc="136"><bk><if ldsrc="137"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="137,140"><e ldsrc="138"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><e ldsrc="139"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><new><type typename="XplIName" /><init ldsrc="139"><list><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></list></init></new></r></a></e></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="143"><if ldsrc="143"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="STRING" /></r></bo></boolean><ifbk ldsrc="143,150"><e ldsrc="149"><a><l><n>propertyIf</n></l><r><writecode ldsrc="144"><bk><if ldsrc="145"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="145,148"><e ldsrc="146"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><e ldsrc="147"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></r></a></e></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="151"><if ldsrc="151"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="INT" /></r></bo></boolean><ifbk ldsrc="151,168"><e ldsrc="167"><a><l><n>propertyIf</n></l><r><writecode ldsrc="152"><bk><if ldsrc="153"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="153,166"><e ldsrc="154"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><Decls><d name="tempstr" ldsrc="155"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="155"><e><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="156"><boolean><bo op="AND"><l><bo op="AND"><l><bo op="NOTEQ"><l><n>tempstr</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="GR"><l><bo op="m"><l><n>tempstr</n></l><r><n>Length</n></r></bo></l><r><lit str="1" type="integer" /></r></bo></r></bo></l><r><bo op="OR"><l><bo op="EQ"><l><b><l><n>tempstr</n></l><args><e><lit str="1" type="integer" /></e></args></b></l><r><lit str="x" type="char" /></r></bo></l><r><bo op="EQ"><l><b><l><n>tempstr</n></l><args><e><lit str="1" type="integer" /></e></args></b></l><r><lit str="X" type="char" /></r></bo></r></bo></r></bo></boolean><ifbk ldsrc="156,160"><e ldsrc="159"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Int32::Parse</n></l><args><e><fc><l><bo op="m"><l><n>tempstr</n></l><r><n>Substring</n></r></bo></l><args><e><lit str="2" type="integer" /></e></args></fc></e><e><n>DotNET::System::Globalization::NumberStyles::AllowHexSpecifier</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></ifbk><else ldsrc="161"><e ldsrc="164"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Int32::Parse</n></l><args><e><n>tempstr</n></e><e><n>DotNET::System::Globalization::NumberStyles::Number</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></else></if></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="169"><if ldsrc="169"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="LONG" /></r></bo></boolean><ifbk ldsrc="169,186"><e ldsrc="185"><a><l><n>propertyIf</n></l><r><writecode ldsrc="170"><bk><if ldsrc="171"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="171,184"><e ldsrc="172"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><Decls><d name="tempstr" ldsrc="173"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="173"><e><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="174"><boolean><bo op="AND"><l><bo op="AND"><l><bo op="NOTEQ"><l><n>tempstr</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="GR"><l><bo op="m"><l><n>tempstr</n></l><r><n>Length</n></r></bo></l><r><lit str="1" type="integer" /></r></bo></r></bo></l><r><bo op="OR"><l><bo op="EQ"><l><b><l><n>tempstr</n></l><args><e><lit str="1" type="integer" /></e></args></b></l><r><lit str="x" type="char" /></r></bo></l><r><bo op="EQ"><l><b><l><n>tempstr</n></l><args><e><lit str="1" type="integer" /></e></args></b></l><r><lit str="X" type="char" /></r></bo></r></bo></r></bo></boolean><ifbk ldsrc="174,178"><e ldsrc="177"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Int64::Parse</n></l><args><e><fc><l><bo op="m"><l><n>tempstr</n></l><r><n>Substring</n></r></bo></l><args><e><lit str="2" type="integer" /></e></args></fc></e><e><n>DotNET::System::Globalization::NumberStyles::AllowHexSpecifier</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></ifbk><else ldsrc="179"><e ldsrc="182"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Int64::Parse</n></l><args><e><n>tempstr</n></e><e><n>DotNET::System::Globalization::NumberStyles::Number</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></else></if></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="187"><if ldsrc="187"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="FLOAT" /></r></bo></boolean><ifbk ldsrc="187,196"><e ldsrc="195"><a><l><n>propertyIf</n></l><r><writecode ldsrc="188"><bk><if ldsrc="189"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="189,194"><e ldsrc="190"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><e ldsrc="193"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Single::Parse</n></l><args><e><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></e><e><n>DotNET::System::Globalization::NumberStyles::Number</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="197"><if ldsrc="197"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="BOOL" /></r></bo></boolean><ifbk ldsrc="197,207"><e ldsrc="206"><a><l><n>propertyIf</n></l><r><writecode ldsrc="198"><bk><if ldsrc="199"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="199,205"><e ldsrc="200"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><if ldsrc="201"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></l><r><lit str="true" /></r></bo></boolean><ifbk><e ldsrc="202"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><lit str="true" type="bool" /></r></a></e></ifbk><else ldsrc="203"><e ldsrc="204"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><lit str="false" type="bool" /></r></a></e></else></if></ifbk></if></bk></writecode></r></a></e></ifbk></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if><documentation short="Agrego el bloque if al bloque de ifs :-)&#xD;&#xA;" /><if ldsrc="210"><boolean><bo op="NOTEQ"><l><n>propertyIf</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="210,213"><e ldsrc="211"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Propiedad agregada. " /></l><r><n>propertyName</n></r></bo></e></args></fc></e><e ldsrc="212"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>propertysIfs</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><n>propertyIf</n></l><r><n>Children</n></r></bo></l><args /></fc></e></args></fc></e></ifbk></if></ifbk><else ldsrc="215"><if ldsrc="215"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></r></bo></boolean><ifbk ldsrc="215,298"><documentation short=" Si es una llamada a función&#xD;&#xA;" /><Decls><d name="functionCall" ldsrc="217"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="217"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="fcBlock" ldsrc="218"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="218"><e><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="219"><boolean><bo op="EQ"><l><n>fcBlock</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="219,222"><e ldsrc="220"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="220"><list><e><lit str="Se requiere un bloque en el Content Template." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="221" /></ifbk></if><Decls><d name="leftNode" ldsrc="223"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="223"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="224"><boolean><bo op="OR"><l><bo op="EQ"><l><n>leftNode</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="224,227"><e ldsrc="225"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="225"><list><e><lit str="Se requiere un identificador en el Content Template." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="226" /></ifbk></if><if ldsrc="228"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="GR"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>GetLength</n></r></bo></l><args /></fc></l><r><lit str="0" type="integer" /></r></bo></r></bo></boolean><ifbk ldsrc="228,293"><documentation short="Puede ser una colección o algun item especial&#xD;&#xA;" /><if ldsrc="230"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_StringValue</n></r></bo></l><args /></fc></l><r><lit str="Collection" /></r></bo></boolean><ifbk ldsrc="230,280"><Decls><d name="collectionFieldName" ldsrc="231"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="231"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="collectionName" ldsrc="232"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="232"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>collectionFieldName</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="itemsTypesIfs" ldsrc="233"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="233"><e><new><type typename="XplFunctionBody" /></new></e></i></d></Decls><documentation short="Itero en la colección para ver los tipos que contiene la colección&#xD;&#xA;" /><for ldsrc="236,236"><init><dl><d name="nodeItCol" ldsrc="236"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>fcBlock</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="236,260"><if ldsrc="237"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>nodeItCol</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>nodeItCol</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></r></bo></boolean><ifbk ldsrc="237,256"><documentation short="Obtengo el nombre de tipo de los items&#xD;&#xA;" /><Decls><d name="collectionTypeFunc" ldsrc="239"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="239"><e><cast><e><fc><l><bo op="m"><l><n>nodeItCol</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="collectionItemTypeName" ldsrc="240"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="240"><e><new><type typename="XplIName" /><init ldsrc="240"><list><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>collectionTypeFunc</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="collectionItemTypeNameStr" ldsrc="241"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="241"><e><bo op="m"><l><n>collectionItemTypeName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="functionForItemType" ldsrc="242"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="242"><e><new><type typename="XplIName" /><init ldsrc="242"><list><e><bo><l><lit str="Process" /></l><r><bo op="m"><l><n>collectionItemTypeName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><documentation short="Creo la funcion para el tipo de los items&#xD;&#xA;" /><e ldsrc="244"><fc><l><n>MakeFunctionForType</n></l><args><e><n>interpreterClass</n></e><e><n>collectionItemTypeName</n></e><e><fc><l><bo op="m"><l><n>collectionTypeFunc</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></args></fc></e><documentation short="Creo el código para el interprete&#xD;&#xA;" /><e ldsrc="255"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>itemsTypesIfs</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="247"><bk><if ldsrc="248"><boolean><bo op="EQ"><l><bo op="m"><l><n>itemTypeName</n></l><r><n>Identifier</n></r></bo></l><r><n>$collectionItemTypeNameStr</n></r></bo></boolean><ifbk ldsrc="248,253"><documentation short="Creo la instancia del tipo del item&#xD;&#xA;" /><Decls><d name="item" ldsrc="250"><type ispointer="true"><dt typename="$collectionItemTypeName" /><pi ref="true" /></type><i ldsrc="250"><e><fc><l><n>$functionForItemType</n></l><args><e><n>fcbk</n></e></args></fc></e></i></d></Decls><documentation short="Lo agrego a la coleccion&#xD;&#xA;" /><e ldsrc="252"><fc><l><bo op="m"><l><bo op="m"><l><n>instance</n></l><r><n>$collectionFieldName</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><n>item</n></e></args></fc></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e></args></fc></e></ifbk><else ldsrc="257"><e ldsrc="258"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="258"><list><e><lit str="Error en el modelo de coleccion en el Content Template." /></e><e><n>nodeItCol</n></e></list></init></new></e></args></fc></e></else></if></forblock></for><documentation short="Código comun&#xD;&#xA;" /><e ldsrc="278"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>collectionsIfs</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="263"><bk><if ldsrc="264"><boolean><bo op="EQ"><l><n>collectionName</n></l><r><n>$collectionName</n></r></bo></boolean><ifbk ldsrc="264,276"><e ldsrc="265"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><for ldsrc="266,266"><init><dl><d name="node2" ldsrc="266"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>fcBlock</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="266,275"><documentation short="asumo q cada nodo es una llamada a funcion de la forma:  id{ }&#xD;&#xA;" /><if ldsrc="268"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>node2</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>node2</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></r></bo></boolean><ifbk ldsrc="268,274"><Decls><d name="fc" ldsrc="269"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="269"><e><cast><e><fc><l><bo op="m"><l><n>node2</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="itemTypeName" ldsrc="270"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="270"><e><new><type typename="XplIName" /><init ldsrc="270"><list><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>fc</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="fcbk" ldsrc="271"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="271"><e><fc><l><bo op="m"><l><n>fc</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></i></d></Decls><e ldsrc="273"><n>$itemsTypesIfs</n></e></ifbk></if></forblock></for></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e></args></fc></e></ifbk><else ldsrc="281"><documentation short="Es un item &#xD;&#xA;" /><Decls><d name="simpleItemFieldName" ldsrc="283"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="283"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short="Si no es un identificador es un error&#xD;&#xA;" /><if ldsrc="285"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>simpleItemFieldName</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>simpleItemFieldName</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="285,287"><e ldsrc="286"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="286"><list><e><lit str="Se requiere un identificador en el Content Template." /></e><e><n>simpleItemFieldName</n></e></list></init></new></e></args></fc></e></ifbk><else ldsrc="288"><documentation short="Pendiente el codigo para cuando es un item solo&#xD;&#xA;" /><e ldsrc="290"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="290"><list><e><lit str="El código para un item solo no esta implementado en Content Template." /></e><e><n>simpleItemFieldName</n></e></list></init></new></e></args></fc></e></else></if></else></if></ifbk><else ldsrc="294"><documentation short="Es un item simple&#xD;&#xA;Primero proceso el tipo para el elemento&#xD;&#xA;" /></else></if></ifbk><else ldsrc="299"><documentation short=" Tipo de expresión no reconocida, será ignorada.&#xD;&#xA;" /><e ldsrc="301"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="301"><list><e><lit str="Expresion no reconocida en el Content Template." /></e><e><n>node</n></e></list></init></new></e></args></fc></e></else></if></else></if></forblock></for><documentation short="Creo la función para procesar el tipo&#xD;&#xA;" /><Decls><d name="function" ldsrc="306"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="306"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="307"><classmembers><Function name="$functionName" access="public" ldsrc="309,309"><Parameters><P name="instanceData" number="1"><type ispointer="true" ldsrc="309"><dt typename="XplFunctionBody" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$classType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="309,367"><Decls><d name="instance" ldsrc="310"><type ispointer="true"><dt typename="$classType" /><pi ref="true" /></type><i ldsrc="310"><e><new><type typename="$classType" /></new></e></i></d></Decls><Decls><d name="errorFlag" ldsrc="311"><type typename="$BOOLEAN$" /><i ldsrc="311"><e><lit str="false" type="bool" /></e></i></d></Decls><Decls><d name="errorNode" ldsrc="312"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="312"><e><lit str="0" type="null" /></e></i></d></Decls><for ldsrc="314,314"><init><dl><d name="nodeIt" ldsrc="314"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>instanceData</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="314,364"><Decls><d name="node" ldsrc="315"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="315"><e><fc><l><bo op="m"><l><n>nodeIt</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="316"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplAssing" /></r></bo></r></bo></boolean><ifbk ldsrc="316,334"><Decls><d name="assingNode" ldsrc="317"><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type><i ldsrc="317"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="leftExp" ldsrc="318"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="318"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_l</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="rightExp" ldsrc="319"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="319"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_r</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="320"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="321,324"><e ldsrc="322"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="322"><list><e><lit str="Se requiere un identificador en Instance Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="323,323"><lit str="0" type="null" /></return></ifbk></if><Decls><d name="propertyName" ldsrc="325"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="325"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><e ldsrc="326"><a><l><n>errorFlag</n></l><r><lit str="true" type="bool" /></r></a></e><e ldsrc="328"><n>$propertysIfs</n></e><if ldsrc="330"><boolean><n>errorFlag</n></boolean><ifbk ldsrc="330,333"><e ldsrc="331"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="331"><list><e><bo><l><bo><l><lit str="Propiedad " /></l><r><n>propertyName</n></r></bo></l><r><lit str=" no soportada en Instance Creator." /></r></bo></e><e><n>errorNode</n></e></list></init></new></e></args></fc></e><return ldsrc="332,332"><lit str="0" type="null" /></return></ifbk></if></ifbk><else ldsrc="335"><if ldsrc="335"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></r></bo></boolean><ifbk ldsrc="335,357"><Decls><d name="functionCall" ldsrc="336"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="336"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="fcBlock" ldsrc="337"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="337"><e><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="338"><boolean><bo op="EQ"><l><n>fcBlock</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="338,342"><documentation short=" Es un error&#xD;&#xA;" /><e ldsrc="340"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="340"><list><e><lit str="Se requiere un bloque para Instance Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="341,341"><lit str="0" type="null" /></return></ifbk></if><Decls><d name="leftNode" ldsrc="343"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="343"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="344"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>leftNode</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="344,347"><e ldsrc="345"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="345"><list><e><lit str="Se requiere un identificador en Instance Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="346,346"><lit str="0" type="null" /></return></ifbk></if><Decls><d name="collectionName" ldsrc="348"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="348"><e><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><e ldsrc="349"><a><l><n>errorFlag</n></l><r><lit str="true" type="bool" /></r></a></e><e ldsrc="351"><n>$collectionsIfs</n></e><if ldsrc="353"><boolean><n>errorFlag</n></boolean><ifbk ldsrc="353,356"><e ldsrc="354"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="354"><list><e><lit str="Coleccion no soportada en Instance Creator." /></e><e><n>errorNode</n></e></list></init></new></e></args></fc></e><return ldsrc="355,355"><lit str="0" type="null" /></return></ifbk></if></ifbk><else ldsrc="358"><documentation short=" Tipo de expresión no reconocida, será ignorada.&#xD;&#xA;" /><e ldsrc="362"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="361"><list><e><lit str="Expresion no reconocida por Instance Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e></else></if></else></if></forblock></for><return ldsrc="366,366"><n>instance</n></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><e ldsrc="371"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>interpreterClass</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>function</n></e></args></fc></e></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class><Class name="ObjectCreator" access="public" isfactory="true" ldsrc="374,485"><Function name="New" internalname="New#1" access="public" storage="static" ldsrc="376,376"><Parameters><P name="mainObjectType" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="376" /></P><P name="blockArgument" number="2"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="376" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="376,378"><return ldsrc="377,377"><fc><l><n>New</n></l><args><e><n>mainObjectType</n></e><e><lit str="false" type="bool" /></e><e><n>blockArgument</n></e></args></fc></return></FunctionBody></Function><Function name="New" internalname="New#2" access="public" storage="static" ldsrc="379,379"><Parameters><P name="mainObjectType" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="379" /></P><P name="simpleIdentifierToString" number="2"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="379" /></P><P name="blockArgument" number="3"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="379" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="379,412"><if ldsrc="380"><boolean><bo op="EQ"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="380,385"><e ldsrc="383"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="382"><list><e><lit str="No puede llamar a ObjectCreator.New fuera de una clase." /></e><e><n>context</n></e></list></init></new></e></args></fc></e><return ldsrc="384,384"><lit str="0" type="null" /></return></ifbk></if><Decls><d name="funcName" ldsrc="386"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="386"><e><new><type typename="XplIName" /></new></e></i></d></Decls><Decls><d name="funcBody" ldsrc="387"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="387"><e><new><type typename="XplFunctionBody" /></new></e></i></d></Decls><documentation short=" Proceso los elementos del bloque argumento&#xD;&#xA;" /><for ldsrc="390,390"><init><dl><d name="node" ldsrc="390"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>blockArgument</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="390,392"><e ldsrc="391"><fc><l><n>ProcessItem</n></l><args><e><n>node</n></e><e><n>funcBody</n></e><e><new><type typename="XplIName" /><init ldsrc="391"><list><e><lit str="retObj" /></e></list></init></new></e><e><lit str="0" type="null" /></e><e><lit str="0" type="null" /></e><e><n>simpleIdentifierToString</n></e></args></fc></e></forblock></for><documentation short=" Genero la función auxiliar&#xD;&#xA;" /><Decls><d name="func" ldsrc="395"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="395"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="395"><classmembers><Function name="$funcName" storage="static" ldsrc="397,397"><ReturnType ispointer="true"><dt typename="$mainObjectType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="397,403"><Decls><d name="retObj" ldsrc="398"><type ispointer="true"><dt typename="$mainObjectType" /><pi ref="true" /></type><i ldsrc="398"><e><new><type typename="$mainObjectType" /></new></e></i></d></Decls><e ldsrc="400"><n>$funcBody</n></e><return ldsrc="402,402"><n>retObj</n></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short=" Inserto la función auxiliar dentro de la clase actual&#xD;&#xA;" /><e ldsrc="408"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>func</n></e></args></fc></e><documentation short=" Retorno la llamada a funcion&#xD;&#xA;" /><return ldsrc="411,411"><writecode ldsrc="411"><e><fc><l><n>$funcName</n></l><args /></fc></e></writecode></return></FunctionBody></Function><Function name="ProcessItem" internalname="ProcessItem#3" storage="static" ldsrc="414,414"><Parameters><P name="node" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode" ldsrc="414"><dt typename="XplNode" /><pi ref="true" /></type></P><P name="body" number="2"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunctionBody" ldsrc="414"><dt typename="XplFunctionBody" /><pi ref="true" /></type></P><P name="parentObjectId" number="3"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName" ldsrc="414"><dt typename="XplIName" /><pi ref="true" /></type></P><P name="collectionIName" number="4"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName" ldsrc="414"><dt typename="XplIName" /><pi ref="true" /></type></P><P name="grandParentObjectId" number="5"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName" ldsrc="414"><dt typename="XplIName" /><pi ref="true" /></type></P><P name="simpleIdentifierToString" number="6"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="414" /></P></Parameters><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="414,484"><documentation short=" Si el nodo es nulo retorno&#xD;&#xA;" /><if ldsrc="416"><boolean><bo op="OR"><l><bo op="EQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></r></bo></boolean><ifbk><return ldsrc="416" /></ifbk></if><documentation short=" Obtengo el contenido del nodo a procesar&#xD;&#xA;" /><e ldsrc="418"><a><l><n>node</n></l><r><fc><l><bo op="m"><l><n>node</n></l><r><n>get_Content</n></r></bo></l><args /></fc></r></a></e><if ldsrc="420"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplAssing" /></r></bo></boolean><ifbk ldsrc="420,434"><Decls><d name="assingNode" ldsrc="421"><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type><i ldsrc="421"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="leftExp" ldsrc="422"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="422"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_l</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="rightExp" ldsrc="423"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="423"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_r</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="424"><boolean><n>simpleIdentifierToString</n></boolean><ifbk ldsrc="424,430"><if ldsrc="425"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></boolean><ifbk ldsrc="425,429"><Decls><d name="lit" ldsrc="426"><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type><i ldsrc="426"><e><fc><l><n>XplExpression::new_lit</n></l><args /></fc></e></i></d></Decls><e ldsrc="427"><fc><l><bo op="m"><l><n>lit</n></l><r><n>set_str</n></r></bo></l><args><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></args></fc></e><e ldsrc="428"><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>set_Content</n></r></bo></l><args><e><n>lit</n></e></args></fc></e></ifbk></if></ifbk></if><e ldsrc="433"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="432"><e><a><l><bo op="m"><l><n>$parentObjectId</n></l><r><n>$leftExp</n></r></bo></l><r><n>$rightExp</n></r></a></e></writecode></e></args></fc></e></ifbk><else ldsrc="435"><if ldsrc="435"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></boolean><ifbk ldsrc="435,477"><Decls><d name="functionCall" ldsrc="436"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="436"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="fcBlock" ldsrc="437"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="437"><e><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="438"><boolean><bo op="EQ"><l><n>fcBlock</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="438,444"><documentation short=" Es un error&#xD;&#xA;" /><e ldsrc="442"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="441"><list><e><lit str="Se requiere un bloque para Object Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="443" /></ifbk></if><Decls><d name="leftNode" ldsrc="445"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="445"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="446"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>leftNode</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="446,451"><e ldsrc="449"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="448"><list><e><lit str="Se requiere un identificador en Object Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="450" /></ifbk></if><Decls><d name="leftNodeIName" ldsrc="452"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="452"><e><new><type typename="XplIName" /></new></e></i></d></Decls><Decls><d name="fcParentIName" ldsrc="453"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="453"><e><new><type typename="XplIName" /><init ldsrc="453"><list><e><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="newCollectionIName" ldsrc="454"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="454"><e><lit str="0" type="null" /></e></i></d></Decls><if ldsrc="455"><boolean><bo op="NOTEQ"><l><n>collectionIName</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="455,462"><documentation short=" Inserto la declaración para la variable del elemento&#xD;&#xA;" /><e ldsrc="461"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="458"><bk><Decls><d name="$leftNodeIName" ldsrc="459"><type ispointer="true"><dt typename="$fcParentIName" /><pi ref="true" /></type><i ldsrc="459"><e><new><type typename="$fcParentIName" /></new></e></i></d></Decls></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e></args></fc></e></ifbk><else ldsrc="463"><e ldsrc="464"><a><l><n>newCollectionIName</n></l><r><new><type typename="XplIName" /><init ldsrc="464"><list><e><bo op="m"><l><n>fcParentIName</n></l><r><n>Identifier</n></r></bo></e></list></init></new></r></a></e></else></if><documentation short=" Proceso el bloque para elemento&#xD;&#xA;" /><for ldsrc="467,467"><init><dl><d name="nodeInFc" ldsrc="467"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>fcBlock</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="467,469"><e ldsrc="468"><fc><l><n>ProcessItem</n></l><args><e><n>nodeInFc</n></e><e><n>body</n></e><e><n>leftNodeIName</n></e><e><n>newCollectionIName</n></e><e><n>parentObjectId</n></e><e><n>simpleIdentifierToString</n></e></args></fc></e></forblock></for><if ldsrc="470"><boolean><bo op="NOTEQ"><l><n>collectionIName</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="470,475"><documentation short=" Inserto el elemento dentro de la colección padre&#xD;&#xA;" /><e ldsrc="474"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="473"><e><fc><l><bo op="m"><l><bo op="m"><l><n>$grandParentObjectId</n></l><r><n>$collectionIName</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><n>$leftNodeIName</n></e></args></fc></e></writecode></e></args></fc></e></ifbk></if></ifbk><else ldsrc="478"><documentation short=" Tipo de expresión no reconocida, será ignorada.&#xD;&#xA;" /><e ldsrc="482"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="481"><list><e><lit str="Expresion no reconocida por Object Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e></else></if></else></if></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class></Namespace><documentation short="&#xD;&#xA;Seria llamado de la forma:&#xD;&#xA;	ObjectInterpreterBuilder::New( MyInterpreter, MainTypeName ){&#xD;&#xA;		Property1 = &quot;stringValue&quot;;&#xD;&#xA;		Property2 = 120; //int value&#xD;&#xA;		Property3 = true; //bool value&#xD;&#xA;		Collection1{&#xD;&#xA;			CollectionItemType1{&#xD;&#xA;				Property1 = &quot;stringValue&quot;;&#xD;&#xA;			};&#xD;&#xA;			CollectionItemType2{&#xD;&#xA;				Property1 = 120; //int value&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;		Collection2{&#xD;&#xA;			CollectionItemType3{&#xD;&#xA;				Property1 = true; //bool value&#xD;&#xA;				Property2 = Id; //IName value&#xD;&#xA;				Property3 = 3 + &quot;hola&quot;; //Expression value&#xD;&#xA;				Collection3{&#xD;&#xA;					CollectionItemType4{&#xD;&#xA;						Property2 = &quot;stringValue&quot;;&#xD;&#xA;					};&#xD;&#xA;				};&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;	};&#xD;&#xA;&#xD;&#xA;//De forma similar no seria mejor llamarlo con un template de la forma&#xD;&#xA;	ObjectInterpreterBuilder::New( MyInterpreter, MainTypeName ){&#xD;&#xA;		Property1 = STRING;&#xD;&#xA;		Property2 = INT; //int value&#xD;&#xA;		Property3 = BOOL; //bool value&#xD;&#xA;		Collection(Collection1){ //&lt;-- &quot;Collection1&quot; es el campo utilizado en MainTypeName como coleccion&#xD;&#xA;			CollectionItemType1{ //&lt;-- &quot;CollectionItemType1&quot; es el tipo utilizado para los elementos&#xD;&#xA;				Property1 = STRING;&#xD;&#xA;			};&#xD;&#xA;			CollectionItemType2{&#xD;&#xA;				Property1 = INT; //int value&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;		SimpleItem(SimpleItemType){&#xD;&#xA;			Property1 = INT;&#xD;&#xA;			SimpleItem2(SimpleItem2Type){&#xD;&#xA;				Property2 = STRING;&#xD;&#xA;			};&#xD;&#xA;			Collection(SimpleItemCollection){&#xD;&#xA;				CollectionItemType{&#xD;&#xA;					Property2 = BOOL;&#xD;&#xA;				};&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;		Collection2{&#xD;&#xA;			CollectionItemType3{&#xD;&#xA;				Property1 = BOOL; //bool value&#xD;&#xA;				Property2 = INAME; //IName value&#xD;&#xA;				Property3 = EXPRESSION; //Expression value&#xD;&#xA;				Collection3{&#xD;&#xA;					CollectionItemType4{&#xD;&#xA;						Property2 = STRING;&#xD;&#xA;					};&#xD;&#xA;				};&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;	};&#xD;&#xA;&#xD;&#xA;//Algoritmo&#xD;&#xA;	-Comienzo con un tipo, procesando ese tipo y le paso el bloque como argumento,&#xD;&#xA;	creo una función para procesar el tipo:&#xD;&#xA;&#xD;&#xA;	MainTypeName^ ProcessMainTypeName(block instanceData){&#xD;&#xA;		MainTypeName^ instance = new MainTypeName();&#xD;&#xA;		//Itero en los nodos del bloque&#xD;&#xA;		for(XplNode^ node in instanceData.Children()){&#xD;&#xA;			if(node is XplFunction){&#xD;&#xA;				//un if en todas las colecciones q tengo&#xD;&#xA;				if(Collection1){&#xD;&#xA;					//Itero en todos los nodos del bloque&#xD;&#xA;					for(XplNode^ node2 in collectionData)&#xD;&#xA;					{&#xD;&#xA;						//si no es una llamada a funcion con bloque es un error&#xD;&#xA;						//Un if por cada tipo de elemento q puede contener la coleccion&#xD;&#xA;						if(node2 Id name == CollectionItemType1){&#xD;&#xA;							instance.Collection1.Add(&#xD;&#xA;									ProcessCollectionItemType1(data)&#xD;&#xA;								);&#xD;&#xA;						}&#xD;&#xA;						else{&#xD;&#xA;							//si no es un tipo de elemento valido es un error&#xD;&#xA;						}&#xD;&#xA;					}&#xD;&#xA;				}&#xD;&#xA;				else if(Collection2){&#xD;&#xA;				}&#xD;&#xA;				else{&#xD;&#xA;					//Error&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;			else if(node is XplAssing){&#xD;&#xA;				//un switch o if en todas las propiedades que tengo&#xD;&#xA;				if(propertyName == &quot;Property1&quot;){&#xD;&#xA;					instance.Property1 = valor;&#xD;&#xA;				}&#xD;&#xA;				else if(propertyName == &quot;Property2&quot;){&#xD;&#xA;					instance.Property2 = valor;&#xD;&#xA;				}&#xD;&#xA;				else{&#xD;&#xA;					//Error&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;			else{&#xD;&#xA;				//Error&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;		return instance;&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;	-Y creo una función para procesar cada uno de los tipos&#xD;&#xA;	void ProcessCollectionItemType1(block instanceData){&#xD;&#xA;	}			&#xD;&#xA;	&#xD;&#xA;Crea un nuevo interprete&#xD;&#xA;" /></DocumentBody></XPLDocument>