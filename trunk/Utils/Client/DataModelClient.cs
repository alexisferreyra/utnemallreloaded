/*---------------------------------------------------------------------
 This file was autogenerated.
 DO NOT MODIFY THIS FILE MANUALLY.
 Date: 13/10/2008 20:02:25.

 Generated by: DotNET LayerD Generator - ZOE Output Module to C#
 2006(R)Alexis Ferreyra.

 Please visit http://layerd.net to get last version of LayerD tools.
---------------------------------------------------------------------*/


namespace Microsoft.Tools.ServiceModel
{
	/// protected TRESPONSE^ Invoke<TREQUEST, TRESPONSE>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected void Invoke<TREQUEST>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected TRESPONSE^ Invoke<TREQUEST, TRESPONSE>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected void Invoke<TREQUEST>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected TRESPONSE^ Invoke<TREQUEST, TRESPONSE>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected void Invoke<TREQUEST>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected TRESPONSE^ Invoke<TREQUEST, TRESPONSE>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected void Invoke<TREQUEST>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected TRESPONSE^ Invoke<TREQUEST, TRESPONSE>(CFInvokeInfo^ info, TREQUEST^ request);
	/// protected void Invoke<TREQUEST>(CFInvokeInfo^ info, TREQUEST^ request);
} 

namespace System.Collections.Generic
{
} 

namespace System.Collections.ObjectModel
{
} 

namespace System.Collections.Generic
{
} 

namespace UtnEmall.Client.DataModel
{
	/// Definiciones para modelo
	/// Definiciones para Business
	/// Definiciones para SmartClient layer
	/// Seek stadistical data about services usage. Used on client and for interface
	/// between Server and Client
	/// <summary>
	/// The <c>LastSyncDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class LastSyncDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,LastSyncEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>LastSyncDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  LastSyncDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,LastSyncEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a LastSyncEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public LastSyncEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "LastSync";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((LastSyncEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			LastSyncEntity lastSync = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				lastSync = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, lastSync);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idLastSync, entityName, lastTimestamp, timestamp FROM [LastSync] WHERE idLastSync = @idLastSync";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idLastSync", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					lastSync = new LastSyncEntity();

					if (reader.Read())
					{
						// Load fields of entity
						lastSync.Id = reader.GetInt32(0);

						if (!reader.IsDBNull(1))
						{
							lastSync.EntityName = reader.GetString(1);
						}

						lastSync.LastTimestamp = reader.GetDateTime(2);
						// Add current object to the scope

						scope.Add(scopeKey, lastSync);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(lastSync.Id, lastSync);
						// Read the timestamp and set new and changed properties

						lastSync.Timestamp = reader.GetDateTime(3);
						lastSync.IsNew = false;
						lastSync.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return lastSync;
		} 

		/// <summary>
		/// Function to load a LastSyncEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public LastSyncEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a LastSyncEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public LastSyncEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a LastSyncEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public LastSyncEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idLastSync", "entityName", "lastTimestamp"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( string ), typeof( System.DateTime )};

			bool existsTable = DataAccessConnection.DBCheckedTable("LastSync");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("LastSync", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(LastSyncEntity lastSync, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@entityName", DbType.String);

			parameter.Value = lastSync.EntityName;
			if (String.IsNullOrEmpty(lastSync.EntityName))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@lastTimestamp", DbType.DateTime);

			parameter.Value = lastSync.LastTimestamp;
			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a LastSyncEntity in the database.
		/// </summary>
		/// <param name="lastSync">LastSyncEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="lastSync"/> is not a <c>LastSyncEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(LastSyncEntity lastSync)
		{
			Save(lastSync, null);
		} 

		/// <summary>
		/// Function to Save a LastSyncEntity in the database.
		/// </summary>
		/// <param name="lastSync">LastSyncEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="lastSync"/> is not a <c>LastSyncEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(LastSyncEntity lastSync, Dictionary<string,IEntity> scope)
		{
			if (lastSync == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = lastSync.Id.ToString(NumberFormatInfo.InvariantInfo) + "LastSync";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (lastSync.IsNew || !DataAccessConnection.ExistsEntity(lastSync.Id, "LastSync", "idLastSync", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [LastSync] (idLastSync, ENTITYNAME, LASTTIMESTAMP, [TIMESTAMP] ) VALUES( @idLastSync,  @entityName,@lastTimestamp, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [LastSync] SET entityName = @entityName, lastTimestamp = @lastTimestamp , timestamp=GETDATE() WHERE idLastSync = @idLastSync";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && lastSync.Id == 0)
				{
					lastSync.Id = DataAccessConnection.GetNextId("idLastSync", "LastSync", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idLastSync", DbType.Int32);
				parameter.Value = lastSync.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(lastSync, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = lastSync.Id.ToString(NumberFormatInfo.InvariantInfo) + "LastSync";
				// Add entity to current internal scope

				scope.Add(scopeKey, lastSync);
				// Save collections of related objects to current entity
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				lastSync.IsNew = false;
				lastSync.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a LastSyncEntity from database.
		/// </summary>
		/// <param name="lastSync">LastSyncEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="lastSync"/> is not a <c>LastSyncEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(LastSyncEntity lastSync)
		{
			Delete(lastSync, null);
		} 

		/// <summary>
		/// Function to Delete a LastSyncEntity from database.
		/// </summary>
		/// <param name="lastSync">LastSyncEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="lastSync"/> is not a <c>LastSyncEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(LastSyncEntity lastSync, Dictionary<string,IEntity> scope)
		{
			if (lastSync == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				lastSync = this.Load(lastSync.Id, true);
				if (lastSync == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [LastSync] WHERE idLastSync = @idLastSync";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idLastSync", DbType.Int32);
				parameterID.Value = lastSync.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				// Commit transaction if is mine
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(lastSync.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = lastSync.Id.ToString(NumberFormatInfo.InvariantInfo) + "LastSync";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idLastSync", typeof( int ));

			properties.Add("entityName", typeof( string ));
			properties.Add("lastTimestamp", typeof( System.DateTime ));
		} 

		/// <summary>
		/// Function to Load all the LastSyncEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<LastSyncEntity> LoadAll(bool loadRelation)
		{
			Collection<LastSyncEntity> lastSyncList = new Collection<LastSyncEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idLastSync FROM [LastSync]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				LastSyncEntity lastSync;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					lastSync = Load(id, loadRelation, null);
					lastSyncList.Add(lastSync);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return lastSyncList;
		} 

		/// <summary>
		/// Function to Load a LastSyncEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of LastSyncEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<LastSyncEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<LastSyncEntity> lastSyncList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idLastSync, entityName, lastTimestamp, timestamp FROM [LastSync] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				lastSyncList = new Collection<LastSyncEntity>();
				LastSyncEntity lastSync;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					lastSync = Load(id, loadRelation, null);
					lastSyncList.Add(lastSync);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return lastSyncList;
		} 

	} 
	/// <summary>
	/// The <c>CategoryDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class CategoryDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,CategoryEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>CategoryDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  CategoryDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,CategoryEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a CategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public CategoryEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "Category";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((CategoryEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			CategoryEntity category = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				category = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, category);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idCategory, description, name, idParentCategory, timestamp FROM [Category] WHERE idCategory = @idCategory";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					category = new CategoryEntity();

					if (reader.Read())
					{
						// Load fields of entity
						category.Id = reader.GetInt32(0);

						if (!reader.IsDBNull(1))
						{
							category.Description = reader.GetString(1);
						}
						if (!reader.IsDBNull(2))
						{
							category.Name = reader.GetString(2);
						}

						category.IdParentCategory = reader.GetInt32(3);
						// Add current object to the scope

						scope.Add(scopeKey, category);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(category.Id, category);
						// Read the timestamp and set new and changed properties

						category.Timestamp = reader.GetDateTime(4);
						category.IsNew = false;
						category.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
							LoadRelationChilds(category, scope);
							LoadRelationParentCategory(category, scope);
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return category;
		} 

		/// <summary>
		/// Function to load a CategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public CategoryEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a CategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public CategoryEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a CategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public CategoryEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idCategory", "description", "name", "idParentCategory"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( string ), typeof( string ), typeof( int )};

			bool existsTable = DataAccessConnection.DBCheckedTable("Category");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("Category", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(CategoryEntity category, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@description", DbType.String);

			parameter.Value = category.Description;
			if (String.IsNullOrEmpty(category.Description))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@name", DbType.String);

			parameter.Value = category.Name;
			if (String.IsNullOrEmpty(category.Name))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idParentCategory", DbType.Int32);

			parameter.Value = category.IdParentCategory;
			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a CategoryEntity in the database.
		/// </summary>
		/// <param name="category">CategoryEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="category"/> is not a <c>CategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(CategoryEntity category)
		{
			Save(category, null);
		} 

		/// <summary>
		/// Function to Save a CategoryEntity in the database.
		/// </summary>
		/// <param name="category">CategoryEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="category"/> is not a <c>CategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(CategoryEntity category, Dictionary<string,IEntity> scope)
		{
			if (category == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = category.Id.ToString(NumberFormatInfo.InvariantInfo) + "Category";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (category.IsNew || !DataAccessConnection.ExistsEntity(category.Id, "Category", "idCategory", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [Category] (idCategory, DESCRIPTION, NAME, IDPARENTCATEGORY, [TIMESTAMP] ) VALUES( @idCategory,  @description,@name,@idParentCategory, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [Category] SET description = @description, name = @name, idParentCategory = @idParentCategory , timestamp=GETDATE() WHERE idCategory = @idCategory";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && category.Id == 0)
				{
					category.Id = DataAccessConnection.GetNextId("idCategory", "Category", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);
				parameter.Value = category.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(category, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = category.Id.ToString(NumberFormatInfo.InvariantInfo) + "Category";
				// Add entity to current internal scope

				scope.Add(scopeKey, category);
				// Save collections of related objects to current entity
				if (category.Childs != null)
				{
					this.SaveCategoryCollection(new CategoryDataAccess(), category, category.Childs, category.IsNew, scope);
				}
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				category.IsNew = false;
				category.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a CategoryEntity from database.
		/// </summary>
		/// <param name="category">CategoryEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="category"/> is not a <c>CategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(CategoryEntity category)
		{
			Delete(category, null);
		} 

		/// <summary>
		/// Function to Delete a CategoryEntity from database.
		/// </summary>
		/// <param name="category">CategoryEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="category"/> is not a <c>CategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(CategoryEntity category, Dictionary<string,IEntity> scope)
		{
			if (category == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				category = this.Load(category.Id, true);
				if (category == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [Category] WHERE idCategory = @idCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);
				parameterID.Value = category.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				if (category.Childs != null)
				{
					this.DeleteCategoryCollection(new CategoryDataAccess(), category.Childs, scope);
				}
				// Commit transaction if is mine

				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(category.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = category.Id.ToString(NumberFormatInfo.InvariantInfo) + "Category";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idCategory", typeof( int ));

			properties.Add("description", typeof( string ));
			properties.Add("name", typeof( string ));
			properties.Add("idParentCategory", typeof( int ));
		} 

		/// <summary>
		/// Function to Load all the CategoryEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<CategoryEntity> LoadAll(bool loadRelation)
		{
			Collection<CategoryEntity> categoryList = new Collection<CategoryEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idCategory FROM [Category]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				CategoryEntity category;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					category = Load(id, loadRelation, null);
					categoryList.Add(category);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return categoryList;
		} 

		/// <summary>
		/// Function to Load a CategoryEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of CategoryEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<CategoryEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<CategoryEntity> categoryList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idCategory, description, name, idParentCategory, timestamp FROM [Category] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				categoryList = new Collection<CategoryEntity>();
				CategoryEntity category;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					category = Load(id, loadRelation, null);
					categoryList.Add(category);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return categoryList;
		} 

		/// <summary>
		/// Function to Load the relation Childs from database.
		/// </summary>
		/// <param name="category">CategoryEntity parent</param>
		/// <param name="scope">Internal structure to avoid problems with circular referencies</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="category"/> is not a <c>CategoryEntity</c>.
		/// </exception>
		public void LoadRelationChilds(CategoryEntity category, Dictionary<string,IEntity> scope)
		{
			if (category == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create data access object for related object
			CategoryDataAccess categoryDataAccess = new CategoryDataAccess();
			// Set connection objects to the data access

			categoryDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Load related objects

			category.Childs = categoryDataAccess.LoadByCategoryCollection(category.Id, scope);
		} 

		/// <summary>
		/// Updates the database to reflect the current state of the list.
		/// </summary>
		/// <param name="collectionDataAccess">the IDataAccess of the relation</param>
		/// <param name="parent">the parent of the object</param>
		/// <param name="collection">a collection of items</param>
		/// <param name="isNewParent">if the parent is a new object</param>
		/// <param name="scope">internal data structure to aviod problems with circular referencies on entities</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		private void SaveCategoryCollection(CategoryDataAccess collectionDataAccess, CategoryEntity parent, Collection<CategoryEntity> collection, bool isNewParent, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return;
			}
			// Set connection objects on collection data access
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Set the child/parent relation

			for (int  i = 0; i < collection.Count; i++)
			{
				bool changed = collection[i].Changed;
				collection[i].ParentCategory = parent;
				collection[i].Changed = changed;
			}
			// If the parent is new save all childs, else check diferencies with db

			if (isNewParent)
			{
				for (int  i = 0; i < collection.Count; i++)
				{
					collectionDataAccess.Save(collection[i], scope);
				}
			}
			else 
			{
				// Check the childs that are not part of the parent any more
				string idList = "0";
				if (collection.Count > 0)
				{
					idList = "" + collection[0].Id;
				}

				for (int  i = 1; i < collection.Count; i++)
				{
					idList += ", " + collection[i].Id;
				}
				// Returns the ids that doesn't exists in the current collection

				string command = "SELECT idCategory FROM [Category] WHERE idParentCategory = @idParentCategory AND idCategory NOT IN (" + idList + ")";

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(command, dbConnection, dbTransaction);

				SqlCeParameter sqlParameterId = dataAccess.GetNewDataParameter("@idParentCategory", DbType.Int32);
				sqlParameterId.Value = parent.Id;
				sqlCommand.Parameters.Add(sqlParameterId);

				IDataReader reader = sqlCommand.ExecuteReader();
				Collection<CategoryEntity> objectsToDelete = new Collection<CategoryEntity>();
				// Insert Ids on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load items to be removed

				foreach(int  id in listId)
				{
					CategoryEntity entityToDelete = collectionDataAccess.Load(id, scope);
					objectsToDelete.Add(entityToDelete);
				}
				// Have to do this because the reader must be closed before
				// deletion of entities

				for (int  i = 0; i < objectsToDelete.Count; i++)
				{
					collectionDataAccess.Delete(objectsToDelete[i], scope);
				}

				System.DateTime timestamp;
				// Check all the properties of the collection items
				// to see if they have changed (timestamp)

				for (int  i = 0; i < collection.Count; i++)
				{
					CategoryEntity item = collection[i];
					if (!item.Changed && !item.IsNew)
					{
						// Create the command
						string sql = "SELECT timestamp FROM [Category] WHERE idCategory = @idCategory";
						SqlCeCommand sqlCommandTimestamp = dataAccess.GetNewCommand(sql, dbConnection, dbTransaction);
						// Set the command's parameters values

						SqlCeParameter sqlParameterIdPreference = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);
						sqlParameterIdPreference.Value = item.Id;
						sqlCommandTimestamp.Parameters.Add(sqlParameterIdPreference);

						timestamp = ((System.DateTime)sqlCommandTimestamp.ExecuteScalar());
						if (item.Timestamp != timestamp)
						{
							item.Changed = true;
						}
					}
					// Save the item if it changed or is new

					if (item.Changed || item.IsNew)
					{
						collectionDataAccess.Save(item);
					}
				}
			}
		} 

		/// <summary>
		/// Function to Delete a list of related entities from database.
		/// </summary>
		/// <param name="collectionDataAccess">IDataAccess of the relation</param>
		/// <param name="collection">The collection of entities to delete</param>
		/// <param name="scope">Internal structure to keep safe circular referencies</param>
		/// <returns>True if collection not null</returns>
		private bool DeleteCategoryCollection(CategoryDataAccess collectionDataAccess, Collection<CategoryEntity> collection, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return false;
			}
			// Set connection objects of related data access object
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Delete related objects

			for (int  i = 0; i < collection.Count; i++)
			{
				collectionDataAccess.Delete(collection[i], scope);
			}
			return true;
		} 

		/// <summary>
		/// Function to Load a list of CategoryEntity from database by idCategory.
		/// </summary>
		/// <param name="idCategory">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of CategoryEntity</returns>
		public Collection<CategoryEntity> LoadByCategoryCollection(int idCategory, Dictionary<string,IEntity> scope)
		{
			Collection<CategoryEntity> categoryList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idCategory FROM [Category] WHERE idParentCategory = @idParentCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idParentCategory", DbType.Int32);
				parameter.Value = idCategory;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				categoryList = new Collection<CategoryEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					categoryList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return categoryList;
		} 

		/// <summary>
		/// Function to Load a list of CategoryEntity from database by idCategory.
		/// </summary>
		/// <param name="idCategory">Foreing key column</param>
		/// <returns>IList of CategoryEntity</returns>
		public Collection<CategoryEntity> LoadByCategoryCollection(int idCategory)
		{
			return LoadByCategoryCollection(idCategory, null);
		} 

		/// <summary>
		/// Function to Load the relation ParentCategory from database.
		/// </summary>
		/// <param name="category">CategoryEntity parent</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="category"/> is not a <c>CategoryEntity</c>.
		/// </exception>
		public void LoadRelationParentCategory(CategoryEntity category, Dictionary<string,IEntity> scope)
		{
			if (category == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			bool closeConnection = false;
			try 
			{
				// Create a new connection if needed
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idParentCategory FROM [Category] WHERE idCategory = @idCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);
				// Set command parameters values

				parameter.Value = category.Id;
				sqlCommand.Parameters.Add(parameter);
				// Execute commands

				object idRelation = sqlCommand.ExecuteScalar();
				if (idRelation != null && ((int)idRelation) > 0)
				{
					// Create data access objects and set connection objects
					CategoryDataAccess categoryDataAccess = new CategoryDataAccess();
					categoryDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
					// Load related object

					category.ParentCategory = categoryDataAccess.Load(((int)idRelation), true, scope);
				}
			}
			catch (DbException dbException)
			{
				// Catch and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
		} 

	} 
	/// <summary>
	/// The <c>CustomerDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class CustomerDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,CustomerEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>CustomerDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  CustomerDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,CustomerEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a CustomerEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public CustomerEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "Customer";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((CustomerEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			CustomerEntity customer = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				customer = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, customer);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idCustomer, name, surname, address, phoneNumber, userName, password, timestamp FROM [Customer] WHERE idCustomer = @idCustomer";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					customer = new CustomerEntity();

					if (reader.Read())
					{
						// Load fields of entity
						customer.Id = reader.GetInt32(0);

						if (!reader.IsDBNull(1))
						{
							customer.Name = reader.GetString(1);
						}
						if (!reader.IsDBNull(2))
						{
							customer.Surname = reader.GetString(2);
						}
						if (!reader.IsDBNull(3))
						{
							customer.Address = reader.GetString(3);
						}
						if (!reader.IsDBNull(4))
						{
							customer.PhoneNumber = reader.GetString(4);
						}
						if (!reader.IsDBNull(5))
						{
							customer.UserName = reader.GetString(5);
						}
						if (!reader.IsDBNull(6))
						{
							customer.Password = reader.GetString(6);
						}
						// Add current object to the scope

						scope.Add(scopeKey, customer);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(customer.Id, customer);
						// Read the timestamp and set new and changed properties

						customer.Timestamp = reader.GetDateTime(7);
						customer.IsNew = false;
						customer.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
							LoadRelationPreferences(customer, scope);
							LoadRelationDeviceProfile(customer, scope);
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return customer;
		} 

		/// <summary>
		/// Function to load a CustomerEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public CustomerEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a CustomerEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public CustomerEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a CustomerEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public CustomerEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idCustomer", "name", "surname", "address", "phoneNumber", "userName", "password"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( string )};

			bool existsTable = DataAccessConnection.DBCheckedTable("Customer");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("Customer", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(CustomerEntity customer, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@name", DbType.String);

			parameter.Value = customer.Name;
			if (String.IsNullOrEmpty(customer.Name))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@surname", DbType.String);

			parameter.Value = customer.Surname;
			if (String.IsNullOrEmpty(customer.Surname))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@address", DbType.String);

			parameter.Value = customer.Address;
			if (String.IsNullOrEmpty(customer.Address))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@phoneNumber", DbType.String);

			parameter.Value = customer.PhoneNumber;
			if (String.IsNullOrEmpty(customer.PhoneNumber))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@userName", DbType.String);

			parameter.Value = customer.UserName;
			if (String.IsNullOrEmpty(customer.UserName))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@password", DbType.String);

			parameter.Value = customer.Password;
			if (String.IsNullOrEmpty(customer.Password))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a CustomerEntity in the database.
		/// </summary>
		/// <param name="customer">CustomerEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customer"/> is not a <c>CustomerEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(CustomerEntity customer)
		{
			Save(customer, null);
		} 

		/// <summary>
		/// Function to Save a CustomerEntity in the database.
		/// </summary>
		/// <param name="customer">CustomerEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="customer"/> is not a <c>CustomerEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(CustomerEntity customer, Dictionary<string,IEntity> scope)
		{
			if (customer == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = customer.Id.ToString(NumberFormatInfo.InvariantInfo) + "Customer";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (customer.IsNew || !DataAccessConnection.ExistsEntity(customer.Id, "Customer", "idCustomer", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [Customer] (idCustomer, NAME, SURNAME, ADDRESS, PHONENUMBER, USERNAME, PASSWORD, [TIMESTAMP] ) VALUES( @idCustomer,  @name,@surname,@address,@phoneNumber,@userName,@password, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [Customer] SET name = @name, surname = @surname, address = @address, phoneNumber = @phoneNumber, userName = @userName, password = @password , timestamp=GETDATE() WHERE idCustomer = @idCustomer";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && customer.Id == 0)
				{
					customer.Id = DataAccessConnection.GetNextId("idCustomer", "Customer", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);
				parameter.Value = customer.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(customer, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = customer.Id.ToString(NumberFormatInfo.InvariantInfo) + "Customer";
				// Add entity to current internal scope

				scope.Add(scopeKey, customer);
				// Save collections of related objects to current entity
				if (customer.Preferences != null)
				{
					this.SavePreferenceCollection(new PreferenceDataAccess(), customer, customer.Preferences, customer.IsNew, scope);
				}
				if (customer.DeviceProfile != null)
				{
					this.SaveDeviceProfileCollection(new DeviceProfileDataAccess(), customer, customer.DeviceProfile, customer.IsNew, scope);
				}
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				customer.IsNew = false;
				customer.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a CustomerEntity from database.
		/// </summary>
		/// <param name="customer">CustomerEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="customer"/> is not a <c>CustomerEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(CustomerEntity customer)
		{
			Delete(customer, null);
		} 

		/// <summary>
		/// Function to Delete a CustomerEntity from database.
		/// </summary>
		/// <param name="customer">CustomerEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="customer"/> is not a <c>CustomerEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(CustomerEntity customer, Dictionary<string,IEntity> scope)
		{
			if (customer == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				customer = this.Load(customer.Id, true);
				if (customer == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [Customer] WHERE idCustomer = @idCustomer";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);
				parameterID.Value = customer.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				if (customer.Preferences != null)
				{
					this.DeletePreferenceCollection(new PreferenceDataAccess(), customer.Preferences, scope);
				}
				if (customer.DeviceProfile != null)
				{
					this.DeleteDeviceProfileCollection(new DeviceProfileDataAccess(), customer.DeviceProfile, scope);
				}
				// Commit transaction if is mine

				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(customer.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = customer.Id.ToString(NumberFormatInfo.InvariantInfo) + "Customer";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idCustomer", typeof( int ));

			properties.Add("name", typeof( string ));
			properties.Add("surname", typeof( string ));
			properties.Add("address", typeof( string ));
			properties.Add("phoneNumber", typeof( string ));
			properties.Add("userName", typeof( string ));
			properties.Add("password", typeof( string ));
		} 

		/// <summary>
		/// Function to Load all the CustomerEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<CustomerEntity> LoadAll(bool loadRelation)
		{
			Collection<CustomerEntity> customerList = new Collection<CustomerEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idCustomer FROM [Customer]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				CustomerEntity customer;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					customer = Load(id, loadRelation, null);
					customerList.Add(customer);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return customerList;
		} 

		/// <summary>
		/// Function to Load a CustomerEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of CustomerEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<CustomerEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<CustomerEntity> customerList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idCustomer, name, surname, address, phoneNumber, userName, password, timestamp FROM [Customer] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				customerList = new Collection<CustomerEntity>();
				CustomerEntity customer;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					customer = Load(id, loadRelation, null);
					customerList.Add(customer);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return customerList;
		} 

		/// <summary>
		/// Function to Load the relation Preferences from database.
		/// </summary>
		/// <param name="customer">CustomerEntity parent</param>
		/// <param name="scope">Internal structure to avoid problems with circular referencies</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customer"/> is not a <c>CustomerEntity</c>.
		/// </exception>
		public void LoadRelationPreferences(CustomerEntity customer, Dictionary<string,IEntity> scope)
		{
			if (customer == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create data access object for related object
			PreferenceDataAccess preferenceDataAccess = new PreferenceDataAccess();
			// Set connection objects to the data access

			preferenceDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Load related objects

			customer.Preferences = preferenceDataAccess.LoadByCustomerCollection(customer.Id, scope);
		} 

		/// <summary>
		/// Updates the database to reflect the current state of the list.
		/// </summary>
		/// <param name="collectionDataAccess">the IDataAccess of the relation</param>
		/// <param name="parent">the parent of the object</param>
		/// <param name="collection">a collection of items</param>
		/// <param name="isNewParent">if the parent is a new object</param>
		/// <param name="scope">internal data structure to aviod problems with circular referencies on entities</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		private void SavePreferenceCollection(PreferenceDataAccess collectionDataAccess, CustomerEntity parent, Collection<PreferenceEntity> collection, bool isNewParent, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return;
			}
			// Set connection objects on collection data access
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Set the child/parent relation

			for (int  i = 0; i < collection.Count; i++)
			{
				bool changed = collection[i].Changed;
				collection[i].Customer = parent;
				collection[i].Changed = changed;
			}
			// If the parent is new save all childs, else check diferencies with db

			if (isNewParent)
			{
				for (int  i = 0; i < collection.Count; i++)
				{
					collectionDataAccess.Save(collection[i], scope);
				}
			}
			else 
			{
				// Check the childs that are not part of the parent any more
				string idList = "0";
				if (collection.Count > 0)
				{
					idList = "" + collection[0].Id;
				}

				for (int  i = 1; i < collection.Count; i++)
				{
					idList += ", " + collection[i].Id;
				}
				// Returns the ids that doesn't exists in the current collection

				string command = "SELECT idPreference FROM [Preference] WHERE idCustomer = @idCustomer AND idPreference NOT IN (" + idList + ")";

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(command, dbConnection, dbTransaction);

				SqlCeParameter sqlParameterId = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);
				sqlParameterId.Value = parent.Id;
				sqlCommand.Parameters.Add(sqlParameterId);

				IDataReader reader = sqlCommand.ExecuteReader();
				Collection<PreferenceEntity> objectsToDelete = new Collection<PreferenceEntity>();
				// Insert Ids on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load items to be removed

				foreach(int  id in listId)
				{
					PreferenceEntity entityToDelete = collectionDataAccess.Load(id, scope);
					objectsToDelete.Add(entityToDelete);
				}
				// Have to do this because the reader must be closed before
				// deletion of entities

				for (int  i = 0; i < objectsToDelete.Count; i++)
				{
					collectionDataAccess.Delete(objectsToDelete[i], scope);
				}

				System.DateTime timestamp;
				// Check all the properties of the collection items
				// to see if they have changed (timestamp)

				for (int  i = 0; i < collection.Count; i++)
				{
					PreferenceEntity item = collection[i];
					if (!item.Changed && !item.IsNew)
					{
						// Create the command
						string sql = "SELECT timestamp FROM [Preference] WHERE idPreference = @idPreference";
						SqlCeCommand sqlCommandTimestamp = dataAccess.GetNewCommand(sql, dbConnection, dbTransaction);
						// Set the command's parameters values

						SqlCeParameter sqlParameterIdPreference = dataAccess.GetNewDataParameter("@idPreference", DbType.Int32);
						sqlParameterIdPreference.Value = item.Id;
						sqlCommandTimestamp.Parameters.Add(sqlParameterIdPreference);

						timestamp = ((System.DateTime)sqlCommandTimestamp.ExecuteScalar());
						if (item.Timestamp != timestamp)
						{
							item.Changed = true;
						}
					}
					// Save the item if it changed or is new

					if (item.Changed || item.IsNew)
					{
						collectionDataAccess.Save(item);
					}
				}
			}
		} 

		/// <summary>
		/// Function to Delete a list of related entities from database.
		/// </summary>
		/// <param name="collectionDataAccess">IDataAccess of the relation</param>
		/// <param name="collection">The collection of entities to delete</param>
		/// <param name="scope">Internal structure to keep safe circular referencies</param>
		/// <returns>True if collection not null</returns>
		private bool DeletePreferenceCollection(PreferenceDataAccess collectionDataAccess, Collection<PreferenceEntity> collection, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return false;
			}
			// Set connection objects of related data access object
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Delete related objects

			for (int  i = 0; i < collection.Count; i++)
			{
				collectionDataAccess.Delete(collection[i], scope);
			}
			return true;
		} 

		/// <summary>
		/// Function to Load the relation DeviceProfile from database.
		/// </summary>
		/// <param name="customer">CustomerEntity parent</param>
		/// <param name="scope">Internal structure to avoid problems with circular referencies</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customer"/> is not a <c>CustomerEntity</c>.
		/// </exception>
		public void LoadRelationDeviceProfile(CustomerEntity customer, Dictionary<string,IEntity> scope)
		{
			if (customer == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create data access object for related object
			DeviceProfileDataAccess deviceProfileDataAccess = new DeviceProfileDataAccess();
			// Set connection objects to the data access

			deviceProfileDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Load related objects

			customer.DeviceProfile = deviceProfileDataAccess.LoadByCustomerCollection(customer.Id, scope);
		} 

		/// <summary>
		/// Updates the database to reflect the current state of the list.
		/// </summary>
		/// <param name="collectionDataAccess">the IDataAccess of the relation</param>
		/// <param name="parent">the parent of the object</param>
		/// <param name="collection">a collection of items</param>
		/// <param name="isNewParent">if the parent is a new object</param>
		/// <param name="scope">internal data structure to aviod problems with circular referencies on entities</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		private void SaveDeviceProfileCollection(DeviceProfileDataAccess collectionDataAccess, CustomerEntity parent, Collection<DeviceProfileEntity> collection, bool isNewParent, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return;
			}
			// Set connection objects on collection data access
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Set the child/parent relation

			for (int  i = 0; i < collection.Count; i++)
			{
				bool changed = collection[i].Changed;
				collection[i].Customer = parent;
				collection[i].Changed = changed;
			}
			// If the parent is new save all childs, else check diferencies with db

			if (isNewParent)
			{
				for (int  i = 0; i < collection.Count; i++)
				{
					collectionDataAccess.Save(collection[i], scope);
				}
			}
			else 
			{
				// Check the childs that are not part of the parent any more
				string idList = "0";
				if (collection.Count > 0)
				{
					idList = "" + collection[0].Id;
				}

				for (int  i = 1; i < collection.Count; i++)
				{
					idList += ", " + collection[i].Id;
				}
				// Returns the ids that doesn't exists in the current collection

				string command = "SELECT idDeviceProfile FROM [DeviceProfile] WHERE idCustomer = @idCustomer AND idDeviceProfile NOT IN (" + idList + ")";

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(command, dbConnection, dbTransaction);

				SqlCeParameter sqlParameterId = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);
				sqlParameterId.Value = parent.Id;
				sqlCommand.Parameters.Add(sqlParameterId);

				IDataReader reader = sqlCommand.ExecuteReader();
				Collection<DeviceProfileEntity> objectsToDelete = new Collection<DeviceProfileEntity>();
				// Insert Ids on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load items to be removed

				foreach(int  id in listId)
				{
					DeviceProfileEntity entityToDelete = collectionDataAccess.Load(id, scope);
					objectsToDelete.Add(entityToDelete);
				}
				// Have to do this because the reader must be closed before
				// deletion of entities

				for (int  i = 0; i < objectsToDelete.Count; i++)
				{
					collectionDataAccess.Delete(objectsToDelete[i], scope);
				}

				System.DateTime timestamp;
				// Check all the properties of the collection items
				// to see if they have changed (timestamp)

				for (int  i = 0; i < collection.Count; i++)
				{
					DeviceProfileEntity item = collection[i];
					if (!item.Changed && !item.IsNew)
					{
						// Create the command
						string sql = "SELECT timestamp FROM [DeviceProfile] WHERE idDeviceProfile = @idDeviceProfile";
						SqlCeCommand sqlCommandTimestamp = dataAccess.GetNewCommand(sql, dbConnection, dbTransaction);
						// Set the command's parameters values

						SqlCeParameter sqlParameterIdPreference = dataAccess.GetNewDataParameter("@idDeviceProfile", DbType.Int32);
						sqlParameterIdPreference.Value = item.Id;
						sqlCommandTimestamp.Parameters.Add(sqlParameterIdPreference);

						timestamp = ((System.DateTime)sqlCommandTimestamp.ExecuteScalar());
						if (item.Timestamp != timestamp)
						{
							item.Changed = true;
						}
					}
					// Save the item if it changed or is new

					if (item.Changed || item.IsNew)
					{
						collectionDataAccess.Save(item);
					}
				}
			}
		} 

		/// <summary>
		/// Function to Delete a list of related entities from database.
		/// </summary>
		/// <param name="collectionDataAccess">IDataAccess of the relation</param>
		/// <param name="collection">The collection of entities to delete</param>
		/// <param name="scope">Internal structure to keep safe circular referencies</param>
		/// <returns>True if collection not null</returns>
		private bool DeleteDeviceProfileCollection(DeviceProfileDataAccess collectionDataAccess, Collection<DeviceProfileEntity> collection, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return false;
			}
			// Set connection objects of related data access object
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Delete related objects

			for (int  i = 0; i < collection.Count; i++)
			{
				collectionDataAccess.Delete(collection[i], scope);
			}
			return true;
		} 

	} 
	/// <summary>
	/// The <c>DeviceProfileDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class DeviceProfileDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,DeviceProfileEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>DeviceProfileDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  DeviceProfileDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,DeviceProfileEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a DeviceProfileEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public DeviceProfileEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "DeviceProfile";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((DeviceProfileEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			DeviceProfileEntity deviceProfile = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				deviceProfile = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, deviceProfile);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idDeviceProfile, deviceType, deviceModel, macAddress, windowsMobileVersion, idCustomer, timestamp FROM [DeviceProfile] WHERE idDeviceProfile = @idDeviceProfile";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idDeviceProfile", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					deviceProfile = new DeviceProfileEntity();

					if (reader.Read())
					{
						// Load fields of entity
						deviceProfile.Id = reader.GetInt32(0);

						if (!reader.IsDBNull(1))
						{
							deviceProfile.DeviceType = reader.GetString(1);
						}
						if (!reader.IsDBNull(2))
						{
							deviceProfile.DeviceModel = reader.GetString(2);
						}
						if (!reader.IsDBNull(3))
						{
							deviceProfile.MacAddress = reader.GetString(3);
						}
						if (!reader.IsDBNull(4))
						{
							deviceProfile.WindowsMobileVersion = reader.GetString(4);
						}

						deviceProfile.IdCustomer = reader.GetInt32(5);
						// Add current object to the scope

						scope.Add(scopeKey, deviceProfile);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(deviceProfile.Id, deviceProfile);
						// Read the timestamp and set new and changed properties

						deviceProfile.Timestamp = reader.GetDateTime(6);
						deviceProfile.IsNew = false;
						deviceProfile.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return deviceProfile;
		} 

		/// <summary>
		/// Function to load a DeviceProfileEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public DeviceProfileEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a DeviceProfileEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public DeviceProfileEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a DeviceProfileEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public DeviceProfileEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idDeviceProfile", "deviceType", "deviceModel", "macAddress", "windowsMobileVersion", "idCustomer"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( int )};

			bool existsTable = DataAccessConnection.DBCheckedTable("DeviceProfile");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("DeviceProfile", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(DeviceProfileEntity deviceProfile, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@deviceType", DbType.String);

			parameter.Value = deviceProfile.DeviceType;
			if (String.IsNullOrEmpty(deviceProfile.DeviceType))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@deviceModel", DbType.String);

			parameter.Value = deviceProfile.DeviceModel;
			if (String.IsNullOrEmpty(deviceProfile.DeviceModel))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@macAddress", DbType.String);

			parameter.Value = deviceProfile.MacAddress;
			if (String.IsNullOrEmpty(deviceProfile.MacAddress))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@windowsMobileVersion", DbType.String);

			parameter.Value = deviceProfile.WindowsMobileVersion;
			if (String.IsNullOrEmpty(deviceProfile.WindowsMobileVersion))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);

			parameter.Value = deviceProfile.IdCustomer;
			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a DeviceProfileEntity in the database.
		/// </summary>
		/// <param name="deviceProfile">DeviceProfileEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="deviceProfile"/> is not a <c>DeviceProfileEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(DeviceProfileEntity deviceProfile)
		{
			Save(deviceProfile, null);
		} 

		/// <summary>
		/// Function to Save a DeviceProfileEntity in the database.
		/// </summary>
		/// <param name="deviceProfile">DeviceProfileEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="deviceProfile"/> is not a <c>DeviceProfileEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(DeviceProfileEntity deviceProfile, Dictionary<string,IEntity> scope)
		{
			if (deviceProfile == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = deviceProfile.Id.ToString(NumberFormatInfo.InvariantInfo) + "DeviceProfile";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (deviceProfile.IsNew || !DataAccessConnection.ExistsEntity(deviceProfile.Id, "DeviceProfile", "idDeviceProfile", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [DeviceProfile] (idDeviceProfile, DEVICETYPE, DEVICEMODEL, MACADDRESS, WINDOWSMOBILEVERSION, IDCUSTOMER, [TIMESTAMP] ) VALUES( @idDeviceProfile,  @deviceType,@deviceModel,@macAddress,@windowsMobileVersion,@idCustomer, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [DeviceProfile] SET deviceType = @deviceType, deviceModel = @deviceModel, macAddress = @macAddress, windowsMobileVersion = @windowsMobileVersion, idCustomer = @idCustomer , timestamp=GETDATE() WHERE idDeviceProfile = @idDeviceProfile";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && deviceProfile.Id == 0)
				{
					deviceProfile.Id = DataAccessConnection.GetNextId("idDeviceProfile", "DeviceProfile", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idDeviceProfile", DbType.Int32);
				parameter.Value = deviceProfile.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(deviceProfile, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = deviceProfile.Id.ToString(NumberFormatInfo.InvariantInfo) + "DeviceProfile";
				// Add entity to current internal scope

				scope.Add(scopeKey, deviceProfile);
				// Save collections of related objects to current entity
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				deviceProfile.IsNew = false;
				deviceProfile.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a DeviceProfileEntity from database.
		/// </summary>
		/// <param name="deviceProfile">DeviceProfileEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="deviceProfile"/> is not a <c>DeviceProfileEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(DeviceProfileEntity deviceProfile)
		{
			Delete(deviceProfile, null);
		} 

		/// <summary>
		/// Function to Delete a DeviceProfileEntity from database.
		/// </summary>
		/// <param name="deviceProfile">DeviceProfileEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="deviceProfile"/> is not a <c>DeviceProfileEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(DeviceProfileEntity deviceProfile, Dictionary<string,IEntity> scope)
		{
			if (deviceProfile == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				deviceProfile = this.Load(deviceProfile.Id, true);
				if (deviceProfile == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [DeviceProfile] WHERE idDeviceProfile = @idDeviceProfile";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idDeviceProfile", DbType.Int32);
				parameterID.Value = deviceProfile.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				// Commit transaction if is mine
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(deviceProfile.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = deviceProfile.Id.ToString(NumberFormatInfo.InvariantInfo) + "DeviceProfile";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idDeviceProfile", typeof( int ));

			properties.Add("deviceType", typeof( string ));
			properties.Add("deviceModel", typeof( string ));
			properties.Add("macAddress", typeof( string ));
			properties.Add("windowsMobileVersion", typeof( string ));
			properties.Add("idCustomer", typeof( int ));
		} 

		/// <summary>
		/// Function to Load all the DeviceProfileEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<DeviceProfileEntity> LoadAll(bool loadRelation)
		{
			Collection<DeviceProfileEntity> deviceProfileList = new Collection<DeviceProfileEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idDeviceProfile FROM [DeviceProfile]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				DeviceProfileEntity deviceProfile;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					deviceProfile = Load(id, loadRelation, null);
					deviceProfileList.Add(deviceProfile);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return deviceProfileList;
		} 

		/// <summary>
		/// Function to Load a DeviceProfileEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of DeviceProfileEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<DeviceProfileEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<DeviceProfileEntity> deviceProfileList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idDeviceProfile, deviceType, deviceModel, macAddress, windowsMobileVersion, idCustomer, timestamp FROM [DeviceProfile] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				deviceProfileList = new Collection<DeviceProfileEntity>();
				DeviceProfileEntity deviceProfile;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					deviceProfile = Load(id, loadRelation, null);
					deviceProfileList.Add(deviceProfile);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return deviceProfileList;
		} 

		/// <summary>
		/// Function to Load a list of DeviceProfileEntity from database by idCustomer.
		/// </summary>
		/// <param name="idCustomer">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of DeviceProfileEntity</returns>
		public Collection<DeviceProfileEntity> LoadByCustomerCollection(int idCustomer, Dictionary<string,IEntity> scope)
		{
			Collection<DeviceProfileEntity> deviceProfileList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idDeviceProfile FROM [DeviceProfile] WHERE idCustomer = @idCustomer";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);
				parameter.Value = idCustomer;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				deviceProfileList = new Collection<DeviceProfileEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					deviceProfileList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return deviceProfileList;
		} 

		/// <summary>
		/// Function to Load a list of DeviceProfileEntity from database by idCustomer.
		/// </summary>
		/// <param name="idCustomer">Foreing key column</param>
		/// <returns>IList of DeviceProfileEntity</returns>
		public Collection<DeviceProfileEntity> LoadByCustomerCollection(int idCustomer)
		{
			return LoadByCustomerCollection(idCustomer, null);
		} 

	} 
	/// <summary>
	/// The <c>PreferenceDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class PreferenceDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,PreferenceEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>PreferenceDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  PreferenceDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,PreferenceEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a PreferenceEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public PreferenceEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "Preference";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((PreferenceEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			PreferenceEntity preference = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				preference = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, preference);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idPreference, active, level, idCustomer, idCategory, timestamp FROM [Preference] WHERE idPreference = @idPreference";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idPreference", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					preference = new PreferenceEntity();

					if (reader.Read())
					{
						// Load fields of entity
						preference.Id = reader.GetInt32(0);

						preference.Active = reader.GetBoolean(1);
						preference.Level = Convert.ToDouble(reader.GetDecimal(2));
						preference.IdCustomer = reader.GetInt32(3);
						preference.IdCategory = reader.GetInt32(4);
						// Add current object to the scope

						scope.Add(scopeKey, preference);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(preference.Id, preference);
						// Read the timestamp and set new and changed properties

						preference.Timestamp = reader.GetDateTime(5);
						preference.IsNew = false;
						preference.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
							LoadRelationCategory(preference, scope);
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return preference;
		} 

		/// <summary>
		/// Function to load a PreferenceEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public PreferenceEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a PreferenceEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public PreferenceEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a PreferenceEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public PreferenceEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idPreference", "active", "level", "idCustomer", "idCategory"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( bool ), typeof( double ), typeof( int ), typeof( int )};

			bool existsTable = DataAccessConnection.DBCheckedTable("Preference");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("Preference", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(PreferenceEntity preference, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@active", DbType.Boolean);

			parameter.Value = preference.Active;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@level", DbType.Decimal);

			parameter.Value = preference.Level;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);

			parameter.Value = preference.IdCustomer;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);

			parameter.Value = preference.IdCategory;
			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a PreferenceEntity in the database.
		/// </summary>
		/// <param name="preference">PreferenceEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="preference"/> is not a <c>PreferenceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(PreferenceEntity preference)
		{
			Save(preference, null);
		} 

		/// <summary>
		/// Function to Save a PreferenceEntity in the database.
		/// </summary>
		/// <param name="preference">PreferenceEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="preference"/> is not a <c>PreferenceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(PreferenceEntity preference, Dictionary<string,IEntity> scope)
		{
			if (preference == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = preference.Id.ToString(NumberFormatInfo.InvariantInfo) + "Preference";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (preference.IsNew || !DataAccessConnection.ExistsEntity(preference.Id, "Preference", "idPreference", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [Preference] (idPreference, ACTIVE, LEVEL, IDCUSTOMER, IDCATEGORY, [TIMESTAMP] ) VALUES( @idPreference,  @active,@level,@idCustomer,@idCategory, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [Preference] SET active = @active, level = @level, idCustomer = @idCustomer, idCategory = @idCategory , timestamp=GETDATE() WHERE idPreference = @idPreference";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && preference.Id == 0)
				{
					preference.Id = DataAccessConnection.GetNextId("idPreference", "Preference", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idPreference", DbType.Int32);
				parameter.Value = preference.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(preference, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = preference.Id.ToString(NumberFormatInfo.InvariantInfo) + "Preference";
				// Add entity to current internal scope

				scope.Add(scopeKey, preference);
				// Save collections of related objects to current entity
				// Save objects related to current entity
				if (preference.Category != null)
				{
					CategoryDataAccess categoryDataAccess = new CategoryDataAccess();
					categoryDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
					categoryDataAccess.Save(preference.Category, scope);
				}
				// Update
				Update(preference);
				// Close transaction if initiated by me

				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				preference.IsNew = false;
				preference.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a PreferenceEntity from database.
		/// </summary>
		/// <param name="preference">PreferenceEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="preference"/> is not a <c>PreferenceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(PreferenceEntity preference)
		{
			Delete(preference, null);
		} 

		/// <summary>
		/// Function to Delete a PreferenceEntity from database.
		/// </summary>
		/// <param name="preference">PreferenceEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="preference"/> is not a <c>PreferenceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(PreferenceEntity preference, Dictionary<string,IEntity> scope)
		{
			if (preference == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				preference = this.Load(preference.Id, true);
				if (preference == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [Preference] WHERE idPreference = @idPreference";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idPreference", DbType.Int32);
				parameterID.Value = preference.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				// Commit transaction if is mine
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(preference.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = preference.Id.ToString(NumberFormatInfo.InvariantInfo) + "Preference";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idPreference", typeof( int ));

			properties.Add("active", typeof( bool ));
			properties.Add("level", typeof( double ));
			properties.Add("idCustomer", typeof( int ));
			properties.Add("idCategory", typeof( int ));
		} 

		/// <summary>
		/// Function to Load all the PreferenceEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<PreferenceEntity> LoadAll(bool loadRelation)
		{
			Collection<PreferenceEntity> preferenceList = new Collection<PreferenceEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idPreference FROM [Preference]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				PreferenceEntity preference;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					preference = Load(id, loadRelation, null);
					preferenceList.Add(preference);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return preferenceList;
		} 

		/// <summary>
		/// Function to Load a PreferenceEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of PreferenceEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<PreferenceEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<PreferenceEntity> preferenceList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idPreference, active, level, idCustomer, idCategory, timestamp FROM [Preference] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				preferenceList = new Collection<PreferenceEntity>();
				PreferenceEntity preference;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					preference = Load(id, loadRelation, null);
					preferenceList.Add(preference);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return preferenceList;
		} 

		/// <summary>
		/// Function to Load a list of PreferenceEntity from database by idCustomer.
		/// </summary>
		/// <param name="idCustomer">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of PreferenceEntity</returns>
		public Collection<PreferenceEntity> LoadByCustomerCollection(int idCustomer, Dictionary<string,IEntity> scope)
		{
			Collection<PreferenceEntity> preferenceList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idPreference FROM [Preference] WHERE idCustomer = @idCustomer";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);
				parameter.Value = idCustomer;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				preferenceList = new Collection<PreferenceEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					preferenceList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return preferenceList;
		} 

		/// <summary>
		/// Function to Load a list of PreferenceEntity from database by idCustomer.
		/// </summary>
		/// <param name="idCustomer">Foreing key column</param>
		/// <returns>IList of PreferenceEntity</returns>
		public Collection<PreferenceEntity> LoadByCustomerCollection(int idCustomer)
		{
			return LoadByCustomerCollection(idCustomer, null);
		} 

		/// <summary>
		/// Function to Load a list of PreferenceEntity from database by idCategory.
		/// </summary>
		/// <param name="idCategory">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of PreferenceEntity</returns>
		public Collection<PreferenceEntity> LoadByCategoryCollection(int idCategory, Dictionary<string,IEntity> scope)
		{
			Collection<PreferenceEntity> preferenceList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idPreference FROM [Preference] WHERE idCategory = @idCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);
				parameter.Value = idCategory;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				preferenceList = new Collection<PreferenceEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					preferenceList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return preferenceList;
		} 

		/// <summary>
		/// Function to Load a list of PreferenceEntity from database by idCategory.
		/// </summary>
		/// <param name="idCategory">Foreing key column</param>
		/// <returns>IList of PreferenceEntity</returns>
		public Collection<PreferenceEntity> LoadByCategoryCollection(int idCategory)
		{
			return LoadByCategoryCollection(idCategory, null);
		} 

		/// <summary>
		/// Function to Load the relation Category from database.
		/// </summary>
		/// <param name="preference">PreferenceEntity parent</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="preference"/> is not a <c>PreferenceEntity</c>.
		/// </exception>
		public void LoadRelationCategory(PreferenceEntity preference, Dictionary<string,IEntity> scope)
		{
			if (preference == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			bool closeConnection = false;
			try 
			{
				// Create a new connection if needed
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idCategory FROM [Preference] WHERE idPreference = @idPreference";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idPreference", DbType.Int32);
				// Set command parameters values

				parameter.Value = preference.Id;
				sqlCommand.Parameters.Add(parameter);
				// Execute commands

				object idRelation = sqlCommand.ExecuteScalar();
				if (idRelation != null && ((int)idRelation) > 0)
				{
					// Create data access objects and set connection objects
					CategoryDataAccess categoryDataAccess = new CategoryDataAccess();
					categoryDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
					// Load related object

					preference.Category = categoryDataAccess.Load(((int)idRelation), true, scope);
				}
			}
			catch (DbException dbException)
			{
				// Catch and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
		} 

		/// <summary>
		/// Function to Update a PreferenceEntity from database.
		/// </summary>
		/// <param name="preference">PreferenceEntity to update</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="preference"/> is not a <c>PreferenceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		private void Update(PreferenceEntity preference)
		{
			if (preference == null)
			{
				throw new ArgumentException("The argument can't be null", "preference");
			}
			// Build update command
			string commandName = "UPDATE [Preference] SET active = @active, level = @level, idCustomer = @idCustomer, idCategory = @idCategory , timestamp=GETDATE() WHERE idPreference = @idPreference";
			SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
			// Set update parameters values
			SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idPreference", DbType.Int32);
			parameter.Value = preference.Id;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@active", DbType.Boolean);

			parameter.Value = preference.Active;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@level", DbType.Decimal);

			parameter.Value = preference.Level;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idCustomer", DbType.Int32);

			parameter.Value = preference.IdCustomer;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);

			parameter.Value = preference.IdCategory;
			sqlCommand.Parameters.Add(parameter);
			// Execute the update

			sqlCommand.ExecuteNonQuery();
			// Update new and changed flags

			preference.IsNew = false;
			preference.Changed = false;
		} 

	} 
	/// <summary>
	/// The <c>ServiceDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class ServiceDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,ServiceEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>ServiceDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  ServiceDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,ServiceEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a ServiceEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public ServiceEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "Service";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((ServiceEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			ServiceEntity service = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				service = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, service);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idService, name, description, webAccess, relativePathAssembly, pathAssemblyServer, active, global, image, website, deployed, updated, idStore, startDate, stopDate, timestamp FROM [Service] WHERE idService = @idService";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idService", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					service = new ServiceEntity();

					if (reader.Read())
					{
						// Load fields of entity
						service.Id = reader.GetInt32(0);

						if (!reader.IsDBNull(1))
						{
							service.Name = reader.GetString(1);
						}
						if (!reader.IsDBNull(2))
						{
							service.Description = reader.GetString(2);
						}
						if (!reader.IsDBNull(3))
						{
							service.WebAccess = reader.GetString(3);
						}
						if (!reader.IsDBNull(4))
						{
							service.RelativePathAssembly = reader.GetString(4);
						}
						if (!reader.IsDBNull(5))
						{
							service.PathAssemblyServer = reader.GetString(5);
						}

						service.Active = reader.GetBoolean(6);
						service.Global = reader.GetBoolean(7);
						if (!reader.IsDBNull(8))
						{
							service.Image = reader.GetString(8);
						}
						if (!reader.IsDBNull(9))
						{
							service.Website = reader.GetString(9);
						}

						service.Deployed = reader.GetBoolean(10);
						service.Updated = reader.GetBoolean(11);
						service.IdStore = reader.GetInt32(12);
						service.StartDate = reader.GetDateTime(13);
						service.StopDate = reader.GetDateTime(14);
						// Add current object to the scope

						scope.Add(scopeKey, service);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(service.Id, service);
						// Read the timestamp and set new and changed properties

						service.Timestamp = reader.GetDateTime(15);
						service.IsNew = false;
						service.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
							LoadRelationServiceCategory(service, scope);
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return service;
		} 

		/// <summary>
		/// Function to load a ServiceEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public ServiceEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a ServiceEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public ServiceEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a ServiceEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public ServiceEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idService", "name", "description", "webAccess", "relativePathAssembly", "pathAssemblyServer", "active", "global", "image", "website", "deployed", "updated", "idStore", "startDate", "stopDate"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( bool ), typeof( bool ), typeof( string ), typeof( string ), typeof( bool ), typeof( bool ), typeof( int ), typeof( System.DateTime ), typeof( System.DateTime )};

			bool existsTable = DataAccessConnection.DBCheckedTable("Service");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("Service", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(ServiceEntity service, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@name", DbType.String);

			parameter.Value = service.Name;
			if (String.IsNullOrEmpty(service.Name))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@description", DbType.String);

			parameter.Value = service.Description;
			if (String.IsNullOrEmpty(service.Description))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@webAccess", DbType.String);

			parameter.Value = service.WebAccess;
			if (String.IsNullOrEmpty(service.WebAccess))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@relativePathAssembly", DbType.String);

			parameter.Value = service.RelativePathAssembly;
			if (String.IsNullOrEmpty(service.RelativePathAssembly))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@pathAssemblyServer", DbType.String);

			parameter.Value = service.PathAssemblyServer;
			if (String.IsNullOrEmpty(service.PathAssemblyServer))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@active", DbType.Boolean);

			parameter.Value = service.Active;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@global", DbType.Boolean);

			parameter.Value = service.Global;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@image", DbType.String);

			parameter.Value = service.Image;
			if (String.IsNullOrEmpty(service.Image))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@website", DbType.String);

			parameter.Value = service.Website;
			if (String.IsNullOrEmpty(service.Website))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@deployed", DbType.Boolean);

			parameter.Value = service.Deployed;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@updated", DbType.Boolean);

			parameter.Value = service.Updated;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idStore", DbType.Int32);

			parameter.Value = service.IdStore;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@startDate", DbType.DateTime);

			parameter.Value = service.StartDate;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@stopDate", DbType.DateTime);

			parameter.Value = service.StopDate;
			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a ServiceEntity in the database.
		/// </summary>
		/// <param name="service">ServiceEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="service"/> is not a <c>ServiceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(ServiceEntity service)
		{
			Save(service, null);
		} 

		/// <summary>
		/// Function to Save a ServiceEntity in the database.
		/// </summary>
		/// <param name="service">ServiceEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="service"/> is not a <c>ServiceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(ServiceEntity service, Dictionary<string,IEntity> scope)
		{
			if (service == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = service.Id.ToString(NumberFormatInfo.InvariantInfo) + "Service";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (service.IsNew || !DataAccessConnection.ExistsEntity(service.Id, "Service", "idService", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [Service] (idService, NAME, DESCRIPTION, WEBACCESS, RELATIVEPATHASSEMBLY, PATHASSEMBLYSERVER, ACTIVE, GLOBAL, IMAGE, WEBSITE, DEPLOYED, UPDATED, IDSTORE, STARTDATE, STOPDATE, [TIMESTAMP] ) VALUES( @idService,  @name,@description,@webAccess,@relativePathAssembly,@pathAssemblyServer,@active,@global,@image,@website,@deployed,@updated,@idStore,@startDate,@stopDate, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [Service] SET name = @name, description = @description, webAccess = @webAccess, relativePathAssembly = @relativePathAssembly, pathAssemblyServer = @pathAssemblyServer, active = @active, global = @global, image = @image, website = @website, deployed = @deployed, updated = @updated, idStore = @idStore, startDate = @startDate, stopDate = @stopDate , timestamp=GETDATE() WHERE idService = @idService";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && service.Id == 0)
				{
					service.Id = DataAccessConnection.GetNextId("idService", "Service", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idService", DbType.Int32);
				parameter.Value = service.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(service, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = service.Id.ToString(NumberFormatInfo.InvariantInfo) + "Service";
				// Add entity to current internal scope

				scope.Add(scopeKey, service);
				// Save collections of related objects to current entity
				if (service.ServiceCategory != null)
				{
					this.SaveServiceCategoryCollection(new ServiceCategoryDataAccess(), service, service.ServiceCategory, service.IsNew, scope);
				}
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				service.IsNew = false;
				service.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a ServiceEntity from database.
		/// </summary>
		/// <param name="service">ServiceEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="service"/> is not a <c>ServiceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(ServiceEntity service)
		{
			Delete(service, null);
		} 

		/// <summary>
		/// Function to Delete a ServiceEntity from database.
		/// </summary>
		/// <param name="service">ServiceEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="service"/> is not a <c>ServiceEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(ServiceEntity service, Dictionary<string,IEntity> scope)
		{
			if (service == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				service = this.Load(service.Id, true);
				if (service == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [Service] WHERE idService = @idService";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idService", DbType.Int32);
				parameterID.Value = service.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				if (service.ServiceCategory != null)
				{
					this.DeleteServiceCategoryCollection(new ServiceCategoryDataAccess(), service.ServiceCategory, scope);
				}
				// Commit transaction if is mine

				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(service.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = service.Id.ToString(NumberFormatInfo.InvariantInfo) + "Service";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idService", typeof( int ));

			properties.Add("name", typeof( string ));
			properties.Add("description", typeof( string ));
			properties.Add("webAccess", typeof( string ));
			properties.Add("relativePathAssembly", typeof( string ));
			properties.Add("pathAssemblyServer", typeof( string ));
			properties.Add("active", typeof( bool ));
			properties.Add("global", typeof( bool ));
			properties.Add("image", typeof( string ));
			properties.Add("website", typeof( string ));
			properties.Add("deployed", typeof( bool ));
			properties.Add("updated", typeof( bool ));
			properties.Add("idStore", typeof( int ));
			properties.Add("startDate", typeof( System.DateTime ));
			properties.Add("stopDate", typeof( System.DateTime ));
		} 

		/// <summary>
		/// Function to Load all the ServiceEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<ServiceEntity> LoadAll(bool loadRelation)
		{
			Collection<ServiceEntity> serviceList = new Collection<ServiceEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idService FROM [Service]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				ServiceEntity service;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					service = Load(id, loadRelation, null);
					serviceList.Add(service);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return serviceList;
		} 

		/// <summary>
		/// Function to Load a ServiceEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of ServiceEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<ServiceEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<ServiceEntity> serviceList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idService, name, description, webAccess, relativePathAssembly, pathAssemblyServer, active, global, image, website, deployed, updated, idStore, startDate, stopDate, timestamp FROM [Service] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				serviceList = new Collection<ServiceEntity>();
				ServiceEntity service;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					service = Load(id, loadRelation, null);
					serviceList.Add(service);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return serviceList;
		} 

		/// <summary>
		/// Function to Load the relation ServiceCategory from database.
		/// </summary>
		/// <param name="service">ServiceEntity parent</param>
		/// <param name="scope">Internal structure to avoid problems with circular referencies</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="service"/> is not a <c>ServiceEntity</c>.
		/// </exception>
		public void LoadRelationServiceCategory(ServiceEntity service, Dictionary<string,IEntity> scope)
		{
			if (service == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create data access object for related object
			ServiceCategoryDataAccess serviceCategoryDataAccess = new ServiceCategoryDataAccess();
			// Set connection objects to the data access

			serviceCategoryDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Load related objects

			service.ServiceCategory = serviceCategoryDataAccess.LoadByServiceCollection(service.Id, scope);
		} 

		/// <summary>
		/// Updates the database to reflect the current state of the list.
		/// </summary>
		/// <param name="collectionDataAccess">the IDataAccess of the relation</param>
		/// <param name="parent">the parent of the object</param>
		/// <param name="collection">a collection of items</param>
		/// <param name="isNewParent">if the parent is a new object</param>
		/// <param name="scope">internal data structure to aviod problems with circular referencies on entities</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		private void SaveServiceCategoryCollection(ServiceCategoryDataAccess collectionDataAccess, ServiceEntity parent, Collection<ServiceCategoryEntity> collection, bool isNewParent, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return;
			}
			// Set connection objects on collection data access
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Set the child/parent relation

			for (int  i = 0; i < collection.Count; i++)
			{
				bool changed = collection[i].Changed;
				collection[i].Service = parent;
				collection[i].Changed = changed;
			}
			// If the parent is new save all childs, else check diferencies with db

			if (isNewParent)
			{
				for (int  i = 0; i < collection.Count; i++)
				{
					collectionDataAccess.Save(collection[i], scope);
				}
			}
			else 
			{
				// Check the childs that are not part of the parent any more
				string idList = "0";
				if (collection.Count > 0)
				{
					idList = "" + collection[0].Id;
				}

				for (int  i = 1; i < collection.Count; i++)
				{
					idList += ", " + collection[i].Id;
				}
				// Returns the ids that doesn't exists in the current collection

				string command = "SELECT idServiceCategory FROM [ServiceCategory] WHERE idService = @idService AND idServiceCategory NOT IN (" + idList + ")";

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(command, dbConnection, dbTransaction);

				SqlCeParameter sqlParameterId = dataAccess.GetNewDataParameter("@idService", DbType.Int32);
				sqlParameterId.Value = parent.Id;
				sqlCommand.Parameters.Add(sqlParameterId);

				IDataReader reader = sqlCommand.ExecuteReader();
				Collection<ServiceCategoryEntity> objectsToDelete = new Collection<ServiceCategoryEntity>();
				// Insert Ids on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load items to be removed

				foreach(int  id in listId)
				{
					ServiceCategoryEntity entityToDelete = collectionDataAccess.Load(id, scope);
					objectsToDelete.Add(entityToDelete);
				}
				// Have to do this because the reader must be closed before
				// deletion of entities

				for (int  i = 0; i < objectsToDelete.Count; i++)
				{
					collectionDataAccess.Delete(objectsToDelete[i], scope);
				}

				System.DateTime timestamp;
				// Check all the properties of the collection items
				// to see if they have changed (timestamp)

				for (int  i = 0; i < collection.Count; i++)
				{
					ServiceCategoryEntity item = collection[i];
					if (!item.Changed && !item.IsNew)
					{
						// Create the command
						string sql = "SELECT timestamp FROM [ServiceCategory] WHERE idServiceCategory = @idServiceCategory";
						SqlCeCommand sqlCommandTimestamp = dataAccess.GetNewCommand(sql, dbConnection, dbTransaction);
						// Set the command's parameters values

						SqlCeParameter sqlParameterIdPreference = dataAccess.GetNewDataParameter("@idServiceCategory", DbType.Int32);
						sqlParameterIdPreference.Value = item.Id;
						sqlCommandTimestamp.Parameters.Add(sqlParameterIdPreference);

						timestamp = ((System.DateTime)sqlCommandTimestamp.ExecuteScalar());
						if (item.Timestamp != timestamp)
						{
							item.Changed = true;
						}
					}
					// Save the item if it changed or is new

					if (item.Changed || item.IsNew)
					{
						collectionDataAccess.Save(item);
					}
				}
			}
		} 

		/// <summary>
		/// Function to Delete a list of related entities from database.
		/// </summary>
		/// <param name="collectionDataAccess">IDataAccess of the relation</param>
		/// <param name="collection">The collection of entities to delete</param>
		/// <param name="scope">Internal structure to keep safe circular referencies</param>
		/// <returns>True if collection not null</returns>
		private bool DeleteServiceCategoryCollection(ServiceCategoryDataAccess collectionDataAccess, Collection<ServiceCategoryEntity> collection, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return false;
			}
			// Set connection objects of related data access object
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Delete related objects

			for (int  i = 0; i < collection.Count; i++)
			{
				collectionDataAccess.Delete(collection[i], scope);
			}
			return true;
		} 

		/// <summary>
		/// Function to Load a list of ServiceEntity from database by idStore.
		/// </summary>
		/// <param name="idStore">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of ServiceEntity</returns>
		public Collection<ServiceEntity> LoadByStoreCollection(int idStore, Dictionary<string,IEntity> scope)
		{
			Collection<ServiceEntity> serviceList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idService FROM [Service] WHERE idStore = @idStore";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idStore", DbType.Int32);
				parameter.Value = idStore;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				serviceList = new Collection<ServiceEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					serviceList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return serviceList;
		} 

		/// <summary>
		/// Function to Load a list of ServiceEntity from database by idStore.
		/// </summary>
		/// <param name="idStore">Foreing key column</param>
		/// <returns>IList of ServiceEntity</returns>
		public Collection<ServiceEntity> LoadByStoreCollection(int idStore)
		{
			return LoadByStoreCollection(idStore, null);
		} 

	} 
	/// <summary>
	/// The <c>ServiceCategoryDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class ServiceCategoryDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,ServiceCategoryEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>ServiceCategoryDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  ServiceCategoryDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,ServiceCategoryEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a ServiceCategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public ServiceCategoryEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "ServiceCategory";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((ServiceCategoryEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			ServiceCategoryEntity serviceCategory = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				serviceCategory = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, serviceCategory);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idServiceCategory, idService, idCategory, timestamp FROM [ServiceCategory] WHERE idServiceCategory = @idServiceCategory";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idServiceCategory", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					serviceCategory = new ServiceCategoryEntity();

					if (reader.Read())
					{
						// Load fields of entity
						serviceCategory.Id = reader.GetInt32(0);

						serviceCategory.IdService = reader.GetInt32(1);
						serviceCategory.IdCategory = reader.GetInt32(2);
						// Add current object to the scope

						scope.Add(scopeKey, serviceCategory);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(serviceCategory.Id, serviceCategory);
						// Read the timestamp and set new and changed properties

						serviceCategory.Timestamp = reader.GetDateTime(3);
						serviceCategory.IsNew = false;
						serviceCategory.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
							LoadRelationCategory(serviceCategory, scope);
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return serviceCategory;
		} 

		/// <summary>
		/// Function to load a ServiceCategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public ServiceCategoryEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a ServiceCategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public ServiceCategoryEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a ServiceCategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public ServiceCategoryEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idServiceCategory", "idService", "idCategory"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( int ), typeof( int )};

			bool existsTable = DataAccessConnection.DBCheckedTable("ServiceCategory");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("ServiceCategory", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(ServiceCategoryEntity serviceCategory, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@idService", DbType.Int32);

			parameter.Value = serviceCategory.IdService;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);

			parameter.Value = serviceCategory.IdCategory;
			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a ServiceCategoryEntity in the database.
		/// </summary>
		/// <param name="serviceCategory">ServiceCategoryEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceCategory"/> is not a <c>ServiceCategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(ServiceCategoryEntity serviceCategory)
		{
			Save(serviceCategory, null);
		} 

		/// <summary>
		/// Function to Save a ServiceCategoryEntity in the database.
		/// </summary>
		/// <param name="serviceCategory">ServiceCategoryEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="serviceCategory"/> is not a <c>ServiceCategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(ServiceCategoryEntity serviceCategory, Dictionary<string,IEntity> scope)
		{
			if (serviceCategory == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = serviceCategory.Id.ToString(NumberFormatInfo.InvariantInfo) + "ServiceCategory";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (serviceCategory.IsNew || !DataAccessConnection.ExistsEntity(serviceCategory.Id, "ServiceCategory", "idServiceCategory", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [ServiceCategory] (idServiceCategory, IDSERVICE, IDCATEGORY, [TIMESTAMP] ) VALUES( @idServiceCategory,  @idService,@idCategory, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [ServiceCategory] SET idService = @idService, idCategory = @idCategory , timestamp=GETDATE() WHERE idServiceCategory = @idServiceCategory";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && serviceCategory.Id == 0)
				{
					serviceCategory.Id = DataAccessConnection.GetNextId("idServiceCategory", "ServiceCategory", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idServiceCategory", DbType.Int32);
				parameter.Value = serviceCategory.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(serviceCategory, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = serviceCategory.Id.ToString(NumberFormatInfo.InvariantInfo) + "ServiceCategory";
				// Add entity to current internal scope

				scope.Add(scopeKey, serviceCategory);
				// Save collections of related objects to current entity
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				serviceCategory.IsNew = false;
				serviceCategory.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a ServiceCategoryEntity from database.
		/// </summary>
		/// <param name="serviceCategory">ServiceCategoryEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="serviceCategory"/> is not a <c>ServiceCategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(ServiceCategoryEntity serviceCategory)
		{
			Delete(serviceCategory, null);
		} 

		/// <summary>
		/// Function to Delete a ServiceCategoryEntity from database.
		/// </summary>
		/// <param name="serviceCategory">ServiceCategoryEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="serviceCategory"/> is not a <c>ServiceCategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(ServiceCategoryEntity serviceCategory, Dictionary<string,IEntity> scope)
		{
			if (serviceCategory == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				serviceCategory = this.Load(serviceCategory.Id, true);
				if (serviceCategory == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [ServiceCategory] WHERE idServiceCategory = @idServiceCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idServiceCategory", DbType.Int32);
				parameterID.Value = serviceCategory.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				// Commit transaction if is mine
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(serviceCategory.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = serviceCategory.Id.ToString(NumberFormatInfo.InvariantInfo) + "ServiceCategory";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idServiceCategory", typeof( int ));

			properties.Add("idService", typeof( int ));
			properties.Add("idCategory", typeof( int ));
		} 

		/// <summary>
		/// Function to Load all the ServiceCategoryEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<ServiceCategoryEntity> LoadAll(bool loadRelation)
		{
			Collection<ServiceCategoryEntity> serviceCategoryList = new Collection<ServiceCategoryEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idServiceCategory FROM [ServiceCategory]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				ServiceCategoryEntity serviceCategory;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					serviceCategory = Load(id, loadRelation, null);
					serviceCategoryList.Add(serviceCategory);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return serviceCategoryList;
		} 

		/// <summary>
		/// Function to Load a ServiceCategoryEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of ServiceCategoryEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<ServiceCategoryEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<ServiceCategoryEntity> serviceCategoryList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idServiceCategory, idService, idCategory, timestamp FROM [ServiceCategory] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				serviceCategoryList = new Collection<ServiceCategoryEntity>();
				ServiceCategoryEntity serviceCategory;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					serviceCategory = Load(id, loadRelation, null);
					serviceCategoryList.Add(serviceCategory);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return serviceCategoryList;
		} 

		/// <summary>
		/// Function to Load a list of ServiceCategoryEntity from database by idService.
		/// </summary>
		/// <param name="idService">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of ServiceCategoryEntity</returns>
		public Collection<ServiceCategoryEntity> LoadByServiceCollection(int idService, Dictionary<string,IEntity> scope)
		{
			Collection<ServiceCategoryEntity> serviceCategoryList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idServiceCategory FROM [ServiceCategory] WHERE idService = @idService";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idService", DbType.Int32);
				parameter.Value = idService;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				serviceCategoryList = new Collection<ServiceCategoryEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					serviceCategoryList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return serviceCategoryList;
		} 

		/// <summary>
		/// Function to Load a list of ServiceCategoryEntity from database by idService.
		/// </summary>
		/// <param name="idService">Foreing key column</param>
		/// <returns>IList of ServiceCategoryEntity</returns>
		public Collection<ServiceCategoryEntity> LoadByServiceCollection(int idService)
		{
			return LoadByServiceCollection(idService, null);
		} 

		/// <summary>
		/// Function to Load a list of ServiceCategoryEntity from database by idCategory.
		/// </summary>
		/// <param name="idCategory">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of ServiceCategoryEntity</returns>
		public Collection<ServiceCategoryEntity> LoadByCategoryCollection(int idCategory, Dictionary<string,IEntity> scope)
		{
			Collection<ServiceCategoryEntity> serviceCategoryList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idServiceCategory FROM [ServiceCategory] WHERE idCategory = @idCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);
				parameter.Value = idCategory;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				serviceCategoryList = new Collection<ServiceCategoryEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					serviceCategoryList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return serviceCategoryList;
		} 

		/// <summary>
		/// Function to Load a list of ServiceCategoryEntity from database by idCategory.
		/// </summary>
		/// <param name="idCategory">Foreing key column</param>
		/// <returns>IList of ServiceCategoryEntity</returns>
		public Collection<ServiceCategoryEntity> LoadByCategoryCollection(int idCategory)
		{
			return LoadByCategoryCollection(idCategory, null);
		} 

		/// <summary>
		/// Function to Load the relation Category from database.
		/// </summary>
		/// <param name="serviceCategory">ServiceCategoryEntity parent</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceCategory"/> is not a <c>ServiceCategoryEntity</c>.
		/// </exception>
		public void LoadRelationCategory(ServiceCategoryEntity serviceCategory, Dictionary<string,IEntity> scope)
		{
			if (serviceCategory == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			bool closeConnection = false;
			try 
			{
				// Create a new connection if needed
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idCategory FROM [ServiceCategory] WHERE idServiceCategory = @idServiceCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idServiceCategory", DbType.Int32);
				// Set command parameters values

				parameter.Value = serviceCategory.Id;
				sqlCommand.Parameters.Add(parameter);
				// Execute commands

				object idRelation = sqlCommand.ExecuteScalar();
				if (idRelation != null && ((int)idRelation) > 0)
				{
					// Create data access objects and set connection objects
					CategoryDataAccess categoryDataAccess = new CategoryDataAccess();
					categoryDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
					// Load related object

					serviceCategory.Category = categoryDataAccess.Load(((int)idRelation), true, scope);
				}
			}
			catch (DbException dbException)
			{
				// Catch and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
		} 

	} 
	/// <summary>
	/// The <c>StoreDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class StoreDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,StoreEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>StoreDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  StoreDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,StoreEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a StoreEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public StoreEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "Store";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((StoreEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			StoreEntity store = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				store = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, store);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idStore, name, telephoneNumber, internalPhoneNumber, contactName, ownerName, email, webAddress, localNumber, timestamp FROM [Store] WHERE idStore = @idStore";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idStore", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					store = new StoreEntity();

					if (reader.Read())
					{
						// Load fields of entity
						store.Id = reader.GetInt32(0);

						if (!reader.IsDBNull(1))
						{
							store.Name = reader.GetString(1);
						}
						if (!reader.IsDBNull(2))
						{
							store.TelephoneNumber = reader.GetString(2);
						}
						if (!reader.IsDBNull(3))
						{
							store.InternalPhoneNumber = reader.GetString(3);
						}
						if (!reader.IsDBNull(4))
						{
							store.ContactName = reader.GetString(4);
						}
						if (!reader.IsDBNull(5))
						{
							store.OwnerName = reader.GetString(5);
						}
						if (!reader.IsDBNull(6))
						{
							store.Email = reader.GetString(6);
						}
						if (!reader.IsDBNull(7))
						{
							store.WebAddress = reader.GetString(7);
						}
						if (!reader.IsDBNull(8))
						{
							store.LocalNumber = reader.GetString(8);
						}
						// Add current object to the scope

						scope.Add(scopeKey, store);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(store.Id, store);
						// Read the timestamp and set new and changed properties

						store.Timestamp = reader.GetDateTime(9);
						store.IsNew = false;
						store.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
							LoadRelationStoreCategory(store, scope);
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return store;
		} 

		/// <summary>
		/// Function to load a StoreEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public StoreEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a StoreEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public StoreEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a StoreEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public StoreEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idStore", "name", "telephoneNumber", "internalPhoneNumber", "contactName", "ownerName", "email", "webAddress", "localNumber"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( string ), typeof( string )};

			bool existsTable = DataAccessConnection.DBCheckedTable("Store");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("Store", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(StoreEntity store, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@name", DbType.String);

			parameter.Value = store.Name;
			if (String.IsNullOrEmpty(store.Name))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@telephoneNumber", DbType.String);

			parameter.Value = store.TelephoneNumber;
			if (String.IsNullOrEmpty(store.TelephoneNumber))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@internalPhoneNumber", DbType.String);

			parameter.Value = store.InternalPhoneNumber;
			if (String.IsNullOrEmpty(store.InternalPhoneNumber))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@contactName", DbType.String);

			parameter.Value = store.ContactName;
			if (String.IsNullOrEmpty(store.ContactName))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@ownerName", DbType.String);

			parameter.Value = store.OwnerName;
			if (String.IsNullOrEmpty(store.OwnerName))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@email", DbType.String);

			parameter.Value = store.Email;
			if (String.IsNullOrEmpty(store.Email))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@webAddress", DbType.String);

			parameter.Value = store.WebAddress;
			if (String.IsNullOrEmpty(store.WebAddress))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@localNumber", DbType.String);

			parameter.Value = store.LocalNumber;
			if (String.IsNullOrEmpty(store.LocalNumber))
			{
				parameter.Value = DBNull.Value;
			}

			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a StoreEntity in the database.
		/// </summary>
		/// <param name="store">StoreEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="store"/> is not a <c>StoreEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(StoreEntity store)
		{
			Save(store, null);
		} 

		/// <summary>
		/// Function to Save a StoreEntity in the database.
		/// </summary>
		/// <param name="store">StoreEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="store"/> is not a <c>StoreEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(StoreEntity store, Dictionary<string,IEntity> scope)
		{
			if (store == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = store.Id.ToString(NumberFormatInfo.InvariantInfo) + "Store";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (store.IsNew || !DataAccessConnection.ExistsEntity(store.Id, "Store", "idStore", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [Store] (idStore, NAME, TELEPHONENUMBER, INTERNALPHONENUMBER, CONTACTNAME, OWNERNAME, EMAIL, WEBADDRESS, LOCALNUMBER, [TIMESTAMP] ) VALUES( @idStore,  @name,@telephoneNumber,@internalPhoneNumber,@contactName,@ownerName,@email,@webAddress,@localNumber, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [Store] SET name = @name, telephoneNumber = @telephoneNumber, internalPhoneNumber = @internalPhoneNumber, contactName = @contactName, ownerName = @ownerName, email = @email, webAddress = @webAddress, localNumber = @localNumber , timestamp=GETDATE() WHERE idStore = @idStore";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && store.Id == 0)
				{
					store.Id = DataAccessConnection.GetNextId("idStore", "Store", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idStore", DbType.Int32);
				parameter.Value = store.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(store, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = store.Id.ToString(NumberFormatInfo.InvariantInfo) + "Store";
				// Add entity to current internal scope

				scope.Add(scopeKey, store);
				// Save collections of related objects to current entity
				if (store.StoreCategory != null)
				{
					this.SaveStoreCategoryCollection(new StoreCategoryDataAccess(), store, store.StoreCategory, store.IsNew, scope);
				}
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				store.IsNew = false;
				store.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a StoreEntity from database.
		/// </summary>
		/// <param name="store">StoreEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="store"/> is not a <c>StoreEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(StoreEntity store)
		{
			Delete(store, null);
		} 

		/// <summary>
		/// Function to Delete a StoreEntity from database.
		/// </summary>
		/// <param name="store">StoreEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="store"/> is not a <c>StoreEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(StoreEntity store, Dictionary<string,IEntity> scope)
		{
			if (store == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				store = this.Load(store.Id, true);
				if (store == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [Store] WHERE idStore = @idStore";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idStore", DbType.Int32);
				parameterID.Value = store.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				if (store.StoreCategory != null)
				{
					this.DeleteStoreCategoryCollection(new StoreCategoryDataAccess(), store.StoreCategory, scope);
				}
				// Commit transaction if is mine

				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(store.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = store.Id.ToString(NumberFormatInfo.InvariantInfo) + "Store";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idStore", typeof( int ));

			properties.Add("name", typeof( string ));
			properties.Add("telephoneNumber", typeof( string ));
			properties.Add("internalPhoneNumber", typeof( string ));
			properties.Add("contactName", typeof( string ));
			properties.Add("ownerName", typeof( string ));
			properties.Add("email", typeof( string ));
			properties.Add("webAddress", typeof( string ));
			properties.Add("localNumber", typeof( string ));
		} 

		/// <summary>
		/// Function to Load all the StoreEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<StoreEntity> LoadAll(bool loadRelation)
		{
			Collection<StoreEntity> storeList = new Collection<StoreEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idStore FROM [Store]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				StoreEntity store;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					store = Load(id, loadRelation, null);
					storeList.Add(store);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return storeList;
		} 

		/// <summary>
		/// Function to Load a StoreEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of StoreEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<StoreEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<StoreEntity> storeList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idStore, name, telephoneNumber, internalPhoneNumber, contactName, ownerName, email, webAddress, localNumber, timestamp FROM [Store] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				storeList = new Collection<StoreEntity>();
				StoreEntity store;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					store = Load(id, loadRelation, null);
					storeList.Add(store);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return storeList;
		} 

		/// <summary>
		/// Function to Load the relation StoreCategory from database.
		/// </summary>
		/// <param name="store">StoreEntity parent</param>
		/// <param name="scope">Internal structure to avoid problems with circular referencies</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="store"/> is not a <c>StoreEntity</c>.
		/// </exception>
		public void LoadRelationStoreCategory(StoreEntity store, Dictionary<string,IEntity> scope)
		{
			if (store == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create data access object for related object
			StoreCategoryDataAccess storeCategoryDataAccess = new StoreCategoryDataAccess();
			// Set connection objects to the data access

			storeCategoryDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Load related objects

			store.StoreCategory = storeCategoryDataAccess.LoadByStoreCollection(store.Id, scope);
		} 

		/// <summary>
		/// Updates the database to reflect the current state of the list.
		/// </summary>
		/// <param name="collectionDataAccess">the IDataAccess of the relation</param>
		/// <param name="parent">the parent of the object</param>
		/// <param name="collection">a collection of items</param>
		/// <param name="isNewParent">if the parent is a new object</param>
		/// <param name="scope">internal data structure to aviod problems with circular referencies on entities</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		private void SaveStoreCategoryCollection(StoreCategoryDataAccess collectionDataAccess, StoreEntity parent, Collection<StoreCategoryEntity> collection, bool isNewParent, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return;
			}
			// Set connection objects on collection data access
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Set the child/parent relation

			for (int  i = 0; i < collection.Count; i++)
			{
				bool changed = collection[i].Changed;
				collection[i].Store = parent;
				collection[i].Changed = changed;
			}
			// If the parent is new save all childs, else check diferencies with db

			if (isNewParent)
			{
				for (int  i = 0; i < collection.Count; i++)
				{
					collectionDataAccess.Save(collection[i], scope);
				}
			}
			else 
			{
				// Check the childs that are not part of the parent any more
				string idList = "0";
				if (collection.Count > 0)
				{
					idList = "" + collection[0].Id;
				}

				for (int  i = 1; i < collection.Count; i++)
				{
					idList += ", " + collection[i].Id;
				}
				// Returns the ids that doesn't exists in the current collection

				string command = "SELECT idStoreCategory FROM [StoreCategory] WHERE idStore = @idStore AND idStoreCategory NOT IN (" + idList + ")";

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(command, dbConnection, dbTransaction);

				SqlCeParameter sqlParameterId = dataAccess.GetNewDataParameter("@idStore", DbType.Int32);
				sqlParameterId.Value = parent.Id;
				sqlCommand.Parameters.Add(sqlParameterId);

				IDataReader reader = sqlCommand.ExecuteReader();
				Collection<StoreCategoryEntity> objectsToDelete = new Collection<StoreCategoryEntity>();
				// Insert Ids on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load items to be removed

				foreach(int  id in listId)
				{
					StoreCategoryEntity entityToDelete = collectionDataAccess.Load(id, scope);
					objectsToDelete.Add(entityToDelete);
				}
				// Have to do this because the reader must be closed before
				// deletion of entities

				for (int  i = 0; i < objectsToDelete.Count; i++)
				{
					collectionDataAccess.Delete(objectsToDelete[i], scope);
				}

				System.DateTime timestamp;
				// Check all the properties of the collection items
				// to see if they have changed (timestamp)

				for (int  i = 0; i < collection.Count; i++)
				{
					StoreCategoryEntity item = collection[i];
					if (!item.Changed && !item.IsNew)
					{
						// Create the command
						string sql = "SELECT timestamp FROM [StoreCategory] WHERE idStoreCategory = @idStoreCategory";
						SqlCeCommand sqlCommandTimestamp = dataAccess.GetNewCommand(sql, dbConnection, dbTransaction);
						// Set the command's parameters values

						SqlCeParameter sqlParameterIdPreference = dataAccess.GetNewDataParameter("@idStoreCategory", DbType.Int32);
						sqlParameterIdPreference.Value = item.Id;
						sqlCommandTimestamp.Parameters.Add(sqlParameterIdPreference);

						timestamp = ((System.DateTime)sqlCommandTimestamp.ExecuteScalar());
						if (item.Timestamp != timestamp)
						{
							item.Changed = true;
						}
					}
					// Save the item if it changed or is new

					if (item.Changed || item.IsNew)
					{
						collectionDataAccess.Save(item);
					}
				}
			}
		} 

		/// <summary>
		/// Function to Delete a list of related entities from database.
		/// </summary>
		/// <param name="collectionDataAccess">IDataAccess of the relation</param>
		/// <param name="collection">The collection of entities to delete</param>
		/// <param name="scope">Internal structure to keep safe circular referencies</param>
		/// <returns>True if collection not null</returns>
		private bool DeleteStoreCategoryCollection(StoreCategoryDataAccess collectionDataAccess, Collection<StoreCategoryEntity> collection, Dictionary<string,IEntity> scope)
		{
			if (collection == null)
			{
				return false;
			}
			// Set connection objects of related data access object
			collectionDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
			// Delete related objects

			for (int  i = 0; i < collection.Count; i++)
			{
				collectionDataAccess.Delete(collection[i], scope);
			}
			return true;
		} 

	} 
	/// <summary>
	/// The <c>StoreCategoryDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class StoreCategoryDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,StoreCategoryEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>StoreCategoryDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  StoreCategoryDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,StoreCategoryEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a StoreCategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public StoreCategoryEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "StoreCategory";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((StoreCategoryEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			StoreCategoryEntity storeCategory = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				storeCategory = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, storeCategory);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idStoreCategory, idCategory, idStore, timestamp FROM [StoreCategory] WHERE idStoreCategory = @idStoreCategory";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idStoreCategory", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					storeCategory = new StoreCategoryEntity();

					if (reader.Read())
					{
						// Load fields of entity
						storeCategory.Id = reader.GetInt32(0);

						storeCategory.IdCategory = reader.GetInt32(1);
						storeCategory.IdStore = reader.GetInt32(2);
						// Add current object to the scope

						scope.Add(scopeKey, storeCategory);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(storeCategory.Id, storeCategory);
						// Read the timestamp and set new and changed properties

						storeCategory.Timestamp = reader.GetDateTime(3);
						storeCategory.IsNew = false;
						storeCategory.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
							LoadRelationCategory(storeCategory, scope);
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return storeCategory;
		} 

		/// <summary>
		/// Function to load a StoreCategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public StoreCategoryEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a StoreCategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public StoreCategoryEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a StoreCategoryEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public StoreCategoryEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idStoreCategory", "idCategory", "idStore"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( int ), typeof( int )};

			bool existsTable = DataAccessConnection.DBCheckedTable("StoreCategory");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("StoreCategory", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(StoreCategoryEntity storeCategory, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);

			parameter.Value = storeCategory.IdCategory;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idStore", DbType.Int32);

			parameter.Value = storeCategory.IdStore;
			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a StoreCategoryEntity in the database.
		/// </summary>
		/// <param name="storeCategory">StoreCategoryEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeCategory"/> is not a <c>StoreCategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(StoreCategoryEntity storeCategory)
		{
			Save(storeCategory, null);
		} 

		/// <summary>
		/// Function to Save a StoreCategoryEntity in the database.
		/// </summary>
		/// <param name="storeCategory">StoreCategoryEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="storeCategory"/> is not a <c>StoreCategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(StoreCategoryEntity storeCategory, Dictionary<string,IEntity> scope)
		{
			if (storeCategory == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = storeCategory.Id.ToString(NumberFormatInfo.InvariantInfo) + "StoreCategory";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (storeCategory.IsNew || !DataAccessConnection.ExistsEntity(storeCategory.Id, "StoreCategory", "idStoreCategory", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [StoreCategory] (idStoreCategory, IDCATEGORY, IDSTORE, [TIMESTAMP] ) VALUES( @idStoreCategory,  @idCategory,@idStore, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [StoreCategory] SET idCategory = @idCategory, idStore = @idStore , timestamp=GETDATE() WHERE idStoreCategory = @idStoreCategory";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && storeCategory.Id == 0)
				{
					storeCategory.Id = DataAccessConnection.GetNextId("idStoreCategory", "StoreCategory", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idStoreCategory", DbType.Int32);
				parameter.Value = storeCategory.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(storeCategory, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = storeCategory.Id.ToString(NumberFormatInfo.InvariantInfo) + "StoreCategory";
				// Add entity to current internal scope

				scope.Add(scopeKey, storeCategory);
				// Save collections of related objects to current entity
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				storeCategory.IsNew = false;
				storeCategory.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a StoreCategoryEntity from database.
		/// </summary>
		/// <param name="storeCategory">StoreCategoryEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="storeCategory"/> is not a <c>StoreCategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(StoreCategoryEntity storeCategory)
		{
			Delete(storeCategory, null);
		} 

		/// <summary>
		/// Function to Delete a StoreCategoryEntity from database.
		/// </summary>
		/// <param name="storeCategory">StoreCategoryEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="storeCategory"/> is not a <c>StoreCategoryEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(StoreCategoryEntity storeCategory, Dictionary<string,IEntity> scope)
		{
			if (storeCategory == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				storeCategory = this.Load(storeCategory.Id, true);
				if (storeCategory == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [StoreCategory] WHERE idStoreCategory = @idStoreCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idStoreCategory", DbType.Int32);
				parameterID.Value = storeCategory.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				// Commit transaction if is mine
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(storeCategory.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = storeCategory.Id.ToString(NumberFormatInfo.InvariantInfo) + "StoreCategory";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idStoreCategory", typeof( int ));

			properties.Add("idCategory", typeof( int ));
			properties.Add("idStore", typeof( int ));
		} 

		/// <summary>
		/// Function to Load all the StoreCategoryEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<StoreCategoryEntity> LoadAll(bool loadRelation)
		{
			Collection<StoreCategoryEntity> storeCategoryList = new Collection<StoreCategoryEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idStoreCategory FROM [StoreCategory]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				StoreCategoryEntity storeCategory;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					storeCategory = Load(id, loadRelation, null);
					storeCategoryList.Add(storeCategory);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return storeCategoryList;
		} 

		/// <summary>
		/// Function to Load a StoreCategoryEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of StoreCategoryEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<StoreCategoryEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<StoreCategoryEntity> storeCategoryList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idStoreCategory, idCategory, idStore, timestamp FROM [StoreCategory] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				storeCategoryList = new Collection<StoreCategoryEntity>();
				StoreCategoryEntity storeCategory;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					storeCategory = Load(id, loadRelation, null);
					storeCategoryList.Add(storeCategory);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return storeCategoryList;
		} 

		/// <summary>
		/// Function to Load a list of StoreCategoryEntity from database by idCategory.
		/// </summary>
		/// <param name="idCategory">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of StoreCategoryEntity</returns>
		public Collection<StoreCategoryEntity> LoadByCategoryCollection(int idCategory, Dictionary<string,IEntity> scope)
		{
			Collection<StoreCategoryEntity> storeCategoryList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idStoreCategory FROM [StoreCategory] WHERE idCategory = @idCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idCategory", DbType.Int32);
				parameter.Value = idCategory;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				storeCategoryList = new Collection<StoreCategoryEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					storeCategoryList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return storeCategoryList;
		} 

		/// <summary>
		/// Function to Load a list of StoreCategoryEntity from database by idCategory.
		/// </summary>
		/// <param name="idCategory">Foreing key column</param>
		/// <returns>IList of StoreCategoryEntity</returns>
		public Collection<StoreCategoryEntity> LoadByCategoryCollection(int idCategory)
		{
			return LoadByCategoryCollection(idCategory, null);
		} 

		/// <summary>
		/// Function to Load the relation Category from database.
		/// </summary>
		/// <param name="storeCategory">StoreCategoryEntity parent</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeCategory"/> is not a <c>StoreCategoryEntity</c>.
		/// </exception>
		public void LoadRelationCategory(StoreCategoryEntity storeCategory, Dictionary<string,IEntity> scope)
		{
			if (storeCategory == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			bool closeConnection = false;
			try 
			{
				// Create a new connection if needed
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idCategory FROM [StoreCategory] WHERE idStoreCategory = @idStoreCategory";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idStoreCategory", DbType.Int32);
				// Set command parameters values

				parameter.Value = storeCategory.Id;
				sqlCommand.Parameters.Add(parameter);
				// Execute commands

				object idRelation = sqlCommand.ExecuteScalar();
				if (idRelation != null && ((int)idRelation) > 0)
				{
					// Create data access objects and set connection objects
					CategoryDataAccess categoryDataAccess = new CategoryDataAccess();
					categoryDataAccess.SetConnectionObjects(dbConnection, dbTransaction);
					// Load related object

					storeCategory.Category = categoryDataAccess.Load(((int)idRelation), true, scope);
				}
			}
			catch (DbException dbException)
			{
				// Catch and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
		} 

		/// <summary>
		/// Function to Load a list of StoreCategoryEntity from database by idStore.
		/// </summary>
		/// <param name="idStore">Foreing key column</param>
		/// <param name="scope">Internal data structure to avoid circular reference problems</param>
		/// <returns>List of StoreCategoryEntity</returns>
		public Collection<StoreCategoryEntity> LoadByStoreCollection(int idStore, Dictionary<string,IEntity> scope)
		{
			Collection<StoreCategoryEntity> storeCategoryList;
			bool closeConnection = false;
			try 
			{
				// Create a new connection
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Create a command

				string cmdText = "SELECT idStoreCategory FROM [StoreCategory] WHERE idStore = @idStore";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Set command parameters values

				SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idStore", DbType.Int32);
				parameter.Value = idStore;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				storeCategoryList = new Collection<StoreCategoryEntity>();
				// Load Ids of related objects into a list of int

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}

				reader.Close();
				// Load related objects and add to collection

				foreach(int  id in listId)
				{
					storeCategoryList.Add(Load(id, scope));
				}
			}
			catch (DbException dbException)
			{
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated be me
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return related objects list
			return storeCategoryList;
		} 

		/// <summary>
		/// Function to Load a list of StoreCategoryEntity from database by idStore.
		/// </summary>
		/// <param name="idStore">Foreing key column</param>
		/// <returns>IList of StoreCategoryEntity</returns>
		public Collection<StoreCategoryEntity> LoadByStoreCollection(int idStore)
		{
			return LoadByStoreCollection(idStore, null);
		} 

	} 
	/// <summary>
	/// The <c>UserActionClientDataDataAccess</c> is a class
	/// that provides access to the modelName stored on
	/// the database.
	/// </summary>
	public class UserActionClientDataDataAccess
	{
		private bool isGlobalTransaction; 
		private SqlCeConnection dbConnection; 
		private SqlCeTransaction dbTransaction; 
		private DataAccessConnection dataAccess; 
		private Dictionary<int,UserActionClientDataEntity> inMemoryEntities; 
		private static Dictionary<string,Type> properties; 
		private static bool dbChecked; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>UserActionClientDataDataAccess</c> type.
		/// It checks if the table and stored procedure
		/// are already on the database, if not, it creates
		/// them.
		/// Sets the properties that allows to make queries
		/// by calling the LoadWhere method.
		/// </summary>
		public  UserActionClientDataDataAccess()
		{
			dataAccess = DataAccessConnection.Instance;
			if (!dbChecked)
			{
				DbChecked();
			}

			if (properties == null)
			{
				SetProperties();
			}

			inMemoryEntities = new Dictionary<int,UserActionClientDataEntity>();
		} 

		/// <summary>
		/// set the connection and the transaction to the object, in the case
		/// that a global transaction is running.
		/// </summary>
		/// <param name="connection">The SqlCeConnection connection to the database</param>
		/// <param name="transaction">The global SqlCeTransaction transaction</param>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void SetConnectionObjects(SqlCeConnection connection, SqlCeTransaction transaction)
		{
			if (connection == null)
			{
				throw new ArgumentException("The connection cannot be null");
			}
			this.dbConnection = connection;
			this.dbTransaction = transaction;
			// FIXME : The name of this flag is not always apropiated

			this.isGlobalTransaction = true;
		} 

		/// <summary>
		/// Function to load a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>The entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public UserActionClientDataEntity Load(int id, bool loadRelation, Dictionary<string,IEntity> scope)
		{
			// Build a key for internal scope object
			string scopeKey = id.ToString(NumberFormatInfo.InvariantInfo) + "UserActionClientData";
			if (scope != null)
			{
				// If scope contains the object it was already loaded,
				// return it to avoid circular references
				if (scope.ContainsKey(scopeKey))
				{
					return ((UserActionClientDataEntity)scope[scopeKey]);
				}
			}
			else 
			{
				// If there isn't a current scope create one
				scope = new Dictionary<string,IEntity>();
			}

			UserActionClientDataEntity userActionClientData = null;
			// Check if the entity was already loaded by current data access object
			// and return it if that is the case

			if (inMemoryEntities.ContainsKey(id))
			{
				userActionClientData = inMemoryEntities[id];
				// Add current object to current load scope

				scope.Add(scopeKey, userActionClientData);
			}
			else 
			{
				bool closeConnection = false;
				try 
				{
					// Open a new connection if it isn't on a transaction
					if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
					{
						closeConnection = true;
						dbConnection = dataAccess.GetNewConnection();
						dbConnection.Open();
					}

					string cmdText = "SELECT idUserActionClientData, actionType, start, stop, idTable, idRegister, idComponent, idService, timestamp FROM [UserActionClientData] WHERE idUserActionClientData = @idUserActionClientData";
					// Create the command

					SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
					// Create the Id parameter for the query

					SqlCeParameter parameter = dataAccess.GetNewDataParameter("@idUserActionClientData", DbType.Int32);
					parameter.Value = id;
					sqlCommand.Parameters.Add(parameter);
					// Use a DataReader to get data from db

					IDataReader reader = sqlCommand.ExecuteReader();
					userActionClientData = new UserActionClientDataEntity();

					if (reader.Read())
					{
						// Load fields of entity
						userActionClientData.Id = reader.GetInt32(0);

						userActionClientData.ActionType = reader.GetInt32(1);
						userActionClientData.Start = reader.GetDateTime(2);
						userActionClientData.Stop = reader.GetDateTime(3);
						userActionClientData.IdTable = reader.GetInt32(4);
						userActionClientData.IdRegister = reader.GetInt32(5);
						userActionClientData.IdComponent = reader.GetInt32(6);
						userActionClientData.IdService = reader.GetInt32(7);
						// Add current object to the scope

						scope.Add(scopeKey, userActionClientData);
						// Add current object to cache of loaded entities

						inMemoryEntities.Add(userActionClientData.Id, userActionClientData);
						// Read the timestamp and set new and changed properties

						userActionClientData.Timestamp = reader.GetDateTime(8);
						userActionClientData.IsNew = false;
						userActionClientData.Changed = false;
						// Close the reader

						reader.Close();
						// Load related objects if required

						if (loadRelation)
						{
						}
					}
					else 
					{
						reader.Close();
					}
				}
				catch (DbException dbException)
				{
					// Catch DBException and rethrow as custom exception
					throw new UtnEmallDataAccessException(dbException.Message, dbException);
				}
				finally 
				{
					// Close connection if it was opened by ourself
					if (closeConnection)
					{
						dbConnection.Close();
					}
				}
			}
			// Return the loaded entity
			return userActionClientData;
		} 

		/// <summary>
		/// Function to load a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public UserActionClientDataEntity Load(int id)
		{
			return Load(id, true, null);
		} 

		/// <summary>
		/// Function to load a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="loadRelation">if is true load the relation</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public UserActionClientDataEntity Load(int id, bool loadRelations)
		{
			return Load(id, loadRelations, null);
		} 

		/// <summary>
		/// Function to load a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="id">The ID of the record to load</param>
		/// <param name="scope">Internal structure used to avoid circular reference locks, must be provided if calling from other data access object</param>
		/// <returns>the entity instance</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs while accessing the database.
		/// </exception>
		public UserActionClientDataEntity Load(int id, Dictionary<string,IEntity> scope)
		{
			return Load(id, true, scope);
		} 

		/// <summary>
		/// Function to check and create table and stored procedures for this class.
		/// </summary>
		private static void DbChecked()
		{
			if (dbChecked)
			{
				return;
			}
			string[] fieldsName = new string[]{"idUserActionClientData", "actionType", "start", "stop", "idTable", "idRegister", "idComponent", "idService"};
			Type[] fieldsType = new Type[]{typeof( int ), typeof( int ), typeof( System.DateTime ), typeof( System.DateTime ), typeof( int ), typeof( int ), typeof( int ), typeof( int )};

			bool existsTable = DataAccessConnection.DBCheckedTable("UserActionClientData");

			if (!existsTable)
			{
				DataAccessConnection.CreateTable("UserActionClientData", fieldsName, false, fieldsType);
			}
			dbChecked = true;
		} 

		private void FillSaveParameters(UserActionClientDataEntity userActionClientData, SqlCeCommand sqlCommand)
		{
			SqlCeParameter parameter;
			parameter = dataAccess.GetNewDataParameter("@actionType", DbType.Int32);

			parameter.Value = userActionClientData.ActionType;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@start", DbType.DateTime);

			parameter.Value = userActionClientData.Start;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@stop", DbType.DateTime);

			parameter.Value = userActionClientData.Stop;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idTable", DbType.Int32);

			parameter.Value = userActionClientData.IdTable;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idRegister", DbType.Int32);

			parameter.Value = userActionClientData.IdRegister;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idComponent", DbType.Int32);

			parameter.Value = userActionClientData.IdComponent;
			sqlCommand.Parameters.Add(parameter);
			parameter = dataAccess.GetNewDataParameter("@idService", DbType.Int32);

			parameter.Value = userActionClientData.IdService;
			sqlCommand.Parameters.Add(parameter);
		} 

		/// <summary>
		/// Function to Save a UserActionClientDataEntity in the database.
		/// </summary>
		/// <param name="userActionClientData">UserActionClientDataEntity to save</param>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientData"/> is not a <c>UserActionClientDataEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(UserActionClientDataEntity userActionClientData)
		{
			Save(userActionClientData, null);
		} 

		/// <summary>
		/// Function to Save a UserActionClientDataEntity in the database.
		/// </summary>
		/// <param name="userActionClientData">UserActionClientDataEntity to save</param>
		/// <param name="scope">Interna structure to avoid circular reference locks. Provide an instance when calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="userActionClientData"/> is not a <c>UserActionClientDataEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Save(UserActionClientDataEntity userActionClientData, Dictionary<string,IEntity> scope)
		{
			if (userActionClientData == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Create a unique key to identify the object in the internal scope
			string scopeKey = userActionClientData.Id.ToString(NumberFormatInfo.InvariantInfo) + "UserActionClientData";
			if (scope != null)
			{
				// If it's on the scope return it, don't save again
				if (scope.ContainsKey(scopeKey))
				{
					return;
				}
			}
			else 
			{
				// Create a new scope if it's not provided
				scope = new Dictionary<string,IEntity>();
			}

			try 
			{
				// Open a DbConnection and a new transaction if it isn't on a higher level one
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}

				string commandName = "";
				bool isUpdate = false;
				// Check if it is an insert or update command

				if (userActionClientData.IsNew || !DataAccessConnection.ExistsEntity(userActionClientData.Id, "UserActionClientData", "idUserActionClientData", dbConnection, dbTransaction))
				{
					commandName = "INSERT INTO [UserActionClientData] (idUserActionClientData, ACTIONTYPE, START, STOP, IDTABLE, IDREGISTER, IDCOMPONENT, IDSERVICE, [TIMESTAMP] ) VALUES( @idUserActionClientData,  @actionType,@start,@stop,@idTable,@idRegister,@idComponent,@idService, GETDATE()); ";
				}
				else 
				{
					isUpdate = true;
					commandName = "UPDATE [UserActionClientData] SET actionType = @actionType, start = @start, stop = @stop, idTable = @idTable, idRegister = @idRegister, idComponent = @idComponent, idService = @idService , timestamp=GETDATE() WHERE idUserActionClientData = @idUserActionClientData";
				}
				// Create a db command
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(commandName, dbConnection, dbTransaction);
				// Add parameters values to current command
				SqlCeParameter parameter;
				if (!isUpdate && userActionClientData.Id == 0)
				{
					userActionClientData.Id = DataAccessConnection.GetNextId("idUserActionClientData", "UserActionClientData", dbConnection, dbTransaction);
				}

				parameter = dataAccess.GetNewDataParameter("@idUserActionClientData", DbType.Int32);
				parameter.Value = userActionClientData.Id;
				sqlCommand.Parameters.Add(parameter);

				FillSaveParameters(userActionClientData, sqlCommand);
				// Execute the command
				sqlCommand.ExecuteNonQuery();

				scopeKey = userActionClientData.Id.ToString(NumberFormatInfo.InvariantInfo) + "UserActionClientData";
				// Add entity to current internal scope

				scope.Add(scopeKey, userActionClientData);
				// Save collections of related objects to current entity
				// Save objects related to current entity
				// Update
				// Close transaction if initiated by me
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Update new and changed flags

				userActionClientData.IsNew = false;
				userActionClientData.Changed = false;
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if initiated by me
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Function to Delete a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="userActionClientData">UserActionClientDataEntity to delete</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="userActionClientData"/> is not a <c>UserActionClientDataEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(UserActionClientDataEntity userActionClientData)
		{
			Delete(userActionClientData, null);
		} 

		/// <summary>
		/// Function to Delete a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="userActionClientData">UserActionClientDataEntity to delete</param>
		/// <param name="scope">Internal structure to avoid circular reference locks. Must provide an instance while calling from other data access object.</param>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="userActionClientData"/> is not a <c>UserActionClientDataEntity</c>.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public void Delete(UserActionClientDataEntity userActionClientData, Dictionary<string,IEntity> scope)
		{
			if (userActionClientData == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			try 
			{
				// Open connection and initialize a transaction if needed
				if (!isGlobalTransaction)
				{
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
					dbTransaction = dbConnection.BeginTransaction();
				}
				// Reload the entity to ensure deletion of older data

				userActionClientData = this.Load(userActionClientData.Id, true);
				if (userActionClientData == null)
				{
					throw new UtnEmallDataAccessException("Error retrieving data while trying to delete.");
				}
				// Create a command for delete
				string cmdText = "DELETE FROM [UserActionClientData] WHERE idUserActionClientData = @idUserActionClientData";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add values to parameters
				SqlCeParameter parameterID = dataAccess.GetNewDataParameter("@idUserActionClientData", DbType.Int32);
				parameterID.Value = userActionClientData.Id;
				sqlCommand.Parameters.Add(parameterID);
				// Execute the command

				sqlCommand.ExecuteNonQuery();
				// Delete related objects
				// Commit transaction if is mine
				if (!isGlobalTransaction)
				{
					dbTransaction.Commit();
				}
				// Remove entity from loaded objects

				inMemoryEntities.Remove(userActionClientData.Id);
				// Remove entity from current internal scope

				if (scope != null)
				{
					string scopeKey = userActionClientData.Id.ToString(NumberFormatInfo.InvariantInfo) + "UserActionClientData";
					scope.Remove(scopeKey);
				}
			}
			catch (DbException dbException)
			{
				// Rollback transaction
				if (!isGlobalTransaction)
				{
					dbTransaction.Rollback();
				}
				// Rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was initiated by this instance
				if (!isGlobalTransaction)
				{
					dbConnection.Close();
					dbConnection = null;
					dbTransaction = null;
				}
			}
		} 

		/// <summary>
		/// Add to the dictionary the properties that can
		/// be used as first parameter on the LoadWhere method.
		/// </summary>
		private static void SetProperties()
		{
			properties = new Dictionary<string,Type>();
			properties.Add("timestamp", typeof( System.DateTime ));
			properties.Add("idUserActionClientData", typeof( int ));

			properties.Add("actionType", typeof( int ));
			properties.Add("start", typeof( System.DateTime ));
			properties.Add("stop", typeof( System.DateTime ));
			properties.Add("idTable", typeof( int ));
			properties.Add("idRegister", typeof( int ));
			properties.Add("idComponent", typeof( int ));
			properties.Add("idService", typeof( int ));
		} 

		/// <summary>
		/// Function to Load all the UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="loadRelation">If is true load the relation</param>
		/// <returns>A list of all the entities</returns>
		/// <exception cref="UtnEmallDataAccessException">
		/// If a DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<UserActionClientDataEntity> LoadAll(bool loadRelation)
		{
			Collection<UserActionClientDataEntity> userActionClientDataList = new Collection<UserActionClientDataEntity>();

			bool closeConnection = false;
			try 
			{
				// Open a new connection if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}
				// Build the query string

				string cmdText = "SELECT idUserActionClientData FROM [UserActionClientData]";
				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();

				UserActionClientDataEntity userActionClientData;
				// Read the Ids and insert on a list

				List<int> listId = new List<int>();
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the DataReader

				reader.Close();
				// Load entities and add to return list

				foreach(int  id in listId)
				{
					userActionClientData = Load(id, loadRelation, null);
					userActionClientDataList.Add(userActionClientData);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close the connection
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			// Return the loaded
			return userActionClientDataList;
		} 

		/// <summary>
		/// Function to Load a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="propertyName">A string with the name of the field or a
		/// constant from the class that represent that field</param>
		/// <param name="expValue">The value that will be inserted on the where
		/// clause of the sql query</param>
		/// <param name="loadRelation">If is true load the relations</param>
		/// <returns>A list containing all the entities that match the where clause</returns>
		/// <exception cref="ArgumentNullException">
		/// If <paramref name="propertyName"/> is null or empty.
		/// If <paramref name="propertyName"/> is not a property of UserActionClientDataEntity class.
		/// If <paramref name="expValue"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallDataAccessException">
		/// If an DbException occurs in the try block while accessing the database.
		/// </exception>
		public Collection<UserActionClientDataEntity> LoadWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			if (String.IsNullOrEmpty(propertyName) || expValue == null)
			{
				throw new ArgumentException("The argument can not be null or be empty", "propertyName");
			}
			if (!properties.ContainsKey(propertyName))
			{
				throw new ArgumentException("The property " + propertyName + " is not a property of this entity", "propertyName");
			}
			Collection<UserActionClientDataEntity> userActionClientDataList;

			bool closeConnection = false;
			try 
			{
				// Open a new connection with a database if necessary
				if (dbConnection == null || dbConnection.State.CompareTo(ConnectionState.Closed) == 0)
				{
					closeConnection = true;
					dbConnection = dataAccess.GetNewConnection();
					dbConnection.Open();
				}

				string op = DataAccessConnection.GetOperatorString(operatorType);
				// Build the query string

				string cmdText = "SELECT idUserActionClientData, actionType, start, stop, idTable, idRegister, idComponent, idService, timestamp FROM [UserActionClientData] WHERE " + propertyName + " " + op + " @expValue";
				// Create the command

				SqlCeCommand sqlCommand = dataAccess.GetNewCommand(cmdText, dbConnection, dbTransaction);
				// Add parameters values to the command

				SqlCeParameter parameter = dataAccess.GetNewDataParameter();
				parameter.ParameterName = "@expValue";
				Type parameterType = properties[propertyName];
				parameter.DbType = DataAccessConnection.GetParameterDBType(parameterType);

				parameter.Value = expValue;
				sqlCommand.Parameters.Add(parameter);
				// Create a DataReader

				IDataReader reader = sqlCommand.ExecuteReader();
				userActionClientDataList = new Collection<UserActionClientDataEntity>();
				UserActionClientDataEntity userActionClientData;
				List<int> listId = new List<int>();
				// Add list of Ids to a list
				while (reader.Read())
				{
					listId.Add(reader.GetInt32(0));
				}
				// Close the reader

				reader.Close();
				// Load the entities

				foreach(int  id in listId)
				{
					userActionClientData = Load(id, loadRelation, null);
					userActionClientDataList.Add(userActionClientData);
				}
			}
			catch (DbException dbException)
			{
				// Catch DbException and rethrow as custom exception
				throw new UtnEmallDataAccessException(dbException.Message, dbException);
			}
			finally 
			{
				// Close connection if it was opened by myself
				if (closeConnection)
				{
					dbConnection.Close();
				}
			}
			return userActionClientDataList;
		} 

	} 
} 
/// Archivo de Libreria Base ZOE.
/// Usado principalmente por el compilador
/// ZOE para simular los tipos nativos.
/// 2007(R) Alexis, Ferreyra.

namespace UtnEmall.Client.ServiceAccessLayer
{
	/// <summary>
	/// The <c>ICategory</c> business contract to process CategoryEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public interface ICategory
	{
		/// <summary>
		/// Function to save a CategoryEntity to the database.
		/// </summary>
		/// <param name="categoryEntity">CategoryEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CategoryEntity was saved successfully, the same CategoryEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		CategoryEntity Save(CategoryEntity categoryEntity, string session);
		/// <summary>
		/// Function to delete a CategoryEntity from database.
		/// </summary>
		/// <param name="categoryEntity">CategoryEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CategoryEntity was deleted successfully, the same CategoryEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		CategoryEntity Delete(CategoryEntity categoryEntity, string session);
		/// <summary>
		/// Get an specific categoryEntity
		/// </summary>
		/// <param name="id">id of the CategoryEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		CategoryEntity GetCategory(int id, bool loadRelation, string session);
		/// <summary>
		/// Get collection of all categoryEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all CategoryEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<CategoryEntity> GetAllCategory(bool loadRelation, string session);
		/// <summary>
		/// Get collection of all categoryEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of categoryEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<CategoryEntity> GetCategoryWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session);
		/// <summary>
		/// Get collection of all categoryEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of categoryEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<CategoryEntity> GetCategoryWhereEqual(string propertyName, object expValue, bool loadRelation, string session);
		/// <summary>
		/// Function to validate a CategoryEntity before it's saved.
		/// </summary>
		/// <param name="categoryEntity">CategoryEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CategoryEntity was deleted successfully, the same CategoryEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		bool Validate(CategoryEntity category);
	} 
	/// <summary>
	/// The <c>ICustomer</c> business contract to process CustomerEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public interface ICustomer
	{
		/// <summary>
		/// Function to save a CustomerEntity to the database.
		/// </summary>
		/// <param name="customerEntity">CustomerEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CustomerEntity was saved successfully, the same CustomerEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		CustomerEntity Save(CustomerEntity customerEntity, string session);
		/// <summary>
		/// Function to delete a CustomerEntity from database.
		/// </summary>
		/// <param name="customerEntity">CustomerEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CustomerEntity was deleted successfully, the same CustomerEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		CustomerEntity Delete(CustomerEntity customerEntity, string session);
		/// <summary>
		/// Get an specific customerEntity
		/// </summary>
		/// <param name="id">id of the CustomerEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		CustomerEntity GetCustomer(int id, bool loadRelation, string session);
		/// <summary>
		/// Get collection of all customerEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all CustomerEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<CustomerEntity> GetAllCustomer(bool loadRelation, string session);
		/// <summary>
		/// Get collection of all customerEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of customerEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<CustomerEntity> GetCustomerWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session);
		/// <summary>
		/// Get collection of all customerEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of customerEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<CustomerEntity> GetCustomerWhereEqual(string propertyName, object expValue, bool loadRelation, string session);
		/// <summary>
		/// Function to validate a CustomerEntity before it's saved.
		/// </summary>
		/// <param name="customerEntity">CustomerEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CustomerEntity was deleted successfully, the same CustomerEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		bool Validate(CustomerEntity customer);
	} 
	/// <summary>
	/// The <c>IService</c> business contract to process ServiceEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public interface IService
	{
		/// <summary>
		/// Function to save a ServiceEntity to the database.
		/// </summary>
		/// <param name="serviceEntity">ServiceEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the ServiceEntity was saved successfully, the same ServiceEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		ServiceEntity Save(ServiceEntity serviceEntity, string session);
		/// <summary>
		/// Function to delete a ServiceEntity from database.
		/// </summary>
		/// <param name="serviceEntity">ServiceEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the ServiceEntity was deleted successfully, the same ServiceEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		ServiceEntity Delete(ServiceEntity serviceEntity, string session);
		/// <summary>
		/// Get an specific serviceEntity
		/// </summary>
		/// <param name="id">id of the ServiceEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		ServiceEntity GetService(int id, bool loadRelation, string session);
		/// <summary>
		/// Get collection of all serviceEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all ServiceEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<ServiceEntity> GetAllService(bool loadRelation, string session);
		/// <summary>
		/// Get collection of all serviceEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of serviceEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<ServiceEntity> GetServiceWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session);
		/// <summary>
		/// Get collection of all serviceEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of serviceEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<ServiceEntity> GetServiceWhereEqual(string propertyName, object expValue, bool loadRelation, string session);
		/// <summary>
		/// Function to validate a ServiceEntity before it's saved.
		/// </summary>
		/// <param name="serviceEntity">ServiceEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the ServiceEntity was deleted successfully, the same ServiceEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		bool Validate(ServiceEntity service);
	} 
	/// <summary>
	/// The <c>IStore</c> business contract to process StoreEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public interface IStore
	{
		/// <summary>
		/// Function to save a StoreEntity to the database.
		/// </summary>
		/// <param name="storeEntity">StoreEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the StoreEntity was saved successfully, the same StoreEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		StoreEntity Save(StoreEntity storeEntity, string session);
		/// <summary>
		/// Function to delete a StoreEntity from database.
		/// </summary>
		/// <param name="storeEntity">StoreEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the StoreEntity was deleted successfully, the same StoreEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		StoreEntity Delete(StoreEntity storeEntity, string session);
		/// <summary>
		/// Get an specific storeEntity
		/// </summary>
		/// <param name="id">id of the StoreEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		StoreEntity GetStore(int id, bool loadRelation, string session);
		/// <summary>
		/// Get collection of all storeEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all StoreEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<StoreEntity> GetAllStore(bool loadRelation, string session);
		/// <summary>
		/// Get collection of all storeEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of storeEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<StoreEntity> GetStoreWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session);
		/// <summary>
		/// Get collection of all storeEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of storeEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<StoreEntity> GetStoreWhereEqual(string propertyName, object expValue, bool loadRelation, string session);
		/// <summary>
		/// Function to validate a StoreEntity before it's saved.
		/// </summary>
		/// <param name="storeEntity">StoreEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the StoreEntity was deleted successfully, the same StoreEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		bool Validate(StoreEntity store);
	} 
	/// <summary>
	/// The <c>IUserActionClientData</c> business contract to process UserActionClientDataEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public interface IUserActionClientData
	{
		/// <summary>
		/// Function to save a UserActionClientDataEntity to the database.
		/// </summary>
		/// <param name="userActionClientDataEntity">UserActionClientDataEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the UserActionClientDataEntity was saved successfully, the same UserActionClientDataEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		UserActionClientDataEntity Save(UserActionClientDataEntity userActionClientDataEntity, string session);
		/// <summary>
		/// Function to delete a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="userActionClientDataEntity">UserActionClientDataEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the UserActionClientDataEntity was deleted successfully, the same UserActionClientDataEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		UserActionClientDataEntity Delete(UserActionClientDataEntity userActionClientDataEntity, string session);
		/// <summary>
		/// Get an specific userActionClientDataEntity
		/// </summary>
		/// <param name="id">id of the UserActionClientDataEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		UserActionClientDataEntity GetUserActionClientData(int id, bool loadRelation, string session);
		/// <summary>
		/// Get collection of all userActionClientDataEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all UserActionClientDataEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<UserActionClientDataEntity> GetAllUserActionClientData(bool loadRelation, string session);
		/// <summary>
		/// Get collection of all userActionClientDataEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of userActionClientDataEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<UserActionClientDataEntity> GetUserActionClientDataWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session);
		/// <summary>
		/// Get collection of all userActionClientDataEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of userActionClientDataEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		Collection<UserActionClientDataEntity> GetUserActionClientDataWhereEqual(string propertyName, object expValue, bool loadRelation, string session);
		/// <summary>
		/// Function to validate a UserActionClientDataEntity before it's saved.
		/// </summary>
		/// <param name="userActionClientDataEntity">UserActionClientDataEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the UserActionClientDataEntity was deleted successfully, the same UserActionClientDataEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		bool Validate(UserActionClientDataEntity userActionClientData);
	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Save", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategorySaveRequest
	{
		public  ICategorySaveRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CategoryEntity categoryEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  ICategorySaveRequest(CategoryEntity categoryEntity, string session)
		{
			this.categoryEntity = categoryEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="SaveResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategorySaveResponse
	{
		public  ICategorySaveResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CategoryEntity SaveResult; 
		public  ICategorySaveResponse(CategoryEntity SaveResult)
		{
			this.SaveResult = SaveResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Delete", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryDeleteRequest
	{
		public  ICategoryDeleteRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CategoryEntity categoryEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  ICategoryDeleteRequest(CategoryEntity categoryEntity, string session)
		{
			this.categoryEntity = categoryEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="DeleteResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryDeleteResponse
	{
		public  ICategoryDeleteResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CategoryEntity DeleteResult; 
		public  ICategoryDeleteResponse(CategoryEntity DeleteResult)
		{
			this.DeleteResult = DeleteResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCategory", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryGetCategoryRequest
	{
		public  ICategoryGetCategoryRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public int id; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=1)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=2)]
		public string session; 
		public  ICategoryGetCategoryRequest(int id, bool loadRelation, string session)
		{
			this.id = id;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCategoryResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryGetCategoryResponse
	{
		public  ICategoryGetCategoryResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CategoryEntity GetCategoryResult; 
		public  ICategoryGetCategoryResponse(CategoryEntity GetCategoryResult)
		{
			this.GetCategoryResult = GetCategoryResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllCategory", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryGetAllCategoryRequest
	{
		public  ICategoryGetAllCategoryRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  ICategoryGetAllCategoryRequest(bool loadRelation, string session)
		{
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllCategoryResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryGetAllCategoryResponse
	{
		public  ICategoryGetAllCategoryResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<CategoryEntity> GetAllCategoryResult; 
		public  ICategoryGetAllCategoryResponse(Collection<CategoryEntity> GetAllCategoryResult)
		{
			this.GetAllCategoryResult = GetAllCategoryResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCategoryWhere", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryGetCategoryWhereRequest
	{
		public  ICategoryGetCategoryWhereRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=3)]
		public OperatorType operatorType; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=4)]
		public string session; 
		public  ICategoryGetCategoryWhereRequest(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.operatorType = operatorType;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCategoryWhereResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryGetCategoryWhereResponse
	{
		public  ICategoryGetCategoryWhereResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<CategoryEntity> GetCategoryWhereResult; 
		public  ICategoryGetCategoryWhereResponse(Collection<CategoryEntity> GetCategoryWhereResult)
		{
			this.GetCategoryWhereResult = GetCategoryWhereResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCategoryWhereEqual", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryGetCategoryWhereEqualRequest
	{
		public  ICategoryGetCategoryWhereEqualRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=3)]
		public string session; 
		public  ICategoryGetCategoryWhereEqualRequest(string propertyName, object expValue, bool loadRelation, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCategoryWhereEqualResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryGetCategoryWhereEqualResponse
	{
		public  ICategoryGetCategoryWhereEqualResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<CategoryEntity> GetCategoryWhereEqualResult; 
		public  ICategoryGetCategoryWhereEqualResponse(Collection<CategoryEntity> GetCategoryWhereEqualResult)
		{
			this.GetCategoryWhereEqualResult = GetCategoryWhereEqualResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Validate", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryValidateRequest
	{
		public  ICategoryValidateRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CategoryEntity category; 
		public  ICategoryValidateRequest(CategoryEntity category)
		{
			this.category = category;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="ValidateResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICategoryValidateResponse
	{
		public  ICategoryValidateResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool ValidateResult; 
		public  ICategoryValidateResponse(bool ValidateResult)
		{
			this.ValidateResult = ValidateResult;
		} 

	} 
	public class CategoryClient: Microsoft.Tools.ServiceModel.CFClientBase<ICategory>, ICategory
	{
		private static EndpointAddress EndpointAddress = new EndpointAddress("http://utnEmallserver/ICategory"); 
		public  CategoryClient():base(CreateDefaultBinding(), EndpointAddress) 
		{
		} 

		public  CategoryClient(Binding binding, EndpointAddress remoteAddress):base(binding, remoteAddress) 
		{
		} 

		public static Binding CreateDefaultBinding()
		{
			CustomBinding binding = new CustomBinding();

			binding.Elements.AddRange(new BindingElement[]{new TextMessageEncodingBindingElement(MessageVersion.Soap11, Text.Encoding.UTF8), new HttpTransportBindingElement()});
			return binding;
		} 

		private ICategorySaveResponse Save(ICategorySaveRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICategory/Save";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICategory/SaveResponse";
			info.ResponseIsWrapped = true;

			ICategorySaveResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICategorySaveRequest,UtnEmall.Client.ServiceAccessLayer.ICategorySaveResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to save a CategoryEntity to the database.
		/// </summary>
		/// <param name="categoryEntity">CategoryEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CategoryEntity was saved successfully, the same CategoryEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CategoryEntity Save(CategoryEntity categoryEntity, string session)
		{
			ICategorySaveRequest request = new ICategorySaveRequest(categoryEntity, session);
			ICategorySaveResponse response = this.Save(request);
			return response.SaveResult;
		} 

		private ICategoryDeleteResponse Delete(ICategoryDeleteRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICategory/Delete";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICategory/DeleteResponse";
			info.ResponseIsWrapped = true;

			ICategoryDeleteResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICategoryDeleteRequest,UtnEmall.Client.ServiceAccessLayer.ICategoryDeleteResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to delete a CategoryEntity from database.
		/// </summary>
		/// <param name="categoryEntity">CategoryEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CategoryEntity was deleted successfully, the same CategoryEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CategoryEntity Delete(CategoryEntity categoryEntity, string session)
		{
			ICategoryDeleteRequest request = new ICategoryDeleteRequest(categoryEntity, session);
			ICategoryDeleteResponse response = this.Delete(request);
			return response.DeleteResult;
		} 

		private ICategoryGetCategoryResponse GetCategory(ICategoryGetCategoryRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICategory/GetCategory";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICategory/GetCategoryResponse";
			info.ResponseIsWrapped = true;

			ICategoryGetCategoryResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICategoryGetCategoryRequest,UtnEmall.Client.ServiceAccessLayer.ICategoryGetCategoryResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get an specific categoryEntity
		/// </summary>
		/// <param name="id">id of the CategoryEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CategoryEntity GetCategory(int id, bool loadRelation, string session)
		{
			ICategoryGetCategoryRequest request = new ICategoryGetCategoryRequest(id, loadRelation, session);
			ICategoryGetCategoryResponse response = this.GetCategory(request);
			return response.GetCategoryResult;
		} 

		private ICategoryGetAllCategoryResponse GetAllCategory(ICategoryGetAllCategoryRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICategory/GetAllCategory";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICategory/GetAllCategoryResponse";
			info.ResponseIsWrapped = true;

			ICategoryGetAllCategoryResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICategoryGetAllCategoryRequest,UtnEmall.Client.ServiceAccessLayer.ICategoryGetAllCategoryResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all categoryEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all CategoryEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetAllCategory(bool loadRelation, string session)
		{
			ICategoryGetAllCategoryRequest request = new ICategoryGetAllCategoryRequest(loadRelation, session);
			ICategoryGetAllCategoryResponse response = this.GetAllCategory(request);
			return response.GetAllCategoryResult;
		} 

		private ICategoryGetCategoryWhereResponse GetCategoryWhere(ICategoryGetCategoryWhereRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICategory/GetCategoryWhere";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICategory/GetCategoryWhereResponse";
			info.ResponseIsWrapped = true;

			ICategoryGetCategoryWhereResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICategoryGetCategoryWhereRequest,UtnEmall.Client.ServiceAccessLayer.ICategoryGetCategoryWhereResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all categoryEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of categoryEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetCategoryWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			ICategoryGetCategoryWhereRequest request = new ICategoryGetCategoryWhereRequest(propertyName, expValue, loadRelation, operatorType, session);
			ICategoryGetCategoryWhereResponse response = this.GetCategoryWhere(request);
			return response.GetCategoryWhereResult;
		} 

		private ICategoryGetCategoryWhereEqualResponse GetCategoryWhereEqual(ICategoryGetCategoryWhereEqualRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICategory/GetCategoryWhereEqual";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICategory/GetCategoryWhereEqualResponse";
			info.ResponseIsWrapped = true;

			ICategoryGetCategoryWhereEqualResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICategoryGetCategoryWhereEqualRequest,UtnEmall.Client.ServiceAccessLayer.ICategoryGetCategoryWhereEqualResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all categoryEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of categoryEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetCategoryWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			ICategoryGetCategoryWhereEqualRequest request = new ICategoryGetCategoryWhereEqualRequest(propertyName, expValue, loadRelation, session);
			ICategoryGetCategoryWhereEqualResponse response = this.GetCategoryWhereEqual(request);
			return response.GetCategoryWhereEqualResult;
		} 

		private ICategoryValidateResponse Validate(ICategoryValidateRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICategory/Validate";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICategory/ValidateResponse";
			info.ResponseIsWrapped = true;

			ICategoryValidateResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICategoryValidateRequest,UtnEmall.Client.ServiceAccessLayer.ICategoryValidateResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to validate a CategoryEntity before it's saved.
		/// </summary>
		/// <param name="categoryEntity">CategoryEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CategoryEntity was deleted successfully, the same CategoryEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public bool Validate(CategoryEntity category)
		{
			ICategoryValidateRequest request = new ICategoryValidateRequest(category);
			ICategoryValidateResponse response = this.Validate(request);
			return response.ValidateResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Save", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerSaveRequest
	{
		public  ICustomerSaveRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CustomerEntity customerEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  ICustomerSaveRequest(CustomerEntity customerEntity, string session)
		{
			this.customerEntity = customerEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="SaveResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerSaveResponse
	{
		public  ICustomerSaveResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CustomerEntity SaveResult; 
		public  ICustomerSaveResponse(CustomerEntity SaveResult)
		{
			this.SaveResult = SaveResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Delete", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerDeleteRequest
	{
		public  ICustomerDeleteRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CustomerEntity customerEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  ICustomerDeleteRequest(CustomerEntity customerEntity, string session)
		{
			this.customerEntity = customerEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="DeleteResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerDeleteResponse
	{
		public  ICustomerDeleteResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CustomerEntity DeleteResult; 
		public  ICustomerDeleteResponse(CustomerEntity DeleteResult)
		{
			this.DeleteResult = DeleteResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCustomer", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerGetCustomerRequest
	{
		public  ICustomerGetCustomerRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public int id; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=1)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=2)]
		public string session; 
		public  ICustomerGetCustomerRequest(int id, bool loadRelation, string session)
		{
			this.id = id;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCustomerResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerGetCustomerResponse
	{
		public  ICustomerGetCustomerResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CustomerEntity GetCustomerResult; 
		public  ICustomerGetCustomerResponse(CustomerEntity GetCustomerResult)
		{
			this.GetCustomerResult = GetCustomerResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllCustomer", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerGetAllCustomerRequest
	{
		public  ICustomerGetAllCustomerRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  ICustomerGetAllCustomerRequest(bool loadRelation, string session)
		{
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllCustomerResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerGetAllCustomerResponse
	{
		public  ICustomerGetAllCustomerResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<CustomerEntity> GetAllCustomerResult; 
		public  ICustomerGetAllCustomerResponse(Collection<CustomerEntity> GetAllCustomerResult)
		{
			this.GetAllCustomerResult = GetAllCustomerResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCustomerWhere", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerGetCustomerWhereRequest
	{
		public  ICustomerGetCustomerWhereRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=3)]
		public OperatorType operatorType; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=4)]
		public string session; 
		public  ICustomerGetCustomerWhereRequest(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.operatorType = operatorType;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCustomerWhereResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerGetCustomerWhereResponse
	{
		public  ICustomerGetCustomerWhereResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<CustomerEntity> GetCustomerWhereResult; 
		public  ICustomerGetCustomerWhereResponse(Collection<CustomerEntity> GetCustomerWhereResult)
		{
			this.GetCustomerWhereResult = GetCustomerWhereResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCustomerWhereEqual", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerGetCustomerWhereEqualRequest
	{
		public  ICustomerGetCustomerWhereEqualRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=3)]
		public string session; 
		public  ICustomerGetCustomerWhereEqualRequest(string propertyName, object expValue, bool loadRelation, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetCustomerWhereEqualResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerGetCustomerWhereEqualResponse
	{
		public  ICustomerGetCustomerWhereEqualResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<CustomerEntity> GetCustomerWhereEqualResult; 
		public  ICustomerGetCustomerWhereEqualResponse(Collection<CustomerEntity> GetCustomerWhereEqualResult)
		{
			this.GetCustomerWhereEqualResult = GetCustomerWhereEqualResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Validate", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerValidateRequest
	{
		public  ICustomerValidateRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public CustomerEntity customer; 
		public  ICustomerValidateRequest(CustomerEntity customer)
		{
			this.customer = customer;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="ValidateResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class ICustomerValidateResponse
	{
		public  ICustomerValidateResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool ValidateResult; 
		public  ICustomerValidateResponse(bool ValidateResult)
		{
			this.ValidateResult = ValidateResult;
		} 

	} 
	public class CustomerClient: Microsoft.Tools.ServiceModel.CFClientBase<ICustomer>, ICustomer
	{
		private static EndpointAddress EndpointAddress = new EndpointAddress("http://utnEmallserver/ICustomer"); 
		public  CustomerClient():base(CreateDefaultBinding(), EndpointAddress) 
		{
		} 

		public  CustomerClient(Binding binding, EndpointAddress remoteAddress):base(binding, remoteAddress) 
		{
		} 

		public static Binding CreateDefaultBinding()
		{
			CustomBinding binding = new CustomBinding();

			binding.Elements.AddRange(new BindingElement[]{new TextMessageEncodingBindingElement(MessageVersion.Soap11, Text.Encoding.UTF8), new HttpTransportBindingElement()});
			return binding;
		} 

		private ICustomerSaveResponse Save(ICustomerSaveRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICustomer/Save";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICustomer/SaveResponse";
			info.ResponseIsWrapped = true;

			ICustomerSaveResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICustomerSaveRequest,UtnEmall.Client.ServiceAccessLayer.ICustomerSaveResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to save a CustomerEntity to the database.
		/// </summary>
		/// <param name="customerEntity">CustomerEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CustomerEntity was saved successfully, the same CustomerEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CustomerEntity Save(CustomerEntity customerEntity, string session)
		{
			ICustomerSaveRequest request = new ICustomerSaveRequest(customerEntity, session);
			ICustomerSaveResponse response = this.Save(request);
			return response.SaveResult;
		} 

		private ICustomerDeleteResponse Delete(ICustomerDeleteRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICustomer/Delete";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICustomer/DeleteResponse";
			info.ResponseIsWrapped = true;

			ICustomerDeleteResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICustomerDeleteRequest,UtnEmall.Client.ServiceAccessLayer.ICustomerDeleteResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to delete a CustomerEntity from database.
		/// </summary>
		/// <param name="customerEntity">CustomerEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CustomerEntity was deleted successfully, the same CustomerEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CustomerEntity Delete(CustomerEntity customerEntity, string session)
		{
			ICustomerDeleteRequest request = new ICustomerDeleteRequest(customerEntity, session);
			ICustomerDeleteResponse response = this.Delete(request);
			return response.DeleteResult;
		} 

		private ICustomerGetCustomerResponse GetCustomer(ICustomerGetCustomerRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICustomer/GetCustomer";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICustomer/GetCustomerResponse";
			info.ResponseIsWrapped = true;

			ICustomerGetCustomerResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICustomerGetCustomerRequest,UtnEmall.Client.ServiceAccessLayer.ICustomerGetCustomerResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get an specific customerEntity
		/// </summary>
		/// <param name="id">id of the CustomerEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CustomerEntity GetCustomer(int id, bool loadRelation, string session)
		{
			ICustomerGetCustomerRequest request = new ICustomerGetCustomerRequest(id, loadRelation, session);
			ICustomerGetCustomerResponse response = this.GetCustomer(request);
			return response.GetCustomerResult;
		} 

		private ICustomerGetAllCustomerResponse GetAllCustomer(ICustomerGetAllCustomerRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICustomer/GetAllCustomer";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICustomer/GetAllCustomerResponse";
			info.ResponseIsWrapped = true;

			ICustomerGetAllCustomerResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICustomerGetAllCustomerRequest,UtnEmall.Client.ServiceAccessLayer.ICustomerGetAllCustomerResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all customerEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all CustomerEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetAllCustomer(bool loadRelation, string session)
		{
			ICustomerGetAllCustomerRequest request = new ICustomerGetAllCustomerRequest(loadRelation, session);
			ICustomerGetAllCustomerResponse response = this.GetAllCustomer(request);
			return response.GetAllCustomerResult;
		} 

		private ICustomerGetCustomerWhereResponse GetCustomerWhere(ICustomerGetCustomerWhereRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICustomer/GetCustomerWhere";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICustomer/GetCustomerWhereResponse";
			info.ResponseIsWrapped = true;

			ICustomerGetCustomerWhereResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICustomerGetCustomerWhereRequest,UtnEmall.Client.ServiceAccessLayer.ICustomerGetCustomerWhereResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all customerEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of customerEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetCustomerWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			ICustomerGetCustomerWhereRequest request = new ICustomerGetCustomerWhereRequest(propertyName, expValue, loadRelation, operatorType, session);
			ICustomerGetCustomerWhereResponse response = this.GetCustomerWhere(request);
			return response.GetCustomerWhereResult;
		} 

		private ICustomerGetCustomerWhereEqualResponse GetCustomerWhereEqual(ICustomerGetCustomerWhereEqualRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICustomer/GetCustomerWhereEqual";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICustomer/GetCustomerWhereEqualResponse";
			info.ResponseIsWrapped = true;

			ICustomerGetCustomerWhereEqualResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICustomerGetCustomerWhereEqualRequest,UtnEmall.Client.ServiceAccessLayer.ICustomerGetCustomerWhereEqualResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all customerEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of customerEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetCustomerWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			ICustomerGetCustomerWhereEqualRequest request = new ICustomerGetCustomerWhereEqualRequest(propertyName, expValue, loadRelation, session);
			ICustomerGetCustomerWhereEqualResponse response = this.GetCustomerWhereEqual(request);
			return response.GetCustomerWhereEqualResult;
		} 

		private ICustomerValidateResponse Validate(ICustomerValidateRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/ICustomer/Validate";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/ICustomer/ValidateResponse";
			info.ResponseIsWrapped = true;

			ICustomerValidateResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.ICustomerValidateRequest,UtnEmall.Client.ServiceAccessLayer.ICustomerValidateResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to validate a CustomerEntity before it's saved.
		/// </summary>
		/// <param name="customerEntity">CustomerEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CustomerEntity was deleted successfully, the same CustomerEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public bool Validate(CustomerEntity customer)
		{
			ICustomerValidateRequest request = new ICustomerValidateRequest(customer);
			ICustomerValidateResponse response = this.Validate(request);
			return response.ValidateResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Save", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceSaveRequest
	{
		public  IServiceSaveRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public ServiceEntity serviceEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IServiceSaveRequest(ServiceEntity serviceEntity, string session)
		{
			this.serviceEntity = serviceEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="SaveResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceSaveResponse
	{
		public  IServiceSaveResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public ServiceEntity SaveResult; 
		public  IServiceSaveResponse(ServiceEntity SaveResult)
		{
			this.SaveResult = SaveResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Delete", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceDeleteRequest
	{
		public  IServiceDeleteRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public ServiceEntity serviceEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IServiceDeleteRequest(ServiceEntity serviceEntity, string session)
		{
			this.serviceEntity = serviceEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="DeleteResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceDeleteResponse
	{
		public  IServiceDeleteResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public ServiceEntity DeleteResult; 
		public  IServiceDeleteResponse(ServiceEntity DeleteResult)
		{
			this.DeleteResult = DeleteResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetService", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceGetServiceRequest
	{
		public  IServiceGetServiceRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public int id; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=1)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=2)]
		public string session; 
		public  IServiceGetServiceRequest(int id, bool loadRelation, string session)
		{
			this.id = id;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetServiceResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceGetServiceResponse
	{
		public  IServiceGetServiceResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public ServiceEntity GetServiceResult; 
		public  IServiceGetServiceResponse(ServiceEntity GetServiceResult)
		{
			this.GetServiceResult = GetServiceResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllService", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceGetAllServiceRequest
	{
		public  IServiceGetAllServiceRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IServiceGetAllServiceRequest(bool loadRelation, string session)
		{
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllServiceResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceGetAllServiceResponse
	{
		public  IServiceGetAllServiceResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<ServiceEntity> GetAllServiceResult; 
		public  IServiceGetAllServiceResponse(Collection<ServiceEntity> GetAllServiceResult)
		{
			this.GetAllServiceResult = GetAllServiceResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetServiceWhere", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceGetServiceWhereRequest
	{
		public  IServiceGetServiceWhereRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=3)]
		public OperatorType operatorType; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=4)]
		public string session; 
		public  IServiceGetServiceWhereRequest(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.operatorType = operatorType;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetServiceWhereResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceGetServiceWhereResponse
	{
		public  IServiceGetServiceWhereResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<ServiceEntity> GetServiceWhereResult; 
		public  IServiceGetServiceWhereResponse(Collection<ServiceEntity> GetServiceWhereResult)
		{
			this.GetServiceWhereResult = GetServiceWhereResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetServiceWhereEqual", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceGetServiceWhereEqualRequest
	{
		public  IServiceGetServiceWhereEqualRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=3)]
		public string session; 
		public  IServiceGetServiceWhereEqualRequest(string propertyName, object expValue, bool loadRelation, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetServiceWhereEqualResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceGetServiceWhereEqualResponse
	{
		public  IServiceGetServiceWhereEqualResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<ServiceEntity> GetServiceWhereEqualResult; 
		public  IServiceGetServiceWhereEqualResponse(Collection<ServiceEntity> GetServiceWhereEqualResult)
		{
			this.GetServiceWhereEqualResult = GetServiceWhereEqualResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Validate", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceValidateRequest
	{
		public  IServiceValidateRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public ServiceEntity service; 
		public  IServiceValidateRequest(ServiceEntity service)
		{
			this.service = service;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="ValidateResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IServiceValidateResponse
	{
		public  IServiceValidateResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool ValidateResult; 
		public  IServiceValidateResponse(bool ValidateResult)
		{
			this.ValidateResult = ValidateResult;
		} 

	} 
	public class ServiceClient: Microsoft.Tools.ServiceModel.CFClientBase<IService>, IService
	{
		private static EndpointAddress EndpointAddress = new EndpointAddress("http://utnEmallserver/IService"); 
		public  ServiceClient():base(CreateDefaultBinding(), EndpointAddress) 
		{
		} 

		public  ServiceClient(Binding binding, EndpointAddress remoteAddress):base(binding, remoteAddress) 
		{
		} 

		public static Binding CreateDefaultBinding()
		{
			CustomBinding binding = new CustomBinding();

			binding.Elements.AddRange(new BindingElement[]{new TextMessageEncodingBindingElement(MessageVersion.Soap11, Text.Encoding.UTF8), new HttpTransportBindingElement()});
			return binding;
		} 

		private IServiceSaveResponse Save(IServiceSaveRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IService/Save";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IService/SaveResponse";
			info.ResponseIsWrapped = true;

			IServiceSaveResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IServiceSaveRequest,UtnEmall.Client.ServiceAccessLayer.IServiceSaveResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to save a ServiceEntity to the database.
		/// </summary>
		/// <param name="serviceEntity">ServiceEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the ServiceEntity was saved successfully, the same ServiceEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public ServiceEntity Save(ServiceEntity serviceEntity, string session)
		{
			IServiceSaveRequest request = new IServiceSaveRequest(serviceEntity, session);
			IServiceSaveResponse response = this.Save(request);
			return response.SaveResult;
		} 

		private IServiceDeleteResponse Delete(IServiceDeleteRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IService/Delete";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IService/DeleteResponse";
			info.ResponseIsWrapped = true;

			IServiceDeleteResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IServiceDeleteRequest,UtnEmall.Client.ServiceAccessLayer.IServiceDeleteResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to delete a ServiceEntity from database.
		/// </summary>
		/// <param name="serviceEntity">ServiceEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the ServiceEntity was deleted successfully, the same ServiceEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public ServiceEntity Delete(ServiceEntity serviceEntity, string session)
		{
			IServiceDeleteRequest request = new IServiceDeleteRequest(serviceEntity, session);
			IServiceDeleteResponse response = this.Delete(request);
			return response.DeleteResult;
		} 

		private IServiceGetServiceResponse GetService(IServiceGetServiceRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IService/GetService";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IService/GetServiceResponse";
			info.ResponseIsWrapped = true;

			IServiceGetServiceResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IServiceGetServiceRequest,UtnEmall.Client.ServiceAccessLayer.IServiceGetServiceResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get an specific serviceEntity
		/// </summary>
		/// <param name="id">id of the ServiceEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public ServiceEntity GetService(int id, bool loadRelation, string session)
		{
			IServiceGetServiceRequest request = new IServiceGetServiceRequest(id, loadRelation, session);
			IServiceGetServiceResponse response = this.GetService(request);
			return response.GetServiceResult;
		} 

		private IServiceGetAllServiceResponse GetAllService(IServiceGetAllServiceRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IService/GetAllService";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IService/GetAllServiceResponse";
			info.ResponseIsWrapped = true;

			IServiceGetAllServiceResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IServiceGetAllServiceRequest,UtnEmall.Client.ServiceAccessLayer.IServiceGetAllServiceResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all serviceEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all ServiceEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetAllService(bool loadRelation, string session)
		{
			IServiceGetAllServiceRequest request = new IServiceGetAllServiceRequest(loadRelation, session);
			IServiceGetAllServiceResponse response = this.GetAllService(request);
			return response.GetAllServiceResult;
		} 

		private IServiceGetServiceWhereResponse GetServiceWhere(IServiceGetServiceWhereRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IService/GetServiceWhere";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IService/GetServiceWhereResponse";
			info.ResponseIsWrapped = true;

			IServiceGetServiceWhereResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IServiceGetServiceWhereRequest,UtnEmall.Client.ServiceAccessLayer.IServiceGetServiceWhereResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all serviceEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of serviceEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetServiceWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			IServiceGetServiceWhereRequest request = new IServiceGetServiceWhereRequest(propertyName, expValue, loadRelation, operatorType, session);
			IServiceGetServiceWhereResponse response = this.GetServiceWhere(request);
			return response.GetServiceWhereResult;
		} 

		private IServiceGetServiceWhereEqualResponse GetServiceWhereEqual(IServiceGetServiceWhereEqualRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IService/GetServiceWhereEqual";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IService/GetServiceWhereEqualResponse";
			info.ResponseIsWrapped = true;

			IServiceGetServiceWhereEqualResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IServiceGetServiceWhereEqualRequest,UtnEmall.Client.ServiceAccessLayer.IServiceGetServiceWhereEqualResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all serviceEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of serviceEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetServiceWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			IServiceGetServiceWhereEqualRequest request = new IServiceGetServiceWhereEqualRequest(propertyName, expValue, loadRelation, session);
			IServiceGetServiceWhereEqualResponse response = this.GetServiceWhereEqual(request);
			return response.GetServiceWhereEqualResult;
		} 

		private IServiceValidateResponse Validate(IServiceValidateRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IService/Validate";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IService/ValidateResponse";
			info.ResponseIsWrapped = true;

			IServiceValidateResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IServiceValidateRequest,UtnEmall.Client.ServiceAccessLayer.IServiceValidateResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to validate a ServiceEntity before it's saved.
		/// </summary>
		/// <param name="serviceEntity">ServiceEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the ServiceEntity was deleted successfully, the same ServiceEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public bool Validate(ServiceEntity service)
		{
			IServiceValidateRequest request = new IServiceValidateRequest(service);
			IServiceValidateResponse response = this.Validate(request);
			return response.ValidateResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Save", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreSaveRequest
	{
		public  IStoreSaveRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public StoreEntity storeEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IStoreSaveRequest(StoreEntity storeEntity, string session)
		{
			this.storeEntity = storeEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="SaveResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreSaveResponse
	{
		public  IStoreSaveResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public StoreEntity SaveResult; 
		public  IStoreSaveResponse(StoreEntity SaveResult)
		{
			this.SaveResult = SaveResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Delete", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreDeleteRequest
	{
		public  IStoreDeleteRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public StoreEntity storeEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IStoreDeleteRequest(StoreEntity storeEntity, string session)
		{
			this.storeEntity = storeEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="DeleteResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreDeleteResponse
	{
		public  IStoreDeleteResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public StoreEntity DeleteResult; 
		public  IStoreDeleteResponse(StoreEntity DeleteResult)
		{
			this.DeleteResult = DeleteResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetStore", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreGetStoreRequest
	{
		public  IStoreGetStoreRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public int id; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=1)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=2)]
		public string session; 
		public  IStoreGetStoreRequest(int id, bool loadRelation, string session)
		{
			this.id = id;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetStoreResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreGetStoreResponse
	{
		public  IStoreGetStoreResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public StoreEntity GetStoreResult; 
		public  IStoreGetStoreResponse(StoreEntity GetStoreResult)
		{
			this.GetStoreResult = GetStoreResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllStore", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreGetAllStoreRequest
	{
		public  IStoreGetAllStoreRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IStoreGetAllStoreRequest(bool loadRelation, string session)
		{
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllStoreResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreGetAllStoreResponse
	{
		public  IStoreGetAllStoreResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<StoreEntity> GetAllStoreResult; 
		public  IStoreGetAllStoreResponse(Collection<StoreEntity> GetAllStoreResult)
		{
			this.GetAllStoreResult = GetAllStoreResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetStoreWhere", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreGetStoreWhereRequest
	{
		public  IStoreGetStoreWhereRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=3)]
		public OperatorType operatorType; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=4)]
		public string session; 
		public  IStoreGetStoreWhereRequest(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.operatorType = operatorType;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetStoreWhereResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreGetStoreWhereResponse
	{
		public  IStoreGetStoreWhereResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<StoreEntity> GetStoreWhereResult; 
		public  IStoreGetStoreWhereResponse(Collection<StoreEntity> GetStoreWhereResult)
		{
			this.GetStoreWhereResult = GetStoreWhereResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetStoreWhereEqual", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreGetStoreWhereEqualRequest
	{
		public  IStoreGetStoreWhereEqualRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=3)]
		public string session; 
		public  IStoreGetStoreWhereEqualRequest(string propertyName, object expValue, bool loadRelation, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetStoreWhereEqualResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreGetStoreWhereEqualResponse
	{
		public  IStoreGetStoreWhereEqualResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<StoreEntity> GetStoreWhereEqualResult; 
		public  IStoreGetStoreWhereEqualResponse(Collection<StoreEntity> GetStoreWhereEqualResult)
		{
			this.GetStoreWhereEqualResult = GetStoreWhereEqualResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Validate", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreValidateRequest
	{
		public  IStoreValidateRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public StoreEntity store; 
		public  IStoreValidateRequest(StoreEntity store)
		{
			this.store = store;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="ValidateResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IStoreValidateResponse
	{
		public  IStoreValidateResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool ValidateResult; 
		public  IStoreValidateResponse(bool ValidateResult)
		{
			this.ValidateResult = ValidateResult;
		} 

	} 
	public class StoreClient: Microsoft.Tools.ServiceModel.CFClientBase<IStore>, IStore
	{
		private static EndpointAddress EndpointAddress = new EndpointAddress("http://utnEmallserver/IStore"); 
		public  StoreClient():base(CreateDefaultBinding(), EndpointAddress) 
		{
		} 

		public  StoreClient(Binding binding, EndpointAddress remoteAddress):base(binding, remoteAddress) 
		{
		} 

		public static Binding CreateDefaultBinding()
		{
			CustomBinding binding = new CustomBinding();

			binding.Elements.AddRange(new BindingElement[]{new TextMessageEncodingBindingElement(MessageVersion.Soap11, Text.Encoding.UTF8), new HttpTransportBindingElement()});
			return binding;
		} 

		private IStoreSaveResponse Save(IStoreSaveRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IStore/Save";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IStore/SaveResponse";
			info.ResponseIsWrapped = true;

			IStoreSaveResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IStoreSaveRequest,UtnEmall.Client.ServiceAccessLayer.IStoreSaveResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to save a StoreEntity to the database.
		/// </summary>
		/// <param name="storeEntity">StoreEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the StoreEntity was saved successfully, the same StoreEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public StoreEntity Save(StoreEntity storeEntity, string session)
		{
			IStoreSaveRequest request = new IStoreSaveRequest(storeEntity, session);
			IStoreSaveResponse response = this.Save(request);
			return response.SaveResult;
		} 

		private IStoreDeleteResponse Delete(IStoreDeleteRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IStore/Delete";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IStore/DeleteResponse";
			info.ResponseIsWrapped = true;

			IStoreDeleteResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IStoreDeleteRequest,UtnEmall.Client.ServiceAccessLayer.IStoreDeleteResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to delete a StoreEntity from database.
		/// </summary>
		/// <param name="storeEntity">StoreEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the StoreEntity was deleted successfully, the same StoreEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public StoreEntity Delete(StoreEntity storeEntity, string session)
		{
			IStoreDeleteRequest request = new IStoreDeleteRequest(storeEntity, session);
			IStoreDeleteResponse response = this.Delete(request);
			return response.DeleteResult;
		} 

		private IStoreGetStoreResponse GetStore(IStoreGetStoreRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IStore/GetStore";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IStore/GetStoreResponse";
			info.ResponseIsWrapped = true;

			IStoreGetStoreResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IStoreGetStoreRequest,UtnEmall.Client.ServiceAccessLayer.IStoreGetStoreResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get an specific storeEntity
		/// </summary>
		/// <param name="id">id of the StoreEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public StoreEntity GetStore(int id, bool loadRelation, string session)
		{
			IStoreGetStoreRequest request = new IStoreGetStoreRequest(id, loadRelation, session);
			IStoreGetStoreResponse response = this.GetStore(request);
			return response.GetStoreResult;
		} 

		private IStoreGetAllStoreResponse GetAllStore(IStoreGetAllStoreRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IStore/GetAllStore";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IStore/GetAllStoreResponse";
			info.ResponseIsWrapped = true;

			IStoreGetAllStoreResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IStoreGetAllStoreRequest,UtnEmall.Client.ServiceAccessLayer.IStoreGetAllStoreResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all storeEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all StoreEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetAllStore(bool loadRelation, string session)
		{
			IStoreGetAllStoreRequest request = new IStoreGetAllStoreRequest(loadRelation, session);
			IStoreGetAllStoreResponse response = this.GetAllStore(request);
			return response.GetAllStoreResult;
		} 

		private IStoreGetStoreWhereResponse GetStoreWhere(IStoreGetStoreWhereRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IStore/GetStoreWhere";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IStore/GetStoreWhereResponse";
			info.ResponseIsWrapped = true;

			IStoreGetStoreWhereResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IStoreGetStoreWhereRequest,UtnEmall.Client.ServiceAccessLayer.IStoreGetStoreWhereResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all storeEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of storeEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetStoreWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			IStoreGetStoreWhereRequest request = new IStoreGetStoreWhereRequest(propertyName, expValue, loadRelation, operatorType, session);
			IStoreGetStoreWhereResponse response = this.GetStoreWhere(request);
			return response.GetStoreWhereResult;
		} 

		private IStoreGetStoreWhereEqualResponse GetStoreWhereEqual(IStoreGetStoreWhereEqualRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IStore/GetStoreWhereEqual";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IStore/GetStoreWhereEqualResponse";
			info.ResponseIsWrapped = true;

			IStoreGetStoreWhereEqualResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IStoreGetStoreWhereEqualRequest,UtnEmall.Client.ServiceAccessLayer.IStoreGetStoreWhereEqualResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all storeEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of storeEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetStoreWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			IStoreGetStoreWhereEqualRequest request = new IStoreGetStoreWhereEqualRequest(propertyName, expValue, loadRelation, session);
			IStoreGetStoreWhereEqualResponse response = this.GetStoreWhereEqual(request);
			return response.GetStoreWhereEqualResult;
		} 

		private IStoreValidateResponse Validate(IStoreValidateRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IStore/Validate";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IStore/ValidateResponse";
			info.ResponseIsWrapped = true;

			IStoreValidateResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IStoreValidateRequest,UtnEmall.Client.ServiceAccessLayer.IStoreValidateResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to validate a StoreEntity before it's saved.
		/// </summary>
		/// <param name="storeEntity">StoreEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the StoreEntity was deleted successfully, the same StoreEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public bool Validate(StoreEntity store)
		{
			IStoreValidateRequest request = new IStoreValidateRequest(store);
			IStoreValidateResponse response = this.Validate(request);
			return response.ValidateResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Save", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataSaveRequest
	{
		public  IUserActionClientDataSaveRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public UserActionClientDataEntity userActionClientDataEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IUserActionClientDataSaveRequest(UserActionClientDataEntity userActionClientDataEntity, string session)
		{
			this.userActionClientDataEntity = userActionClientDataEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="SaveResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataSaveResponse
	{
		public  IUserActionClientDataSaveResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public UserActionClientDataEntity SaveResult; 
		public  IUserActionClientDataSaveResponse(UserActionClientDataEntity SaveResult)
		{
			this.SaveResult = SaveResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Delete", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataDeleteRequest
	{
		public  IUserActionClientDataDeleteRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public UserActionClientDataEntity userActionClientDataEntity; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IUserActionClientDataDeleteRequest(UserActionClientDataEntity userActionClientDataEntity, string session)
		{
			this.userActionClientDataEntity = userActionClientDataEntity;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="DeleteResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataDeleteResponse
	{
		public  IUserActionClientDataDeleteResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public UserActionClientDataEntity DeleteResult; 
		public  IUserActionClientDataDeleteResponse(UserActionClientDataEntity DeleteResult)
		{
			this.DeleteResult = DeleteResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetUserActionClientData", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataGetUserActionClientDataRequest
	{
		public  IUserActionClientDataGetUserActionClientDataRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public int id; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=1)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=2)]
		public string session; 
		public  IUserActionClientDataGetUserActionClientDataRequest(int id, bool loadRelation, string session)
		{
			this.id = id;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetUserActionClientDataResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataGetUserActionClientDataResponse
	{
		public  IUserActionClientDataGetUserActionClientDataResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public UserActionClientDataEntity GetUserActionClientDataResult; 
		public  IUserActionClientDataGetUserActionClientDataResponse(UserActionClientDataEntity GetUserActionClientDataResult)
		{
			this.GetUserActionClientDataResult = GetUserActionClientDataResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllUserActionClientData", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataGetAllUserActionClientDataRequest
	{
		public  IUserActionClientDataGetAllUserActionClientDataRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public string session; 
		public  IUserActionClientDataGetAllUserActionClientDataRequest(bool loadRelation, string session)
		{
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetAllUserActionClientDataResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataGetAllUserActionClientDataResponse
	{
		public  IUserActionClientDataGetAllUserActionClientDataResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<UserActionClientDataEntity> GetAllUserActionClientDataResult; 
		public  IUserActionClientDataGetAllUserActionClientDataResponse(Collection<UserActionClientDataEntity> GetAllUserActionClientDataResult)
		{
			this.GetAllUserActionClientDataResult = GetAllUserActionClientDataResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetUserActionClientDataWhere", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataGetUserActionClientDataWhereRequest
	{
		public  IUserActionClientDataGetUserActionClientDataWhereRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=3)]
		public OperatorType operatorType; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=4)]
		public string session; 
		public  IUserActionClientDataGetUserActionClientDataWhereRequest(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.operatorType = operatorType;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetUserActionClientDataWhereResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataGetUserActionClientDataWhereResponse
	{
		public  IUserActionClientDataGetUserActionClientDataWhereResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhereResult; 
		public  IUserActionClientDataGetUserActionClientDataWhereResponse(Collection<UserActionClientDataEntity> GetUserActionClientDataWhereResult)
		{
			this.GetUserActionClientDataWhereResult = GetUserActionClientDataWhereResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetUserActionClientDataWhereEqual", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataGetUserActionClientDataWhereEqualRequest
	{
		public  IUserActionClientDataGetUserActionClientDataWhereEqualRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public string propertyName; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=1)]
		public object expValue; 
		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=2)]
		public bool loadRelation; 
		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=3)]
		public string session; 
		public  IUserActionClientDataGetUserActionClientDataWhereEqualRequest(string propertyName, object expValue, bool loadRelation, string session)
		{
			this.propertyName = propertyName;
			this.expValue = expValue;
			this.loadRelation = loadRelation;
			this.session = session;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="GetUserActionClientDataWhereEqualResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataGetUserActionClientDataWhereEqualResponse
	{
		public  IUserActionClientDataGetUserActionClientDataWhereEqualResponse()
		{
		} 

		[System.Xml.Serialization.XmlArrayItem(Namespace = "UtnEmall.Server.EntityModel")]

		[System.Xml.Serialization.XmlArrayAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhereEqualResult; 
		public  IUserActionClientDataGetUserActionClientDataWhereEqualResponse(Collection<UserActionClientDataEntity> GetUserActionClientDataWhereEqualResult)
		{
			this.GetUserActionClientDataWhereEqualResult = GetUserActionClientDataWhereEqualResult;
		} 

	} 
	[System.Xml.Serialization.XmlRootAttribute(ElementName="Validate", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataValidateRequest
	{
		public  IUserActionClientDataValidateRequest()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Namespace="http://tempuri.org/", Order=0)]
		public UserActionClientDataEntity userActionClientData; 
		public  IUserActionClientDataValidateRequest(UserActionClientDataEntity userActionClientData)
		{
			this.userActionClientData = userActionClientData;
		} 

	} 

	[System.Xml.Serialization.XmlRootAttribute(ElementName="ValidateResponse", Namespace="http://tempuri.org/"), System.CodeDom.Compiler.GeneratedCodeAttribute("LayerD Proxy Generator", "1.0.0.0")]
	public class IUserActionClientDataValidateResponse
	{
		public  IUserActionClientDataValidateResponse()
		{
		} 

		[System.Xml.Serialization.XmlElementAttribute(Namespace="http://tempuri.org/", Order=0)]
		public bool ValidateResult; 
		public  IUserActionClientDataValidateResponse(bool ValidateResult)
		{
			this.ValidateResult = ValidateResult;
		} 

	} 
	public class UserActionClientDataClient: Microsoft.Tools.ServiceModel.CFClientBase<IUserActionClientData>, IUserActionClientData
	{
		private static EndpointAddress EndpointAddress = new EndpointAddress("http://utnEmallserver/IUserActionClientData"); 
		public  UserActionClientDataClient():base(CreateDefaultBinding(), EndpointAddress) 
		{
		} 

		public  UserActionClientDataClient(Binding binding, EndpointAddress remoteAddress):base(binding, remoteAddress) 
		{
		} 

		public static Binding CreateDefaultBinding()
		{
			CustomBinding binding = new CustomBinding();

			binding.Elements.AddRange(new BindingElement[]{new TextMessageEncodingBindingElement(MessageVersion.Soap11, Text.Encoding.UTF8), new HttpTransportBindingElement()});
			return binding;
		} 

		private IUserActionClientDataSaveResponse Save(IUserActionClientDataSaveRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IUserActionClientData/Save";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IUserActionClientData/SaveResponse";
			info.ResponseIsWrapped = true;

			IUserActionClientDataSaveResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataSaveRequest,UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataSaveResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to save a UserActionClientDataEntity to the database.
		/// </summary>
		/// <param name="userActionClientDataEntity">UserActionClientDataEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the UserActionClientDataEntity was saved successfully, the same UserActionClientDataEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public UserActionClientDataEntity Save(UserActionClientDataEntity userActionClientDataEntity, string session)
		{
			IUserActionClientDataSaveRequest request = new IUserActionClientDataSaveRequest(userActionClientDataEntity, session);
			IUserActionClientDataSaveResponse response = this.Save(request);
			return response.SaveResult;
		} 

		private IUserActionClientDataDeleteResponse Delete(IUserActionClientDataDeleteRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IUserActionClientData/Delete";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IUserActionClientData/DeleteResponse";
			info.ResponseIsWrapped = true;

			IUserActionClientDataDeleteResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataDeleteRequest,UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataDeleteResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to delete a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="userActionClientDataEntity">UserActionClientDataEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the UserActionClientDataEntity was deleted successfully, the same UserActionClientDataEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public UserActionClientDataEntity Delete(UserActionClientDataEntity userActionClientDataEntity, string session)
		{
			IUserActionClientDataDeleteRequest request = new IUserActionClientDataDeleteRequest(userActionClientDataEntity, session);
			IUserActionClientDataDeleteResponse response = this.Delete(request);
			return response.DeleteResult;
		} 

		private IUserActionClientDataGetUserActionClientDataResponse GetUserActionClientData(IUserActionClientDataGetUserActionClientDataRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IUserActionClientData/GetUserActionClientData";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IUserActionClientData/GetUserActionClientDataResponse";
			info.ResponseIsWrapped = true;

			IUserActionClientDataGetUserActionClientDataResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataGetUserActionClientDataRequest,UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataGetUserActionClientDataResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get an specific userActionClientDataEntity
		/// </summary>
		/// <param name="id">id of the UserActionClientDataEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>A UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public UserActionClientDataEntity GetUserActionClientData(int id, bool loadRelation, string session)
		{
			IUserActionClientDataGetUserActionClientDataRequest request = new IUserActionClientDataGetUserActionClientDataRequest(id, loadRelation, session);
			IUserActionClientDataGetUserActionClientDataResponse response = this.GetUserActionClientData(request);
			return response.GetUserActionClientDataResult;
		} 

		private IUserActionClientDataGetAllUserActionClientDataResponse GetAllUserActionClientData(IUserActionClientDataGetAllUserActionClientDataRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IUserActionClientData/GetAllUserActionClientData";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IUserActionClientData/GetAllUserActionClientDataResponse";
			info.ResponseIsWrapped = true;

			IUserActionClientDataGetAllUserActionClientDataResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataGetAllUserActionClientDataRequest,UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataGetAllUserActionClientDataResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of all UserActionClientDataEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetAllUserActionClientData(bool loadRelation, string session)
		{
			IUserActionClientDataGetAllUserActionClientDataRequest request = new IUserActionClientDataGetAllUserActionClientDataRequest(loadRelation, session);
			IUserActionClientDataGetAllUserActionClientDataResponse response = this.GetAllUserActionClientData(request);
			return response.GetAllUserActionClientDataResult;
		} 

		private IUserActionClientDataGetUserActionClientDataWhereResponse GetUserActionClientDataWhere(IUserActionClientDataGetUserActionClientDataWhereRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IUserActionClientData/GetUserActionClientDataWhere";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IUserActionClientData/GetUserActionClientDataWhereResponse";
			info.ResponseIsWrapped = true;

			IUserActionClientDataGetUserActionClientDataWhereResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataGetUserActionClientDataWhereRequest,UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataGetUserActionClientDataWhereResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of userActionClientDataEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			IUserActionClientDataGetUserActionClientDataWhereRequest request = new IUserActionClientDataGetUserActionClientDataWhereRequest(propertyName, expValue, loadRelation, operatorType, session);
			IUserActionClientDataGetUserActionClientDataWhereResponse response = this.GetUserActionClientDataWhere(request);
			return response.GetUserActionClientDataWhereResult;
		} 

		private IUserActionClientDataGetUserActionClientDataWhereEqualResponse GetUserActionClientDataWhereEqual(IUserActionClientDataGetUserActionClientDataWhereEqualRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IUserActionClientData/GetUserActionClientDataWhereEqual";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IUserActionClientData/GetUserActionClientDataWhereEqualResponse";
			info.ResponseIsWrapped = true;

			IUserActionClientDataGetUserActionClientDataWhereEqualResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataGetUserActionClientDataWhereEqualRequest,UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataGetUserActionClientDataWhereEqualResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of userActionClientDataEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>Collection of UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			IUserActionClientDataGetUserActionClientDataWhereEqualRequest request = new IUserActionClientDataGetUserActionClientDataWhereEqualRequest(propertyName, expValue, loadRelation, session);
			IUserActionClientDataGetUserActionClientDataWhereEqualResponse response = this.GetUserActionClientDataWhereEqual(request);
			return response.GetUserActionClientDataWhereEqualResult;
		} 

		private IUserActionClientDataValidateResponse Validate(IUserActionClientDataValidateRequest request)
		{
			Microsoft.Tools.ServiceModel.CFInvokeInfo info = new Microsoft.Tools.ServiceModel.CFInvokeInfo();
			info.Action = "http://tempuri.org/IUserActionClientData/Validate";
			info.RequestIsWrapped = true;
			info.ReplyAction = "http://tempuri.org/IUserActionClientData/ValidateResponse";
			info.ResponseIsWrapped = true;

			IUserActionClientDataValidateResponse retVal = this.Invoke<UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataValidateRequest,UtnEmall.Client.ServiceAccessLayer.IUserActionClientDataValidateResponse>(info, request);
			return retVal;
		} 

		/// <summary>
		/// Function to validate a UserActionClientDataEntity before it's saved.
		/// </summary>
		/// <param name="userActionClientDataEntity">UserActionClientDataEntity to validate</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the UserActionClientDataEntity was deleted successfully, the same UserActionClientDataEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public bool Validate(UserActionClientDataEntity userActionClientData)
		{
			IUserActionClientDataValidateRequest request = new IUserActionClientDataValidateRequest(userActionClientData);
			IUserActionClientDataValidateResponse response = this.Validate(request);
			return response.ValidateResult;
		} 

	} 
} 

namespace UtnEmall.Client.SmartClientLayer
{
	public class CategorySmart
	{
		private Category _local; 
		private CategoryClient _remote; 
		private static LastSyncEntity _lastSync; 
		private Category Local
		{
			get 
			{
				if (_local == null)
				{
					_local = new Category();
				}
				return _local;
			}
		} 

		private CategoryClient Remote
		{
			get 
			{
				if (_remote == null)
				{
					_remote = new CategoryClient(Connection.ServerBinding, new EndpointAddress(Connection.ServerUri.AbsoluteUri + "Category"));
				}
				return _remote;
			}
		} 

		private static LastSyncEntity LastSync
		{
			get 
			{
				if (_lastSync == null)
				{
					LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
					Collection<LastSyncEntity> results = lastSyncDataAccess.LoadWhere(LastSyncEntity.DBEntityName, "UtnEmall.Client.Entity.Category", false, OperatorType.Equal);

					if (results.Count > 0)
					{
						_lastSync = results[0];
					}
					else 
					{
						_lastSync = new LastSyncEntity();
						_lastSync.EntityName = "UtnEmall.Client.Entity.Category";
						_lastSync.LastTimestamp = Connection.MinDate;
					}
				}
				return _lastSync;
			}
			set 
			{
				_lastSync.LastTimestamp = value.LastTimestamp;
				_lastSync.EntityName = value.EntityName;
				LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
				lastSyncDataAccess.Save(_lastSync);
			}
		} 

		public void CheckIsSynchronized()
		{
			// if we didn't synchronized since the last disconnection
			if (CategorySmart.LastSync.LastTimestamp <= Connection.LastTimeDisconnected)
			{
				// get the remote entities that are not saved on the device
				Collection<CategoryEntity> remoteUpdates = Remote.GetCategoryWhere(CategoryEntity.DBTimestamp, CategorySmart.LastSync.LastTimestamp, false, OperatorType.Greater, Connection.Session);
				// save the remote entities on the device

				foreach(CategoryEntity  remoteEntity in remoteUpdates)
				{
					Local.Save(remoteEntity);
				}

				LastSyncEntity now = new LastSyncEntity();
				now.LastTimestamp = System.DateTime.Now;
				now.EntityName = "UtnEmall.Client.Entity.Category";
				CategorySmart.LastSync = now;
			}
		} 

		public CategoryEntity Save(CategoryEntity categoryEntity, string session)
		{
			try 
			{
				CategoryEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Save(categoryEntity, session);
				}
				else 
				{
					result = Local.Save(categoryEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public CategoryEntity Delete(CategoryEntity categoryEntity, string session)
		{
			try 
			{
				CategoryEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Delete(categoryEntity, session);
				}
				else 
				{
					result = Local.Delete(categoryEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public CategoryEntity GetCategory(int id, bool loadRelation, string session)
		{
			try 
			{
				CategoryEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetCategory(id, loadRelation, session);
				}
				else 
				{
					result = Local.GetCategory(id, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<CategoryEntity> GetAllCategory(bool loadRelation, string session)
		{
			try 
			{
				Collection<CategoryEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetAllCategory(loadRelation, session);
				}
				else 
				{
					result = Local.GetAllCategory(loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<CategoryEntity> GetCategoryWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			try 
			{
				Collection<CategoryEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetCategoryWhere(propertyName, expValue, loadRelation, operatorType, session);
				}
				else 
				{
					result = Local.GetCategoryWhere(propertyName, expValue, loadRelation, operatorType);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<CategoryEntity> GetCategoryWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			try 
			{
				Collection<CategoryEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetCategoryWhereEqual(propertyName, expValue, loadRelation, session);
				}
				else 
				{
					result = Local.GetCategoryWhereEqual(propertyName, expValue, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public bool Validate(CategoryEntity category)
		{
			try 
			{
				bool result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Validate(category);
				}
				else 
				{
					result = Local.Validate(category);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

	} 
	public class CustomerSmart
	{
		private Customer _local; 
		private CustomerClient _remote; 
		private static LastSyncEntity _lastSync; 
		private Customer Local
		{
			get 
			{
				if (_local == null)
				{
					_local = new Customer();
				}
				return _local;
			}
		} 

		private CustomerClient Remote
		{
			get 
			{
				if (_remote == null)
				{
					_remote = new CustomerClient(Connection.ServerBinding, new EndpointAddress(Connection.ServerUri.AbsoluteUri + "Customer"));
				}
				return _remote;
			}
		} 

		private static LastSyncEntity LastSync
		{
			get 
			{
				if (_lastSync == null)
				{
					LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
					Collection<LastSyncEntity> results = lastSyncDataAccess.LoadWhere(LastSyncEntity.DBEntityName, "UtnEmall.Client.Entity.Customer", false, OperatorType.Equal);

					if (results.Count > 0)
					{
						_lastSync = results[0];
					}
					else 
					{
						_lastSync = new LastSyncEntity();
						_lastSync.EntityName = "UtnEmall.Client.Entity.Customer";
						_lastSync.LastTimestamp = Connection.MinDate;
					}
				}
				return _lastSync;
			}
			set 
			{
				_lastSync.LastTimestamp = value.LastTimestamp;
				_lastSync.EntityName = value.EntityName;
				LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
				lastSyncDataAccess.Save(_lastSync);
			}
		} 

		public void CheckIsSynchronized()
		{
			// if we didn't synchronized since the last disconnection
			if (CustomerSmart.LastSync.LastTimestamp <= Connection.LastTimeDisconnected)
			{
				// get the remote entities that are not saved on the device
				Collection<CustomerEntity> remoteUpdates = Remote.GetCustomerWhere(CustomerEntity.DBTimestamp, CustomerSmart.LastSync.LastTimestamp, false, OperatorType.Greater, Connection.Session);
				// save the remote entities on the device

				foreach(CustomerEntity  remoteEntity in remoteUpdates)
				{
					Local.Save(remoteEntity);
				}

				LastSyncEntity now = new LastSyncEntity();
				now.LastTimestamp = System.DateTime.Now;
				now.EntityName = "UtnEmall.Client.Entity.Customer";
				CustomerSmart.LastSync = now;
			}
		} 

		public CustomerEntity Save(CustomerEntity customerEntity, string session)
		{
			try 
			{
				CustomerEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Save(customerEntity, session);
				}
				else 
				{
					result = Local.Save(customerEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public CustomerEntity Delete(CustomerEntity customerEntity, string session)
		{
			try 
			{
				CustomerEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Delete(customerEntity, session);
				}
				else 
				{
					result = Local.Delete(customerEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public CustomerEntity GetCustomer(int id, bool loadRelation, string session)
		{
			try 
			{
				CustomerEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetCustomer(id, loadRelation, session);
				}
				else 
				{
					result = Local.GetCustomer(id, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<CustomerEntity> GetAllCustomer(bool loadRelation, string session)
		{
			try 
			{
				Collection<CustomerEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetAllCustomer(loadRelation, session);
				}
				else 
				{
					result = Local.GetAllCustomer(loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<CustomerEntity> GetCustomerWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			try 
			{
				Collection<CustomerEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetCustomerWhere(propertyName, expValue, loadRelation, operatorType, session);
				}
				else 
				{
					result = Local.GetCustomerWhere(propertyName, expValue, loadRelation, operatorType);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<CustomerEntity> GetCustomerWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			try 
			{
				Collection<CustomerEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetCustomerWhereEqual(propertyName, expValue, loadRelation, session);
				}
				else 
				{
					result = Local.GetCustomerWhereEqual(propertyName, expValue, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public bool Validate(CustomerEntity customer)
		{
			try 
			{
				bool result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Validate(customer);
				}
				else 
				{
					result = Local.Validate(customer);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

	} 
	public class ServiceSmart
	{
		private Service _local; 
		private ServiceClient _remote; 
		private static LastSyncEntity _lastSync; 
		private Service Local
		{
			get 
			{
				if (_local == null)
				{
					_local = new Service();
				}
				return _local;
			}
		} 

		private ServiceClient Remote
		{
			get 
			{
				if (_remote == null)
				{
					_remote = new ServiceClient(Connection.ServerBinding, new EndpointAddress(Connection.ServerUri.AbsoluteUri + "Service"));
				}
				return _remote;
			}
		} 

		private static LastSyncEntity LastSync
		{
			get 
			{
				if (_lastSync == null)
				{
					LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
					Collection<LastSyncEntity> results = lastSyncDataAccess.LoadWhere(LastSyncEntity.DBEntityName, "UtnEmall.Client.Entity.Service", false, OperatorType.Equal);

					if (results.Count > 0)
					{
						_lastSync = results[0];
					}
					else 
					{
						_lastSync = new LastSyncEntity();
						_lastSync.EntityName = "UtnEmall.Client.Entity.Service";
						_lastSync.LastTimestamp = Connection.MinDate;
					}
				}
				return _lastSync;
			}
			set 
			{
				_lastSync.LastTimestamp = value.LastTimestamp;
				_lastSync.EntityName = value.EntityName;
				LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
				lastSyncDataAccess.Save(_lastSync);
			}
		} 

		public void CheckIsSynchronized()
		{
			// if we didn't synchronized since the last disconnection
			if (ServiceSmart.LastSync.LastTimestamp <= Connection.LastTimeDisconnected)
			{
				// get the remote entities that are not saved on the device
				Collection<ServiceEntity> remoteUpdates = Remote.GetServiceWhere(ServiceEntity.DBTimestamp, ServiceSmart.LastSync.LastTimestamp, false, OperatorType.Greater, Connection.Session);
				// save the remote entities on the device

				foreach(ServiceEntity  remoteEntity in remoteUpdates)
				{
					Local.Save(remoteEntity);
				}

				LastSyncEntity now = new LastSyncEntity();
				now.LastTimestamp = System.DateTime.Now;
				now.EntityName = "UtnEmall.Client.Entity.Service";
				ServiceSmart.LastSync = now;
			}
		} 

		public ServiceEntity Save(ServiceEntity serviceEntity, string session)
		{
			try 
			{
				ServiceEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Save(serviceEntity, session);
				}
				else 
				{
					result = Local.Save(serviceEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public ServiceEntity Delete(ServiceEntity serviceEntity, string session)
		{
			try 
			{
				ServiceEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Delete(serviceEntity, session);
				}
				else 
				{
					result = Local.Delete(serviceEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public ServiceEntity GetService(int id, bool loadRelation, string session)
		{
			try 
			{
				ServiceEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetService(id, loadRelation, session);
				}
				else 
				{
					result = Local.GetService(id, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<ServiceEntity> GetAllService(bool loadRelation, string session)
		{
			try 
			{
				Collection<ServiceEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetAllService(loadRelation, session);
				}
				else 
				{
					result = Local.GetAllService(loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<ServiceEntity> GetServiceWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			try 
			{
				Collection<ServiceEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetServiceWhere(propertyName, expValue, loadRelation, operatorType, session);
				}
				else 
				{
					result = Local.GetServiceWhere(propertyName, expValue, loadRelation, operatorType);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<ServiceEntity> GetServiceWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			try 
			{
				Collection<ServiceEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetServiceWhereEqual(propertyName, expValue, loadRelation, session);
				}
				else 
				{
					result = Local.GetServiceWhereEqual(propertyName, expValue, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public bool Validate(ServiceEntity service)
		{
			try 
			{
				bool result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Validate(service);
				}
				else 
				{
					result = Local.Validate(service);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

	} 
	public class StoreSmart
	{
		private Store _local; 
		private StoreClient _remote; 
		private static LastSyncEntity _lastSync; 
		private Store Local
		{
			get 
			{
				if (_local == null)
				{
					_local = new Store();
				}
				return _local;
			}
		} 

		private StoreClient Remote
		{
			get 
			{
				if (_remote == null)
				{
					_remote = new StoreClient(Connection.ServerBinding, new EndpointAddress(Connection.ServerUri.AbsoluteUri + "Store"));
				}
				return _remote;
			}
		} 

		private static LastSyncEntity LastSync
		{
			get 
			{
				if (_lastSync == null)
				{
					LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
					Collection<LastSyncEntity> results = lastSyncDataAccess.LoadWhere(LastSyncEntity.DBEntityName, "UtnEmall.Client.Entity.Store", false, OperatorType.Equal);

					if (results.Count > 0)
					{
						_lastSync = results[0];
					}
					else 
					{
						_lastSync = new LastSyncEntity();
						_lastSync.EntityName = "UtnEmall.Client.Entity.Store";
						_lastSync.LastTimestamp = Connection.MinDate;
					}
				}
				return _lastSync;
			}
			set 
			{
				_lastSync.LastTimestamp = value.LastTimestamp;
				_lastSync.EntityName = value.EntityName;
				LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
				lastSyncDataAccess.Save(_lastSync);
			}
		} 

		public void CheckIsSynchronized()
		{
			// if we didn't synchronized since the last disconnection
			if (StoreSmart.LastSync.LastTimestamp <= Connection.LastTimeDisconnected)
			{
				// get the remote entities that are not saved on the device
				Collection<StoreEntity> remoteUpdates = Remote.GetStoreWhere(StoreEntity.DBTimestamp, StoreSmart.LastSync.LastTimestamp, false, OperatorType.Greater, Connection.Session);
				// save the remote entities on the device

				foreach(StoreEntity  remoteEntity in remoteUpdates)
				{
					Local.Save(remoteEntity);
				}

				LastSyncEntity now = new LastSyncEntity();
				now.LastTimestamp = System.DateTime.Now;
				now.EntityName = "UtnEmall.Client.Entity.Store";
				StoreSmart.LastSync = now;
			}
		} 

		public StoreEntity Save(StoreEntity storeEntity, string session)
		{
			try 
			{
				StoreEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Save(storeEntity, session);
				}
				else 
				{
					result = Local.Save(storeEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public StoreEntity Delete(StoreEntity storeEntity, string session)
		{
			try 
			{
				StoreEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Delete(storeEntity, session);
				}
				else 
				{
					result = Local.Delete(storeEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public StoreEntity GetStore(int id, bool loadRelation, string session)
		{
			try 
			{
				StoreEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetStore(id, loadRelation, session);
				}
				else 
				{
					result = Local.GetStore(id, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<StoreEntity> GetAllStore(bool loadRelation, string session)
		{
			try 
			{
				Collection<StoreEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetAllStore(loadRelation, session);
				}
				else 
				{
					result = Local.GetAllStore(loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<StoreEntity> GetStoreWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			try 
			{
				Collection<StoreEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetStoreWhere(propertyName, expValue, loadRelation, operatorType, session);
				}
				else 
				{
					result = Local.GetStoreWhere(propertyName, expValue, loadRelation, operatorType);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<StoreEntity> GetStoreWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			try 
			{
				Collection<StoreEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetStoreWhereEqual(propertyName, expValue, loadRelation, session);
				}
				else 
				{
					result = Local.GetStoreWhereEqual(propertyName, expValue, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public bool Validate(StoreEntity store)
		{
			try 
			{
				bool result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Validate(store);
				}
				else 
				{
					result = Local.Validate(store);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

	} 
	public class UserActionClientDataSmart
	{
		private UserActionClientData _local; 
		private UserActionClientDataClient _remote; 
		private static LastSyncEntity _lastSync; 
		private UserActionClientData Local
		{
			get 
			{
				if (_local == null)
				{
					_local = new UserActionClientData();
				}
				return _local;
			}
		} 

		private UserActionClientDataClient Remote
		{
			get 
			{
				if (_remote == null)
				{
					_remote = new UserActionClientDataClient(Connection.ServerBinding, new EndpointAddress(Connection.ServerUri.AbsoluteUri + "UserActionClientData"));
				}
				return _remote;
			}
		} 

		private static LastSyncEntity LastSync
		{
			get 
			{
				if (_lastSync == null)
				{
					LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
					Collection<LastSyncEntity> results = lastSyncDataAccess.LoadWhere(LastSyncEntity.DBEntityName, "UtnEmall.Client.Entity.UserActionClientData", false, OperatorType.Equal);

					if (results.Count > 0)
					{
						_lastSync = results[0];
					}
					else 
					{
						_lastSync = new LastSyncEntity();
						_lastSync.EntityName = "UtnEmall.Client.Entity.UserActionClientData";
						_lastSync.LastTimestamp = Connection.MinDate;
					}
				}
				return _lastSync;
			}
			set 
			{
				_lastSync.LastTimestamp = value.LastTimestamp;
				_lastSync.EntityName = value.EntityName;
				LastSyncDataAccess lastSyncDataAccess = new LastSyncDataAccess();
				lastSyncDataAccess.Save(_lastSync);
			}
		} 

		public void CheckIsSynchronized()
		{
			// if we didn't synchronized since the last disconnection
			if (UserActionClientDataSmart.LastSync.LastTimestamp <= Connection.LastTimeDisconnected)
			{
				// get the remote entities that are not saved on the device
				Collection<UserActionClientDataEntity> remoteUpdates = Remote.GetUserActionClientDataWhere(UserActionClientDataEntity.DBTimestamp, UserActionClientDataSmart.LastSync.LastTimestamp, false, OperatorType.Greater, Connection.Session);
				// save the remote entities on the device

				foreach(UserActionClientDataEntity  remoteEntity in remoteUpdates)
				{
					Local.Save(remoteEntity);
				}

				LastSyncEntity now = new LastSyncEntity();
				now.LastTimestamp = System.DateTime.Now;
				now.EntityName = "UtnEmall.Client.Entity.UserActionClientData";
				UserActionClientDataSmart.LastSync = now;
			}
		} 

		public UserActionClientDataEntity Save(UserActionClientDataEntity userActionClientDataEntity, string session)
		{
			try 
			{
				UserActionClientDataEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Save(userActionClientDataEntity, session);
				}
				else 
				{
					result = Local.Save(userActionClientDataEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public UserActionClientDataEntity Delete(UserActionClientDataEntity userActionClientDataEntity, string session)
		{
			try 
			{
				UserActionClientDataEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Delete(userActionClientDataEntity, session);
				}
				else 
				{
					result = Local.Delete(userActionClientDataEntity);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public UserActionClientDataEntity GetUserActionClientData(int id, bool loadRelation, string session)
		{
			try 
			{
				UserActionClientDataEntity result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetUserActionClientData(id, loadRelation, session);
				}
				else 
				{
					result = Local.GetUserActionClientData(id, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<UserActionClientDataEntity> GetAllUserActionClientData(bool loadRelation, string session)
		{
			try 
			{
				Collection<UserActionClientDataEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetAllUserActionClientData(loadRelation, session);
				}
				else 
				{
					result = Local.GetAllUserActionClientData(loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType, string session)
		{
			try 
			{
				Collection<UserActionClientDataEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetUserActionClientDataWhere(propertyName, expValue, loadRelation, operatorType, session);
				}
				else 
				{
					result = Local.GetUserActionClientDataWhere(propertyName, expValue, loadRelation, operatorType);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhereEqual(string propertyName, object expValue, bool loadRelation, string session)
		{
			try 
			{
				Collection<UserActionClientDataEntity> result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.GetUserActionClientDataWhereEqual(propertyName, expValue, loadRelation, session);
				}
				else 
				{
					result = Local.GetUserActionClientDataWhereEqual(propertyName, expValue, loadRelation);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

		public bool Validate(UserActionClientDataEntity userActionClientData)
		{
			try 
			{
				bool result;
				// if we are connected

				if (Connection.IsConnected)
				{
					CheckIsSynchronized();
					result = Remote.Validate(userActionClientData);
				}
				else 
				{
					result = Local.Validate(userActionClientData);
				}
				return result;
			}
			catch (UtnEmallDataAccessException dataAccessError)
			{
				throw new UtnEmallSmartLayerException(dataAccessError.Message, dataAccessError);
			}
			catch (UtnEmallBusinessLogicException businessLogicError)
			{
				throw new UtnEmallSmartLayerException(businessLogicError.Message, businessLogicError);
			}
			catch (CommunicationException communicationError)
			{
				throw new UtnEmallSmartLayerException(communicationError.Message, communicationError);
			}
		} 

	} 
} 

namespace UtnEmall.Client.BusinessLogic
{
	/// <summary>
	/// The <c>Category</c> implement business logic to process CategoryEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public class Category
	{
		private CategoryDataAccess categoryDataAccess; 
		/// <summary>
		/// The <c>Category</c> constructor
		/// </summary>
		public  Category()
		{
			categoryDataAccess = new CategoryDataAccess();
		} 

		/// <summary>
		/// Function to save a CategoryEntity to the database.
		/// </summary>
		/// <param name="categoryEntity">CategoryEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CategoryEntity was saved successfully, the same CategoryEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CategoryEntity Save(CategoryEntity categoryEntity)
		{
			if (categoryEntity == null)
			{
				throw new ArgumentException("The entity can't be null", "categoryEntity");
			}
			// Validate CategoryEntity
			if (!Validate(categoryEntity))
			{
				return categoryEntity;
			}
			try 
			{
				// Save categoryEntity using data access object
				categoryDataAccess.Save(categoryEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to delete a CategoryEntity from database.
		/// </summary>
		/// <param name="categoryEntity">CategoryEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CategoryEntity was deleted successfully, the same CategoryEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CategoryEntity Delete(CategoryEntity categoryEntity)
		{
			if (categoryEntity == null)
			{
				throw new ArgumentException("The argument can't be null", "categoryEntity");
			}
			try 
			{
				// Delete categoryEntity using data access object
				categoryDataAccess.Delete(categoryEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get an specific categoryEntity
		/// </summary>
		/// <param name="id">id of the CategoryEntity to load</param>
		/// <returns>A CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CategoryEntity GetCategory(int id)
		{
			return GetCategory(id, true);
		} 

		/// <summary>
		/// Get an specific categoryEntity
		/// </summary>
		/// <param name="id">id of the CategoryEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>A CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="categoryEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CategoryEntity GetCategory(int id, bool loadRelation)
		{
			try 
			{
				return categoryDataAccess.Load(id, loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all categoryEntity
		/// </summary>
		/// <returns>Collection of all CategoryEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetAllCategory()
		{
			return GetAllCategory(true);
		} 

		/// <summary>
		/// Get collection of all categoryEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of all CategoryEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetAllCategory(bool loadRelation)
		{
			try 
			{
				return categoryDataAccess.LoadAll(loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all categoryEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of categoryEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetCategoryWhere(string propertyName, object expValue, OperatorType operatorType)
		{
			return GetCategoryWhere(propertyName, expValue, true, operatorType);
		} 

		/// <summary>
		/// Get collection of all categoryEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of categoryEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetCategoryWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			try 
			{
				return categoryDataAccess.LoadWhere(propertyName, expValue, loadRelation, operatorType);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all categoryEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of categoryEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetCategoryWhereEqual(string propertyName, object expValue)
		{
			return GetCategoryWhere(propertyName, expValue, true, OperatorType.Equal);
		} 

		/// <summary>
		/// Get collection of all categoryEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of categoryEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of CategoryEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CategoryEntity> GetCategoryWhereEqual(string propertyName, object expValue, bool loadRelation)
		{
			try 
			{
				return GetCategoryWhere(propertyName, expValue, loadRelation, OperatorType.Equal);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to validate a CategoryEntity .
		/// </summary>
		/// <param name="category">CategoryEntity to validate</param>
		/// <returns>true</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="category"/> is null.
		/// </exception>
		public bool Validate(CategoryEntity category)
		{
			bool result = true;

			if (category == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Check entity data
			if (String.IsNullOrEmpty(category.Description))
			{
				category.Errors.Add(new Error("Description", "Description", "Description can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(category.Name))
			{
				category.Errors.Add(new Error("Name", "Name", "Name can't be empty"));
				result = false;
			}
			if (category.Name != null)
			{
				Collection<CategoryEntity> listOfEquals = categoryDataAccess.LoadWhere(CategoryEntity.DBName, category.Name, false, OperatorType.Equal);

				if (listOfEquals.Count > 0 && listOfEquals[0].Id != category.Id)
				{
					category.Errors.Add(new Error("Name", "Name", "Duplicated name for category"));
					result = false;
				}
			}
			return result;
		} 

	} 
	/// <summary>
	/// The <c>Customer</c> implement business logic to process CustomerEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public class Customer
	{
		private CustomerDataAccess customerDataAccess; 
		/// <summary>
		/// The <c>Customer</c> constructor
		/// </summary>
		public  Customer()
		{
			customerDataAccess = new CustomerDataAccess();
		} 

		/// <summary>
		/// Function to save a CustomerEntity to the database.
		/// </summary>
		/// <param name="customerEntity">CustomerEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CustomerEntity was saved successfully, the same CustomerEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CustomerEntity Save(CustomerEntity customerEntity)
		{
			if (customerEntity == null)
			{
				throw new ArgumentException("The entity can't be null", "customerEntity");
			}
			// Validate CustomerEntity
			if (!Validate(customerEntity))
			{
				return customerEntity;
			}
			try 
			{
				// Save customerEntity using data access object
				customerDataAccess.Save(customerEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to delete a CustomerEntity from database.
		/// </summary>
		/// <param name="customerEntity">CustomerEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the CustomerEntity was deleted successfully, the same CustomerEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CustomerEntity Delete(CustomerEntity customerEntity)
		{
			if (customerEntity == null)
			{
				throw new ArgumentException("The argument can't be null", "customerEntity");
			}
			try 
			{
				// Delete customerEntity using data access object
				customerDataAccess.Delete(customerEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get an specific customerEntity
		/// </summary>
		/// <param name="id">id of the CustomerEntity to load</param>
		/// <returns>A CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CustomerEntity GetCustomer(int id)
		{
			return GetCustomer(id, true);
		} 

		/// <summary>
		/// Get an specific customerEntity
		/// </summary>
		/// <param name="id">id of the CustomerEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>A CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customerEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public CustomerEntity GetCustomer(int id, bool loadRelation)
		{
			try 
			{
				return customerDataAccess.Load(id, loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all customerEntity
		/// </summary>
		/// <returns>Collection of all CustomerEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetAllCustomer()
		{
			return GetAllCustomer(true);
		} 

		/// <summary>
		/// Get collection of all customerEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of all CustomerEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetAllCustomer(bool loadRelation)
		{
			try 
			{
				return customerDataAccess.LoadAll(loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all customerEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of customerEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetCustomerWhere(string propertyName, object expValue, OperatorType operatorType)
		{
			return GetCustomerWhere(propertyName, expValue, true, operatorType);
		} 

		/// <summary>
		/// Get collection of all customerEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of customerEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetCustomerWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			try 
			{
				return customerDataAccess.LoadWhere(propertyName, expValue, loadRelation, operatorType);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all customerEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of customerEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetCustomerWhereEqual(string propertyName, object expValue)
		{
			return GetCustomerWhere(propertyName, expValue, true, OperatorType.Equal);
		} 

		/// <summary>
		/// Get collection of all customerEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of customerEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of CustomerEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<CustomerEntity> GetCustomerWhereEqual(string propertyName, object expValue, bool loadRelation)
		{
			try 
			{
				return GetCustomerWhere(propertyName, expValue, loadRelation, OperatorType.Equal);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to validate a CustomerEntity .
		/// </summary>
		/// <param name="customer">CustomerEntity to validate</param>
		/// <returns>true</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="customer"/> is null.
		/// </exception>
		public bool Validate(CustomerEntity customer)
		{
			bool result = true;

			if (customer == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Check entity data
			if (String.IsNullOrEmpty(customer.Name))
			{
				customer.Errors.Add(new Error("Name", "Name", "Name can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(customer.Surname))
			{
				customer.Errors.Add(new Error("Surname", "Surname", "Surname can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(customer.Address))
			{
				customer.Errors.Add(new Error("Address", "Address", "Address can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(customer.PhoneNumber))
			{
				customer.Errors.Add(new Error("PhoneNumber", "PhoneNumber", "Phone Number can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(customer.UserName))
			{
				customer.Errors.Add(new Error("UserName", "UserName", "UserName can't be empty"));
				result = false;
			}
			if (customer.UserName != null)
			{
				Collection<CustomerEntity> listOfEquals = customerDataAccess.LoadWhere(CustomerEntity.DBUserName, customer.UserName, false, OperatorType.Equal);

				if (listOfEquals.Count > 0 && listOfEquals[0].Id != customer.Id)
				{
					customer.Errors.Add(new Error("UserName", "UserName", "Duplicated userName"));
					result = false;
				}
			}
			if (String.IsNullOrEmpty(customer.Password))
			{
				customer.Errors.Add(new Error("Password", "Password", "Password can't be empty"));
				result = false;
			}

			if (customer.Preferences == null)
			{
				customer.Errors.Add(new Error("Preferences", "Preferences", "Preferences can't be empty"));
				result = false;
			}
			if (customer.DeviceProfile == null)
			{
				customer.Errors.Add(new Error("DeviceProfile", "DeviceProfile", "Device Profile can't be null"));
				result = false;
			}
			return result;
		} 

	} 
	/// <summary>
	/// The <c>Service</c> implement business logic to process ServiceEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public class Service
	{
		private ServiceDataAccess serviceDataAccess; 
		/// <summary>
		/// The <c>Service</c> constructor
		/// </summary>
		public  Service()
		{
			serviceDataAccess = new ServiceDataAccess();
		} 

		/// <summary>
		/// Function to save a ServiceEntity to the database.
		/// </summary>
		/// <param name="serviceEntity">ServiceEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the ServiceEntity was saved successfully, the same ServiceEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public ServiceEntity Save(ServiceEntity serviceEntity)
		{
			if (serviceEntity == null)
			{
				throw new ArgumentException("The entity can't be null", "serviceEntity");
			}
			// Validate ServiceEntity
			if (!Validate(serviceEntity))
			{
				return serviceEntity;
			}
			try 
			{
				// Save serviceEntity using data access object
				serviceDataAccess.Save(serviceEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to delete a ServiceEntity from database.
		/// </summary>
		/// <param name="serviceEntity">ServiceEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the ServiceEntity was deleted successfully, the same ServiceEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public ServiceEntity Delete(ServiceEntity serviceEntity)
		{
			if (serviceEntity == null)
			{
				throw new ArgumentException("The argument can't be null", "serviceEntity");
			}
			try 
			{
				// Delete serviceEntity using data access object
				serviceDataAccess.Delete(serviceEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get an specific serviceEntity
		/// </summary>
		/// <param name="id">id of the ServiceEntity to load</param>
		/// <returns>A ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public ServiceEntity GetService(int id)
		{
			return GetService(id, true);
		} 

		/// <summary>
		/// Get an specific serviceEntity
		/// </summary>
		/// <param name="id">id of the ServiceEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>A ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="serviceEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public ServiceEntity GetService(int id, bool loadRelation)
		{
			try 
			{
				return serviceDataAccess.Load(id, loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all serviceEntity
		/// </summary>
		/// <returns>Collection of all ServiceEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetAllService()
		{
			return GetAllService(true);
		} 

		/// <summary>
		/// Get collection of all serviceEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of all ServiceEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetAllService(bool loadRelation)
		{
			try 
			{
				return serviceDataAccess.LoadAll(loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all serviceEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of serviceEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetServiceWhere(string propertyName, object expValue, OperatorType operatorType)
		{
			return GetServiceWhere(propertyName, expValue, true, operatorType);
		} 

		/// <summary>
		/// Get collection of all serviceEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of serviceEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetServiceWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			try 
			{
				return serviceDataAccess.LoadWhere(propertyName, expValue, loadRelation, operatorType);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all serviceEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of serviceEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetServiceWhereEqual(string propertyName, object expValue)
		{
			return GetServiceWhere(propertyName, expValue, true, OperatorType.Equal);
		} 

		/// <summary>
		/// Get collection of all serviceEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of serviceEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of ServiceEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<ServiceEntity> GetServiceWhereEqual(string propertyName, object expValue, bool loadRelation)
		{
			try 
			{
				return GetServiceWhere(propertyName, expValue, loadRelation, OperatorType.Equal);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to validate a ServiceEntity .
		/// </summary>
		/// <param name="service">ServiceEntity to validate</param>
		/// <returns>true</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="service"/> is null.
		/// </exception>
		public bool Validate(ServiceEntity service)
		{
			bool result = true;

			if (service == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Check entity data
			if (String.IsNullOrEmpty(service.Name))
			{
				service.Errors.Add(new Error("Name", "Name", "Name can't be empty"));
				result = false;
			}
			if (service.Name != null)
			{
				Collection<ServiceEntity> listOfEquals = serviceDataAccess.LoadWhere(ServiceEntity.DBName, service.Name, false, OperatorType.Equal);

				if (listOfEquals.Count > 0 && listOfEquals[0].Id != service.Id)
				{
					service.Errors.Add(new Error("Name", "Name", "A service with that name already exists"));
					result = false;
				}
			}
			if (String.IsNullOrEmpty(service.Description))
			{
				service.Errors.Add(new Error("Description", "Description", "Description can't be empty"));
				result = false;
			}
			// Rules::CollectionNonEmpty(ServiceCategory, "ServiceCategory can't be empty");
			// Rules::PropertyCollection(ServiceCategory, ServiceCategory)
			// {
			// Rules::PropertyNotNull(Category, "Category can't be empty");
			// };

			if (service.Store != null)
			{
				foreach(ServiceCategoryEntity  serviceCategory in service.ServiceCategory)
				{
					CategoryEntity categoryService = serviceCategory.Category;
					bool isCategoryOfTheStore = false;
					foreach(StoreCategoryEntity  storeCategory in service.Store.StoreCategory)
					{
						CategoryEntity categoryStore = storeCategory.Category;
						if (categoryService.Id == categoryStore.Id)
						{
							isCategoryOfTheStore = true;
						}
					}

					result = isCategoryOfTheStore;
					service.Errors.Add(new Error(categoryService.Name, "Service Category", categoryService.Name + "is not a category of the store"));
				}
			}
			if (service.StartDate == null)
			{
				service.Errors.Add(new Error("StartDate", "StartDate", "Start date can't be null"));
				result = false;
			}

			if (service.StopDate < service.StartDate)
			{
				service.Errors.Add(new Error("StopDate", "StopDate", "Stop date can't be lower than start date"));
				result = false;
			}
			if (service.StopDate == null)
			{
				service.Errors.Add(new Error("StopDate", "StopDate", "Stop date can't be null"));
				result = false;
			}
			return result;
		} 

	} 
	/// <summary>
	/// The <c>Store</c> implement business logic to process StoreEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public class Store
	{
		private StoreDataAccess storeDataAccess; 
		/// <summary>
		/// The <c>Store</c> constructor
		/// </summary>
		public  Store()
		{
			storeDataAccess = new StoreDataAccess();
		} 

		/// <summary>
		/// Function to save a StoreEntity to the database.
		/// </summary>
		/// <param name="storeEntity">StoreEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the StoreEntity was saved successfully, the same StoreEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public StoreEntity Save(StoreEntity storeEntity)
		{
			if (storeEntity == null)
			{
				throw new ArgumentException("The entity can't be null", "storeEntity");
			}
			// Validate StoreEntity
			if (!Validate(storeEntity))
			{
				return storeEntity;
			}
			try 
			{
				// Save storeEntity using data access object
				storeDataAccess.Save(storeEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to delete a StoreEntity from database.
		/// </summary>
		/// <param name="storeEntity">StoreEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the StoreEntity was deleted successfully, the same StoreEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public StoreEntity Delete(StoreEntity storeEntity)
		{
			if (storeEntity == null)
			{
				throw new ArgumentException("The argument can't be null", "storeEntity");
			}
			try 
			{
				// Delete storeEntity using data access object
				storeDataAccess.Delete(storeEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get an specific storeEntity
		/// </summary>
		/// <param name="id">id of the StoreEntity to load</param>
		/// <returns>A StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public StoreEntity GetStore(int id)
		{
			return GetStore(id, true);
		} 

		/// <summary>
		/// Get an specific storeEntity
		/// </summary>
		/// <param name="id">id of the StoreEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>A StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="storeEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public StoreEntity GetStore(int id, bool loadRelation)
		{
			try 
			{
				return storeDataAccess.Load(id, loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all storeEntity
		/// </summary>
		/// <returns>Collection of all StoreEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetAllStore()
		{
			return GetAllStore(true);
		} 

		/// <summary>
		/// Get collection of all storeEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of all StoreEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetAllStore(bool loadRelation)
		{
			try 
			{
				return storeDataAccess.LoadAll(loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all storeEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of storeEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetStoreWhere(string propertyName, object expValue, OperatorType operatorType)
		{
			return GetStoreWhere(propertyName, expValue, true, operatorType);
		} 

		/// <summary>
		/// Get collection of all storeEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of storeEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetStoreWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			try 
			{
				return storeDataAccess.LoadWhere(propertyName, expValue, loadRelation, operatorType);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all storeEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of storeEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetStoreWhereEqual(string propertyName, object expValue)
		{
			return GetStoreWhere(propertyName, expValue, true, OperatorType.Equal);
		} 

		/// <summary>
		/// Get collection of all storeEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of storeEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of StoreEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<StoreEntity> GetStoreWhereEqual(string propertyName, object expValue, bool loadRelation)
		{
			try 
			{
				return GetStoreWhere(propertyName, expValue, loadRelation, OperatorType.Equal);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to validate a StoreEntity .
		/// </summary>
		/// <param name="store">StoreEntity to validate</param>
		/// <returns>true</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="store"/> is null.
		/// </exception>
		public bool Validate(StoreEntity store)
		{
			bool result = true;

			if (store == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Check entity data
			if (String.IsNullOrEmpty(store.Name))
			{
				store.Errors.Add(new Error("Name", "Name", "Name can't be empty"));
				result = false;
			}
			if (store.Name != null)
			{
				Collection<StoreEntity> listOfEquals = storeDataAccess.LoadWhere(StoreEntity.DBName, store.Name, false, OperatorType.Equal);

				if (listOfEquals.Count > 0 && listOfEquals[0].Id != store.Id)
				{
					store.Errors.Add(new Error("Name", "Name", "A store with that name already exists"));
					result = false;
				}
			}
			if (String.IsNullOrEmpty(store.TelephoneNumber))
			{
				store.Errors.Add(new Error("TelephoneNumber", "TelephoneNumber", "Telephone number can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(store.InternalPhoneNumber))
			{
				store.Errors.Add(new Error("InternalPhoneNumber", "InternalPhoneNumber", "Internal phone number can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(store.ContactName))
			{
				store.Errors.Add(new Error("ContactName", "ContactName", "Contact name can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(store.OwnerName))
			{
				store.Errors.Add(new Error("OwnerName", "OwnerName", "Owner name can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(store.Email))
			{
				store.Errors.Add(new Error("Email", "Email", "Email can't be empty"));
				result = false;
			}
			if (String.IsNullOrEmpty(store.LocalNumber))
			{
				store.Errors.Add(new Error("LocalNumber", "LocalNumber", "Local number can't be empty"));
				result = false;
			}
			if (store.Name != null)
			{
				Collection<StoreEntity> listOfEquals = storeDataAccess.LoadWhere(StoreEntity.DBName, store.Name, false, OperatorType.Equal);

				if (listOfEquals.Count > 0 && listOfEquals[0].Id != store.Id)
				{
					store.Errors.Add(new Error("Name", "Name", "A service with that local number already exists"));
					result = false;
				}
			}
			if (store.StoreCategory == null)
			{
				store.Errors.Add(new Error("StoreCategory", "StoreCategory", "Store category can't be empty"));
				result = false;
			}
			if (!ValidateStoreCategory(store.StoreCategory))
			{
				result = false;
			}
			if (store.Service == null)
			{
				store.Errors.Add(new Error("Service", "Service", "Service can't be empty"));
				result = false;
			}
			return result;
		} 

		private static bool ValidateStoreCategory(Collection<StoreCategoryEntity> StoreCategory)
		{
			bool result = true;

			for (int  i = 0; i < StoreCategory.Count; i++)
			{
				StoreCategoryEntity item = StoreCategory[i];
				if (item.Category == null)
				{
					item.Errors.Add(new Error("Category", "Category", "Category can't be empty"));
					result = false;
				}
			}
			return result;
		} 

	} 
	/// <summary>
	/// The <c>UserActionClientData</c> implement business logic to process UserActionClientDataEntity,
	/// saving, updating, deleting and validating entity data.
	/// </summary>
	public class UserActionClientData
	{
		private UserActionClientDataDataAccess useractionclientdataDataAccess; 
		/// <summary>
		/// The <c>UserActionClientData</c> constructor
		/// </summary>
		public  UserActionClientData()
		{
			useractionclientdataDataAccess = new UserActionClientDataDataAccess();
		} 

		/// <summary>
		/// Function to save a UserActionClientDataEntity to the database.
		/// </summary>
		/// <param name="userActionClientDataEntity">UserActionClientDataEntity to save</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the UserActionClientDataEntity was saved successfully, the same UserActionClientDataEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public UserActionClientDataEntity Save(UserActionClientDataEntity userActionClientDataEntity)
		{
			if (userActionClientDataEntity == null)
			{
				throw new ArgumentException("The entity can't be null", "userActionClientDataEntity");
			}
			// Validate UserActionClientDataEntity
			if (!Validate(userActionClientDataEntity))
			{
				return userActionClientDataEntity;
			}
			try 
			{
				// Save userActionClientDataEntity using data access object
				useractionclientdataDataAccess.Save(userActionClientDataEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to delete a UserActionClientDataEntity from database.
		/// </summary>
		/// <param name="userActionClientDataEntity">UserActionClientDataEntity to delete</param>
		/// <param name="session">User's session identifier.</param>
		/// <returns>null if the UserActionClientDataEntity was deleted successfully, the same UserActionClientDataEntity otherwise</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public UserActionClientDataEntity Delete(UserActionClientDataEntity userActionClientDataEntity)
		{
			if (userActionClientDataEntity == null)
			{
				throw new ArgumentException("The argument can't be null", "userActionClientDataEntity");
			}
			try 
			{
				// Delete userActionClientDataEntity using data access object
				useractionclientdataDataAccess.Delete(userActionClientDataEntity);
				return null;
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				// Rethrow as custom exception
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get an specific userActionClientDataEntity
		/// </summary>
		/// <param name="id">id of the UserActionClientDataEntity to load</param>
		/// <returns>A UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public UserActionClientDataEntity GetUserActionClientData(int id)
		{
			return GetUserActionClientData(id, true);
		} 

		/// <summary>
		/// Get an specific userActionClientDataEntity
		/// </summary>
		/// <param name="id">id of the UserActionClientDataEntity to load</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>A UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientDataEntity"/> is null.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public UserActionClientDataEntity GetUserActionClientData(int id, bool loadRelation)
		{
			try 
			{
				return useractionclientdataDataAccess.Load(id, loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity
		/// </summary>
		/// <returns>Collection of all UserActionClientDataEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetAllUserActionClientData()
		{
			return GetAllUserActionClientData(true);
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity
		/// </summary>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of all UserActionClientDataEntity</returns>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetAllUserActionClientData(bool loadRelation)
		{
			try 
			{
				return useractionclientdataDataAccess.LoadAll(loadRelation);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of userActionClientDataEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhere(string propertyName, object expValue, OperatorType operatorType)
		{
			return GetUserActionClientDataWhere(propertyName, expValue, true, operatorType);
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of userActionClientDataEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhere(string propertyName, object expValue, bool loadRelation, OperatorType operatorType)
		{
			try 
			{
				return useractionclientdataDataAccess.LoadWhere(propertyName, expValue, loadRelation, operatorType);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of userActionClientDataEntity</param>
		/// <param name="expValue">pattern</param>
		/// <returns>Collection of UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhereEqual(string propertyName, object expValue)
		{
			return GetUserActionClientDataWhere(propertyName, expValue, true, OperatorType.Equal);
		} 

		/// <summary>
		/// Get collection of all userActionClientDataEntity that comply with certain pattern
		/// </summary>
		/// <param name="propertyName">property of userActionClientDataEntity</param>
		/// <param name="expValue">pattern</param>
		/// <param name="loadRelation">true to load the relations</param>
		/// <returns>Collection of UserActionClientDataEntity</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="propertyName"/> is null or empty.
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="expValue"/> is null or empty.
		/// </exception>
		/// <exception cref="UtnEmallBusinessLogicException">
		/// If an UtnEmallDataAccessException occurs in DataModel.
		/// </exception>
		public Collection<UserActionClientDataEntity> GetUserActionClientDataWhereEqual(string propertyName, object expValue, bool loadRelation)
		{
			try 
			{
				return GetUserActionClientDataWhere(propertyName, expValue, loadRelation, OperatorType.Equal);
			}
			catch (UtnEmallDataAccessException utnEmallDataAccessException)
			{
				throw new UtnEmallBusinessLogicException(utnEmallDataAccessException.Message, utnEmallDataAccessException);
			}
		} 

		/// <summary>
		/// Function to validate a UserActionClientDataEntity .
		/// </summary>
		/// <param name="userActionClientData">UserActionClientDataEntity to validate</param>
		/// <returns>true</returns>
		/// <exception cref="ArgumentNullException">
		/// if <paramref name="userActionClientData"/> is null.
		/// </exception>
		public bool Validate(UserActionClientDataEntity userActionClientData)
		{
			bool result = true;

			if (userActionClientData == null)
			{
				throw new ArgumentException("The argument can't be null");
			}
			// Check entity data
			if (userActionClientData.ActionType < 0)
			{
				userActionClientData.Errors.Add(new Error("ActionType", "ActionType", "ActionType can't be negative"));
				result = false;
			}
			if (userActionClientData.Start > System.DateTime.Now)
			{
				userActionClientData.Errors.Add(new Error("Start", "Start", "Start date can't be in the future"));
				result = false;
			}
			if (userActionClientData.Start == null)
			{
				userActionClientData.Errors.Add(new Error("Start", "Start", "Start can't be null"));
				result = false;
			}

			if (userActionClientData.Stop > System.DateTime.Now)
			{
				userActionClientData.Errors.Add(new Error("Stop", "Stop", "Stop date can't be in the future"));
				result = false;
			}

			if (userActionClientData.Stop < userActionClientData.Start)
			{
				userActionClientData.Errors.Add(new Error("Stop", "Stop", "Stop can't be lower than start"));
				result = false;
			}
			if (userActionClientData.Stop == null)
			{
				userActionClientData.Errors.Add(new Error("Stop", "Stop", "Stop can't be null"));
				result = false;
			}

			if (userActionClientData.IdTable < 0)
			{
				userActionClientData.Errors.Add(new Error("IdTable", "IdTable", "IdTable can't be negative"));
				result = false;
			}
			if (userActionClientData.IdRegister < 0)
			{
				userActionClientData.Errors.Add(new Error("IdRegister", "IdRegister", "IdRegister can't be negative"));
				result = false;
			}
			if (userActionClientData.IdComponent < 0)
			{
				userActionClientData.Errors.Add(new Error("IdComponent", "IdComponent", "IdComponent can't be negative"));
				result = false;
			}
			if (userActionClientData.IdService < 0)
			{
				userActionClientData.Errors.Add(new Error("IdService", "IdService", "IdService can't be negative"));
				result = false;
			}
			return result;
		} 

	} 
} 

namespace UtnEmall.Client.EntityModel
{

	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>LastSyncEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class LastSyncEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>LastSyncEntity</c> type.
		/// </summary>
		public  LastSyncEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		private string _EntityName; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		/// <summary>
		/// Gets or sets the value for EntityName.
		/// <summary>
		public string EntityName
		{
			get 
			{
				return _EntityName;
			}
			set 
			{
				_EntityName = value;
				changed = true;
			}
		} 

		private System.DateTime _LastTimestamp; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		/// <summary>
		/// Gets or sets the value for LastTimestamp.
		/// <summary>
		public System.DateTime LastTimestamp
		{
			get 
			{
				return _LastTimestamp;
			}
			set 
			{
				_LastTimestamp = value;
				changed = true;
			}
		} 

		public const string DBIdLastSync = "idLastSync"; 
		public const string DBEntityName = "entityName"; 
		public const string DBLastTimestamp = "lastTimestamp"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>CategoryEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class CategoryEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>CategoryEntity</c> type.
		/// </summary>
		public  CategoryEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		private string _Description; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		/// <summary>
		/// Gets or sets the value for Description.
		/// <summary>
		public string Description
		{
			get 
			{
				return _Description;
			}
			set 
			{
				_Description = value;
				changed = true;
			}
		} 

		private string _Name; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		/// <summary>
		/// Gets or sets the value for Name.
		/// <summary>
		public string Name
		{
			get 
			{
				return _Name;
			}
			set 
			{
				_Name = value;
				changed = true;
			}
		} 

		private Collection<CategoryEntity> _Childs; 
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 7 )]

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly", Justification = "We need set for serialization and deserialization web service interfaces.")]
		/// <summary>
		/// Gets or sets the value for Childs.
		/// <summary>
		public Collection<CategoryEntity> Childs
		{
			get 
			{
				if (_Childs == null)
				{
					_Childs = new Collection<CategoryEntity>();
				}
				return _Childs;
			}
			set 
			{
				_Childs = value;
			}
		} 

		private CategoryEntity _ParentCategory; 
		private int _IdParentCategory; 
		/// <summary>
		/// Gets or sets the value for ParentCategory.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		public CategoryEntity ParentCategory
		{
			get 
			{
				return _ParentCategory;
			}
			set 
			{
				_ParentCategory = value;
				// If provided value is null set id to 0, else to provided object id

				if (_ParentCategory != null)
				{
					IdParentCategory = _ParentCategory.Id;
				}
				else 
				{
					IdParentCategory = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the ParentCategory.
		/// If ParentCategory is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 9 )]
		public int IdParentCategory
		{
			get 
			{
				if (_ParentCategory == null)
				{
					return _IdParentCategory;
				}
				else 
				{
					return _ParentCategory.Id;
				}
			}
			set 
			{
				_IdParentCategory = value;
			}
		} 

		private Collection<PreferenceEntity> _Preference; 
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 10 )]

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly", Justification = "We need set for serialization and deserialization web service interfaces.")]
		/// <summary>
		/// Gets or sets the value for Preference.
		/// <summary>
		public Collection<PreferenceEntity> Preference
		{
			get 
			{
				if (_Preference == null)
				{
					_Preference = new Collection<PreferenceEntity>();
				}
				return _Preference;
			}
			set 
			{
				_Preference = value;
			}
		} 

		private Collection<ServiceCategoryEntity> _ServiceCategory; 
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 11 )]

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly", Justification = "We need set for serialization and deserialization web service interfaces.")]
		/// <summary>
		/// Gets or sets the value for ServiceCategory.
		/// <summary>
		public Collection<ServiceCategoryEntity> ServiceCategory
		{
			get 
			{
				if (_ServiceCategory == null)
				{
					_ServiceCategory = new Collection<ServiceCategoryEntity>();
				}
				return _ServiceCategory;
			}
			set 
			{
				_ServiceCategory = value;
			}
		} 

		public const string DBIdCategory = "idCategory"; 
		public const string DBDescription = "description"; 
		public const string DBName = "name"; 
		public const string DBIdParentCategory = "idParentCategory"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>CustomerEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class CustomerEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>CustomerEntity</c> type.
		/// </summary>
		public  CustomerEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		private string _Name; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		/// <summary>
		/// Gets or sets the value for Name.
		/// <summary>
		public string Name
		{
			get 
			{
				return _Name;
			}
			set 
			{
				_Name = value;
				changed = true;
			}
		} 

		private string _Surname; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		/// <summary>
		/// Gets or sets the value for Surname.
		/// <summary>
		public string Surname
		{
			get 
			{
				return _Surname;
			}
			set 
			{
				_Surname = value;
				changed = true;
			}
		} 

		private string _Address; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 7 )]
		/// <summary>
		/// Gets or sets the value for Address.
		/// <summary>
		public string Address
		{
			get 
			{
				return _Address;
			}
			set 
			{
				_Address = value;
				changed = true;
			}
		} 

		private string _PhoneNumber; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		/// <summary>
		/// Gets or sets the value for PhoneNumber.
		/// <summary>
		public string PhoneNumber
		{
			get 
			{
				return _PhoneNumber;
			}
			set 
			{
				_PhoneNumber = value;
				changed = true;
			}
		} 

		private string _UserName; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 9 )]
		/// <summary>
		/// Gets or sets the value for UserName.
		/// <summary>
		public string UserName
		{
			get 
			{
				return _UserName;
			}
			set 
			{
				_UserName = value;
				changed = true;
			}
		} 

		private string _Password; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 10 )]
		/// <summary>
		/// Gets or sets the value for Password.
		/// <summary>
		public string Password
		{
			get 
			{
				return _Password;
			}
			set 
			{
				_Password = value;
				changed = true;
			}
		} 

		private Collection<PreferenceEntity> _Preferences; 
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 11 )]

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly", Justification = "We need set for serialization and deserialization web service interfaces.")]
		/// <summary>
		/// Gets or sets the value for Preferences.
		/// <summary>
		public Collection<PreferenceEntity> Preferences
		{
			get 
			{
				if (_Preferences == null)
				{
					_Preferences = new Collection<PreferenceEntity>();
				}
				return _Preferences;
			}
			set 
			{
				_Preferences = value;
			}
		} 

		private Collection<DeviceProfileEntity> _DeviceProfile; 
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 12 )]

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly", Justification = "We need set for serialization and deserialization web service interfaces.")]
		/// <summary>
		/// Gets or sets the value for DeviceProfile.
		/// <summary>
		public Collection<DeviceProfileEntity> DeviceProfile
		{
			get 
			{
				if (_DeviceProfile == null)
				{
					_DeviceProfile = new Collection<DeviceProfileEntity>();
				}
				return _DeviceProfile;
			}
			set 
			{
				_DeviceProfile = value;
			}
		} 

		public const string DBIdCustomer = "idCustomer"; 
		public const string DBName = "name"; 
		public const string DBSurname = "surname"; 
		public const string DBAddress = "address"; 
		public const string DBPhoneNumber = "phoneNumber"; 
		public const string DBUserName = "userName"; 
		public const string DBPassword = "password"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>DeviceProfileEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class DeviceProfileEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>DeviceProfileEntity</c> type.
		/// </summary>
		public  DeviceProfileEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		private string _DeviceType; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		/// <summary>
		/// Gets or sets the value for DeviceType.
		/// <summary>
		public string DeviceType
		{
			get 
			{
				return _DeviceType;
			}
			set 
			{
				_DeviceType = value;
				changed = true;
			}
		} 

		private string _DeviceModel; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		/// <summary>
		/// Gets or sets the value for DeviceModel.
		/// <summary>
		public string DeviceModel
		{
			get 
			{
				return _DeviceModel;
			}
			set 
			{
				_DeviceModel = value;
				changed = true;
			}
		} 

		private string _MacAddress; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 7 )]
		/// <summary>
		/// Gets or sets the value for MacAddress.
		/// <summary>
		public string MacAddress
		{
			get 
			{
				return _MacAddress;
			}
			set 
			{
				_MacAddress = value;
				changed = true;
			}
		} 

		private string _WindowsMobileVersion; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		/// <summary>
		/// Gets or sets the value for WindowsMobileVersion.
		/// <summary>
		public string WindowsMobileVersion
		{
			get 
			{
				return _WindowsMobileVersion;
			}
			set 
			{
				_WindowsMobileVersion = value;
				changed = true;
			}
		} 

		private CustomerEntity _Customer; 
		private int _IdCustomer; 
		/// <summary>
		/// Gets or sets the value for Customer.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 9 )]
		public CustomerEntity Customer
		{
			get 
			{
				return _Customer;
			}
			set 
			{
				_Customer = value;
				// If provided value is null set id to 0, else to provided object id

				if (_Customer != null)
				{
					IdCustomer = _Customer.Id;
				}
				else 
				{
					IdCustomer = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the Customer.
		/// If Customer is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 10 )]
		public int IdCustomer
		{
			get 
			{
				if (_Customer == null)
				{
					return _IdCustomer;
				}
				else 
				{
					return _Customer.Id;
				}
			}
			set 
			{
				_IdCustomer = value;
			}
		} 

		public const string DBIdDeviceProfile = "idDeviceProfile"; 
		public const string DBDeviceType = "deviceType"; 
		public const string DBDeviceModel = "deviceModel"; 
		public const string DBMacAddress = "macAddress"; 
		public const string DBWindowsMobileVersion = "windowsMobileVersion"; 
		public const string DBIdCustomer = "idCustomer"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>PreferenceEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class PreferenceEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>PreferenceEntity</c> type.
		/// </summary>
		public  PreferenceEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		private bool _Active; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		/// <summary>
		/// Gets or sets the value for Active.
		/// <summary>
		public bool Active
		{
			get 
			{
				return _Active;
			}
			set 
			{
				_Active = value;
				changed = true;
			}
		} 

		private double _Level; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		/// <summary>
		/// Gets or sets the value for Level.
		/// <summary>
		public double Level
		{
			get 
			{
				return _Level;
			}
			set 
			{
				_Level = value;
				changed = true;
			}
		} 

		private CustomerEntity _Customer; 
		private int _IdCustomer; 
		/// <summary>
		/// Gets or sets the value for Customer.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 7 )]
		public CustomerEntity Customer
		{
			get 
			{
				return _Customer;
			}
			set 
			{
				_Customer = value;
				// If provided value is null set id to 0, else to provided object id

				if (_Customer != null)
				{
					IdCustomer = _Customer.Id;
				}
				else 
				{
					IdCustomer = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the Customer.
		/// If Customer is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		public int IdCustomer
		{
			get 
			{
				if (_Customer == null)
				{
					return _IdCustomer;
				}
				else 
				{
					return _Customer.Id;
				}
			}
			set 
			{
				_IdCustomer = value;
			}
		} 

		private CategoryEntity _Category; 
		private int _IdCategory; 
		/// <summary>
		/// Gets or sets the value for Category.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 9 )]
		public CategoryEntity Category
		{
			get 
			{
				return _Category;
			}
			set 
			{
				_Category = value;
				// If provided value is null set id to 0, else to provided object id

				if (_Category != null)
				{
					IdCategory = _Category.Id;
				}
				else 
				{
					IdCategory = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the Category.
		/// If Category is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 10 )]
		public int IdCategory
		{
			get 
			{
				if (_Category == null)
				{
					return _IdCategory;
				}
				else 
				{
					return _Category.Id;
				}
			}
			set 
			{
				_IdCategory = value;
			}
		} 

		public const string DBIdPreference = "idPreference"; 
		public const string DBActive = "active"; 
		public const string DBLevel = "level"; 
		public const string DBIdCustomer = "idCustomer"; 
		public const string DBIdCategory = "idCategory"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>ServiceEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class ServiceEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>ServiceEntity</c> type.
		/// </summary>
		public  ServiceEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		/// Mark if the service was deployed (and builded)
		/// Mark if the service need to be redeployed on server startup
		private string _Name; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		/// <summary>
		/// Gets or sets the value for Name.
		/// <summary>
		public string Name
		{
			get 
			{
				return _Name;
			}
			set 
			{
				_Name = value;
				changed = true;
			}
		} 

		private string _Description; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		/// <summary>
		/// Gets or sets the value for Description.
		/// <summary>
		public string Description
		{
			get 
			{
				return _Description;
			}
			set 
			{
				_Description = value;
				changed = true;
			}
		} 

		private string _WebAccess; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 7 )]
		/// <summary>
		/// Gets or sets the value for WebAccess.
		/// <summary>
		public string WebAccess
		{
			get 
			{
				return _WebAccess;
			}
			set 
			{
				_WebAccess = value;
				changed = true;
			}
		} 

		private string _RelativePathAssembly; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		/// <summary>
		/// Gets or sets the value for RelativePathAssembly.
		/// <summary>
		public string RelativePathAssembly
		{
			get 
			{
				return _RelativePathAssembly;
			}
			set 
			{
				_RelativePathAssembly = value;
				changed = true;
			}
		} 

		private string _PathAssemblyServer; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 9 )]
		/// <summary>
		/// Gets or sets the value for PathAssemblyServer.
		/// <summary>
		public string PathAssemblyServer
		{
			get 
			{
				return _PathAssemblyServer;
			}
			set 
			{
				_PathAssemblyServer = value;
				changed = true;
			}
		} 

		private bool _Active; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 10 )]
		/// <summary>
		/// Gets or sets the value for Active.
		/// <summary>
		public bool Active
		{
			get 
			{
				return _Active;
			}
			set 
			{
				_Active = value;
				changed = true;
			}
		} 

		private bool _Global; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 11 )]
		/// <summary>
		/// Gets or sets the value for Global.
		/// <summary>
		public bool Global
		{
			get 
			{
				return _Global;
			}
			set 
			{
				_Global = value;
				changed = true;
			}
		} 

		private string _Image; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 12 )]
		/// <summary>
		/// Gets or sets the value for Image.
		/// <summary>
		public string Image
		{
			get 
			{
				return _Image;
			}
			set 
			{
				_Image = value;
				changed = true;
			}
		} 

		private string _Website; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 13 )]
		/// <summary>
		/// Gets or sets the value for Website.
		/// <summary>
		public string Website
		{
			get 
			{
				return _Website;
			}
			set 
			{
				_Website = value;
				changed = true;
			}
		} 

		private bool _Deployed; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 14 )]
		/// <summary>
		/// Gets or sets the value for Deployed.
		/// <summary>
		public bool Deployed
		{
			get 
			{
				return _Deployed;
			}
			set 
			{
				_Deployed = value;
				changed = true;
			}
		} 

		private bool _Updated; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 15 )]
		/// <summary>
		/// Gets or sets the value for Updated.
		/// <summary>
		public bool Updated
		{
			get 
			{
				return _Updated;
			}
			set 
			{
				_Updated = value;
				changed = true;
			}
		} 

		private Collection<ServiceCategoryEntity> _ServiceCategory; 
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 16 )]

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly", Justification = "We need set for serialization and deserialization web service interfaces.")]
		/// <summary>
		/// Gets or sets the value for ServiceCategory.
		/// <summary>
		public Collection<ServiceCategoryEntity> ServiceCategory
		{
			get 
			{
				if (_ServiceCategory == null)
				{
					_ServiceCategory = new Collection<ServiceCategoryEntity>();
				}
				return _ServiceCategory;
			}
			set 
			{
				_ServiceCategory = value;
			}
		} 

		private StoreEntity _Store; 
		private int _IdStore; 
		/// <summary>
		/// Gets or sets the value for Store.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 17 )]
		public StoreEntity Store
		{
			get 
			{
				return _Store;
			}
			set 
			{
				_Store = value;
				// If provided value is null set id to 0, else to provided object id

				if (_Store != null)
				{
					IdStore = _Store.Id;
				}
				else 
				{
					IdStore = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the Store.
		/// If Store is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 18 )]
		public int IdStore
		{
			get 
			{
				if (_Store == null)
				{
					return _IdStore;
				}
				else 
				{
					return _Store.Id;
				}
			}
			set 
			{
				_IdStore = value;
			}
		} 

		private System.DateTime _StartDate; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 19 )]
		/// <summary>
		/// Gets or sets the value for StartDate.
		/// <summary>
		public System.DateTime StartDate
		{
			get 
			{
				return _StartDate;
			}
			set 
			{
				_StartDate = value;
				changed = true;
			}
		} 

		private System.DateTime _StopDate; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 20 )]
		/// <summary>
		/// Gets or sets the value for StopDate.
		/// <summary>
		public System.DateTime StopDate
		{
			get 
			{
				return _StopDate;
			}
			set 
			{
				_StopDate = value;
				changed = true;
			}
		} 

		public const string DBIdService = "idService"; 
		public const string DBName = "name"; 
		public const string DBDescription = "description"; 
		public const string DBWebAccess = "webAccess"; 
		public const string DBRelativePathAssembly = "relativePathAssembly"; 
		public const string DBPathAssemblyServer = "pathAssemblyServer"; 
		public const string DBActive = "active"; 
		public const string DBGlobal = "global"; 
		public const string DBImage = "image"; 
		public const string DBWebsite = "website"; 
		public const string DBDeployed = "deployed"; 
		public const string DBUpdated = "updated"; 
		public const string DBIdStore = "idStore"; 
		public const string DBStartDate = "startDate"; 
		public const string DBStopDate = "stopDate"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>ServiceCategoryEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class ServiceCategoryEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>ServiceCategoryEntity</c> type.
		/// </summary>
		public  ServiceCategoryEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		private ServiceEntity _Service; 
		private int _IdService; 
		/// <summary>
		/// Gets or sets the value for Service.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		public ServiceEntity Service
		{
			get 
			{
				return _Service;
			}
			set 
			{
				_Service = value;
				// If provided value is null set id to 0, else to provided object id

				if (_Service != null)
				{
					IdService = _Service.Id;
				}
				else 
				{
					IdService = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the Service.
		/// If Service is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		public int IdService
		{
			get 
			{
				if (_Service == null)
				{
					return _IdService;
				}
				else 
				{
					return _Service.Id;
				}
			}
			set 
			{
				_IdService = value;
			}
		} 

		private CategoryEntity _Category; 
		private int _IdCategory; 
		/// <summary>
		/// Gets or sets the value for Category.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 7 )]
		public CategoryEntity Category
		{
			get 
			{
				return _Category;
			}
			set 
			{
				_Category = value;
				// If provided value is null set id to 0, else to provided object id

				if (_Category != null)
				{
					IdCategory = _Category.Id;
				}
				else 
				{
					IdCategory = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the Category.
		/// If Category is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		public int IdCategory
		{
			get 
			{
				if (_Category == null)
				{
					return _IdCategory;
				}
				else 
				{
					return _Category.Id;
				}
			}
			set 
			{
				_IdCategory = value;
			}
		} 

		public const string DBIdServiceCategory = "idServiceCategory"; 
		public const string DBIdService = "idService"; 
		public const string DBIdCategory = "idCategory"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>StoreEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class StoreEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>StoreEntity</c> type.
		/// </summary>
		public  StoreEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		private string _Name; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		/// <summary>
		/// Gets or sets the value for Name.
		/// <summary>
		public string Name
		{
			get 
			{
				return _Name;
			}
			set 
			{
				_Name = value;
				changed = true;
			}
		} 

		private string _TelephoneNumber; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		/// <summary>
		/// Gets or sets the value for TelephoneNumber.
		/// <summary>
		public string TelephoneNumber
		{
			get 
			{
				return _TelephoneNumber;
			}
			set 
			{
				_TelephoneNumber = value;
				changed = true;
			}
		} 

		private string _InternalPhoneNumber; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 7 )]
		/// <summary>
		/// Gets or sets the value for InternalPhoneNumber.
		/// <summary>
		public string InternalPhoneNumber
		{
			get 
			{
				return _InternalPhoneNumber;
			}
			set 
			{
				_InternalPhoneNumber = value;
				changed = true;
			}
		} 

		private string _ContactName; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		/// <summary>
		/// Gets or sets the value for ContactName.
		/// <summary>
		public string ContactName
		{
			get 
			{
				return _ContactName;
			}
			set 
			{
				_ContactName = value;
				changed = true;
			}
		} 

		private string _OwnerName; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 9 )]
		/// <summary>
		/// Gets or sets the value for OwnerName.
		/// <summary>
		public string OwnerName
		{
			get 
			{
				return _OwnerName;
			}
			set 
			{
				_OwnerName = value;
				changed = true;
			}
		} 

		private string _Email; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 10 )]
		/// <summary>
		/// Gets or sets the value for Email.
		/// <summary>
		public string Email
		{
			get 
			{
				return _Email;
			}
			set 
			{
				_Email = value;
				changed = true;
			}
		} 

		private string _WebAddress; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 11 )]
		/// <summary>
		/// Gets or sets the value for WebAddress.
		/// <summary>
		public string WebAddress
		{
			get 
			{
				return _WebAddress;
			}
			set 
			{
				_WebAddress = value;
				changed = true;
			}
		} 

		private string _LocalNumber; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 12 )]
		/// <summary>
		/// Gets or sets the value for LocalNumber.
		/// <summary>
		public string LocalNumber
		{
			get 
			{
				return _LocalNumber;
			}
			set 
			{
				_LocalNumber = value;
				changed = true;
			}
		} 

		private Collection<StoreCategoryEntity> _StoreCategory; 
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 13 )]

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly", Justification = "We need set for serialization and deserialization web service interfaces.")]
		/// <summary>
		/// Gets or sets the value for StoreCategory.
		/// <summary>
		public Collection<StoreCategoryEntity> StoreCategory
		{
			get 
			{
				if (_StoreCategory == null)
				{
					_StoreCategory = new Collection<StoreCategoryEntity>();
				}
				return _StoreCategory;
			}
			set 
			{
				_StoreCategory = value;
			}
		} 

		private Collection<ServiceEntity> _Service; 
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 14 )]

		[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly", Justification = "We need set for serialization and deserialization web service interfaces.")]
		/// <summary>
		/// Gets or sets the value for Service.
		/// <summary>
		public Collection<ServiceEntity> Service
		{
			get 
			{
				if (_Service == null)
				{
					_Service = new Collection<ServiceEntity>();
				}
				return _Service;
			}
			set 
			{
				_Service = value;
			}
		} 

		public const string DBIdStore = "idStore"; 
		public const string DBName = "name"; 
		public const string DBTelephoneNumber = "telephoneNumber"; 
		public const string DBInternalPhoneNumber = "internalPhoneNumber"; 
		public const string DBContactName = "contactName"; 
		public const string DBOwnerName = "ownerName"; 
		public const string DBEmail = "email"; 
		public const string DBWebAddress = "webAddress"; 
		public const string DBLocalNumber = "localNumber"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>StoreCategoryEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class StoreCategoryEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>StoreCategoryEntity</c> type.
		/// </summary>
		public  StoreCategoryEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		private CategoryEntity _Category; 
		private int _IdCategory; 
		/// <summary>
		/// Gets or sets the value for Category.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		public CategoryEntity Category
		{
			get 
			{
				return _Category;
			}
			set 
			{
				_Category = value;
				// If provided value is null set id to 0, else to provided object id

				if (_Category != null)
				{
					IdCategory = _Category.Id;
				}
				else 
				{
					IdCategory = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the Category.
		/// If Category is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		public int IdCategory
		{
			get 
			{
				if (_Category == null)
				{
					return _IdCategory;
				}
				else 
				{
					return _Category.Id;
				}
			}
			set 
			{
				_IdCategory = value;
			}
		} 

		private StoreEntity _Store; 
		private int _IdStore; 
		/// <summary>
		/// Gets or sets the value for Store.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 7 )]
		public StoreEntity Store
		{
			get 
			{
				return _Store;
			}
			set 
			{
				_Store = value;
				// If provided value is null set id to 0, else to provided object id

				if (_Store != null)
				{
					IdStore = _Store.Id;
				}
				else 
				{
					IdStore = 0;
				}
				changed = true;
			}
		} 

		/// <summary>
		/// Gets or sets the Id of the Store.
		/// If Store is set return the Id of the object,
		/// else returns manually stored Id
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		public int IdStore
		{
			get 
			{
				if (_Store == null)
				{
					return _IdStore;
				}
				else 
				{
					return _Store.Id;
				}
			}
			set 
			{
				_IdStore = value;
			}
		} 

		public const string DBIdStoreCategory = "idStoreCategory"; 
		public const string DBIdCategory = "idCategory"; 
		public const string DBIdStore = "idStore"; 
	} 
	[System.SerializableAttribute]

	[System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel")]
	/// <summary>
	/// The <c>UserActionClientDataEntity</c> is a entity class
	/// that contains all the fields that are inserted and
	/// loaded from the database.
	/// This class is used by the upper layers.
	/// </summary>
	public class UserActionClientDataEntity: IEntity
	{
		private int id; 
		private bool changed; 
		private bool isNew; 
		private System.DateTime timestamp; 
		private Collection<Error> errors; 
		/// <summary>
		/// Initializes a new instance of a
		/// <c>UserActionClientDataEntity</c> type.
		/// </summary>
		public  UserActionClientDataEntity()
		{
			isNew = true;
			errors = new Collection<Error>();
		} 

		/// <summary>
		/// Gets or sets the Id of the entity.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 0 )]
		public int Id
		{
			get 
			{
				return id;
			}
			set 
			{
				id = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity has changed.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 1 )]
		public bool Changed
		{
			get 
			{
				return changed;
			}
			set 
			{
				changed = value;
			}
		} 

		/// <summary>
		/// Gets or sets if the entity is new.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 2 )]
		public bool IsNew
		{
			get 
			{
				return isNew;
			}
			set 
			{
				isNew = value;
			}
		} 

		/// <summary>
		/// Gets or sets the timestamp of the last access.
		/// <summary>
		[System.Xml.Serialization.XmlElementAttribute( Order = 3 )]
		public System.DateTime Timestamp
		{
			get 
			{
				return timestamp;
			}
			set 
			{
				timestamp = value;
			}
		} 

		public const string DBTimestamp = "timestamp"; 
		/// <summary>
		/// The collection of entity's errors.
		/// <summary>
		[System.Xml.Serialization.XmlArrayAttribute( IsNullable = true, Order = 4 )]
		public Collection<Error> Errors
		{
			get 
			{
				return errors;
			}
			set 
			{
				errors = value;
			}
		} 

		/// An integer that mark the type of the action
		/// The Start time of the action
		/// The End time of the action
		/// The Id of the Table on the related data model (when it is applicable)
		/// The Id of the register on the related data model (when it is applicable)
		/// The Component that launch the action on the designed Custom Service. This can be
		/// a form, or menuitem
		/// The Id of the service
		private int _ActionType; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 5 )]
		/// <summary>
		/// Gets or sets the value for ActionType.
		/// <summary>
		public int ActionType
		{
			get 
			{
				return _ActionType;
			}
			set 
			{
				_ActionType = value;
				changed = true;
			}
		} 

		private System.DateTime _Start; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 6 )]
		/// <summary>
		/// Gets or sets the value for Start.
		/// <summary>
		public System.DateTime Start
		{
			get 
			{
				return _Start;
			}
			set 
			{
				_Start = value;
				changed = true;
			}
		} 

		private System.DateTime _Stop; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 7 )]
		/// <summary>
		/// Gets or sets the value for Stop.
		/// <summary>
		public System.DateTime Stop
		{
			get 
			{
				return _Stop;
			}
			set 
			{
				_Stop = value;
				changed = true;
			}
		} 

		private int _IdTable; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 8 )]
		/// <summary>
		/// Gets or sets the value for IdTable.
		/// <summary>
		public int IdTable
		{
			get 
			{
				return _IdTable;
			}
			set 
			{
				_IdTable = value;
				changed = true;
			}
		} 

		private int _IdRegister; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 9 )]
		/// <summary>
		/// Gets or sets the value for IdRegister.
		/// <summary>
		public int IdRegister
		{
			get 
			{
				return _IdRegister;
			}
			set 
			{
				_IdRegister = value;
				changed = true;
			}
		} 

		private int _IdComponent; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 10 )]
		/// <summary>
		/// Gets or sets the value for IdComponent.
		/// <summary>
		public int IdComponent
		{
			get 
			{
				return _IdComponent;
			}
			set 
			{
				_IdComponent = value;
				changed = true;
			}
		} 

		private int _IdService; 
		[System.Xml.Serialization.XmlElementAttribute( Order = 11 )]
		/// <summary>
		/// Gets or sets the value for IdService.
		/// <summary>
		public int IdService
		{
			get 
			{
				return _IdService;
			}
			set 
			{
				_IdService = value;
				changed = true;
			}
		} 

		public const string DBIdUserActionClientData = "idUserActionClientData"; 
		public const string DBActionType = "actionType"; 
		public const string DBStart = "start"; 
		public const string DBStop = "stop"; 
		public const string DBIdTable = "idTable"; 
		public const string DBIdRegister = "idRegister"; 
		public const string DBIdComponent = "idComponent"; 
		public const string DBIdService = "idService"; 
	} 
} 
/// Archivo de Libreria Base ZOE.
/// Usado principalmente por el compilador
/// ZOE para simular los tipos nativos.
/// 2007(R) Alexis, Ferreyra.
/// Archivo de Libreria Base ZOE.
/// Usado principalmente por el compilador
/// ZOE para simular los tipos nativos.
/// 2007(R) Alexis, Ferreyra.
/// Archivo de Libreria Base ZOE.
/// Usado principalmente por el compilador
/// ZOE para simular los tipos nativos.
/// 2007(R) Alexis, Ferreyra.
/// Archivo de Libreria Base ZOE.
/// Usado principalmente por el compilador
/// ZOE para simular los tipos nativos.
/// 2007(R) Alexis, Ferreyra.
/// Archivo de Libreria Base ZOE.
/// Usado principalmente por el compilador
/// ZOE para simular los tipos nativos.
/// 2007(R) Alexis, Ferreyra.

/*--- Final del archivo generado ---*/
