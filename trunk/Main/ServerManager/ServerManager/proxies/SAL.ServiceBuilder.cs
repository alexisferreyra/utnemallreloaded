//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UtnEmall.ServerManager.SAL.ServiceBuilder {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SAL.ServiceBuilder.IServiceBuilder")]
    public interface IServiceBuilder {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBuilder/BuildAndImplementInfrastructureService", ReplyAction="http://tempuri.org/IServiceBuilder/BuildAndImplementInfrastructureServiceResponse" +
            "")]
        [UtnEmall.Server.Core.ReferencePreservingDataContractFormat]
        bool BuildAndImplementInfrastructureService(UtnEmall.Server.EntityModel.DataModelEntity serviceDataModel, bool insertTestData, string sessionIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceBuilder/BuildAndImplementInfrastructureService", ReplyAction="http://tempuri.org/IServiceBuilder/BuildAndImplementInfrastructureServiceResponse" +
            "")]
        System.IAsyncResult BeginBuildAndImplementInfrastructureService(UtnEmall.Server.EntityModel.DataModelEntity serviceDataModel, bool insertTestData, string sessionIdentifier, System.AsyncCallback callback, object asyncState);
        
        bool EndBuildAndImplementInfrastructureService(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceBuilder/BuildAndImplementCustomService", ReplyAction="http://tempuri.org/IServiceBuilder/BuildAndImplementCustomServiceResponse")]
        [UtnEmall.Server.Core.ReferencePreservingDataContractFormat]
        bool BuildAndImplementCustomService(UtnEmall.Server.EntityModel.CustomerServiceDataEntity customerService, string sessionIdentifier);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IServiceBuilder/BuildAndImplementCustomService", ReplyAction="http://tempuri.org/IServiceBuilder/BuildAndImplementCustomServiceResponse")]
        System.IAsyncResult BeginBuildAndImplementCustomService(UtnEmall.Server.EntityModel.CustomerServiceDataEntity customerService, string sessionIdentifier, System.AsyncCallback callback, object asyncState);
        
        bool EndBuildAndImplementCustomService(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IServiceBuilderChannel : UtnEmall.ServerManager.SAL.ServiceBuilder.IServiceBuilder, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class BuildAndImplementInfrastructureServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BuildAndImplementInfrastructureServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class BuildAndImplementCustomServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public BuildAndImplementCustomServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class ServiceBuilderClient : System.ServiceModel.ClientBase<UtnEmall.ServerManager.SAL.ServiceBuilder.IServiceBuilder>, UtnEmall.ServerManager.SAL.ServiceBuilder.IServiceBuilder {
        
        private BeginOperationDelegate onBeginBuildAndImplementInfrastructureServiceDelegate;
        
        private EndOperationDelegate onEndBuildAndImplementInfrastructureServiceDelegate;
        
        private System.Threading.SendOrPostCallback onBuildAndImplementInfrastructureServiceCompletedDelegate;
        
        private BeginOperationDelegate onBeginBuildAndImplementCustomServiceDelegate;
        
        private EndOperationDelegate onEndBuildAndImplementCustomServiceDelegate;
        
        private System.Threading.SendOrPostCallback onBuildAndImplementCustomServiceCompletedDelegate;
        
        public ServiceBuilderClient() {
        }
        
        public ServiceBuilderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceBuilderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBuilderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceBuilderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<BuildAndImplementInfrastructureServiceCompletedEventArgs> BuildAndImplementInfrastructureServiceCompleted;
        
        public event System.EventHandler<BuildAndImplementCustomServiceCompletedEventArgs> BuildAndImplementCustomServiceCompleted;
        
        public bool BuildAndImplementInfrastructureService(UtnEmall.Server.EntityModel.DataModelEntity serviceDataModel, bool insertTestData, string sessionIdentifier) {
            return base.Channel.BuildAndImplementInfrastructureService(serviceDataModel, insertTestData, sessionIdentifier);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuildAndImplementInfrastructureService(UtnEmall.Server.EntityModel.DataModelEntity serviceDataModel, bool insertTestData, string sessionIdentifier, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuildAndImplementInfrastructureService(serviceDataModel, insertTestData, sessionIdentifier, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndBuildAndImplementInfrastructureService(System.IAsyncResult result) {
            return base.Channel.EndBuildAndImplementInfrastructureService(result);
        }
        
        private System.IAsyncResult OnBeginBuildAndImplementInfrastructureService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            UtnEmall.Server.EntityModel.DataModelEntity serviceDataModel = ((UtnEmall.Server.EntityModel.DataModelEntity)(inValues[0]));
            bool insertTestData = ((bool)(inValues[1]));
            string sessionIdentifier = ((string)(inValues[2]));
            return this.BeginBuildAndImplementInfrastructureService(serviceDataModel, insertTestData, sessionIdentifier, callback, asyncState);
        }
        
        private object[] OnEndBuildAndImplementInfrastructureService(System.IAsyncResult result) {
            bool retVal = this.EndBuildAndImplementInfrastructureService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuildAndImplementInfrastructureServiceCompleted(object state) {
            if ((this.BuildAndImplementInfrastructureServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuildAndImplementInfrastructureServiceCompleted(this, new BuildAndImplementInfrastructureServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuildAndImplementInfrastructureServiceAsync(UtnEmall.Server.EntityModel.DataModelEntity serviceDataModel, bool insertTestData, string sessionIdentifier) {
            this.BuildAndImplementInfrastructureServiceAsync(serviceDataModel, insertTestData, sessionIdentifier, null);
        }
        
        public void BuildAndImplementInfrastructureServiceAsync(UtnEmall.Server.EntityModel.DataModelEntity serviceDataModel, bool insertTestData, string sessionIdentifier, object userState) {
            if ((this.onBeginBuildAndImplementInfrastructureServiceDelegate == null)) {
                this.onBeginBuildAndImplementInfrastructureServiceDelegate = new BeginOperationDelegate(this.OnBeginBuildAndImplementInfrastructureService);
            }
            if ((this.onEndBuildAndImplementInfrastructureServiceDelegate == null)) {
                this.onEndBuildAndImplementInfrastructureServiceDelegate = new EndOperationDelegate(this.OnEndBuildAndImplementInfrastructureService);
            }
            if ((this.onBuildAndImplementInfrastructureServiceCompletedDelegate == null)) {
                this.onBuildAndImplementInfrastructureServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuildAndImplementInfrastructureServiceCompleted);
            }
            base.InvokeAsync(this.onBeginBuildAndImplementInfrastructureServiceDelegate, new object[] {
                        serviceDataModel,
                        insertTestData,
                        sessionIdentifier}, this.onEndBuildAndImplementInfrastructureServiceDelegate, this.onBuildAndImplementInfrastructureServiceCompletedDelegate, userState);
        }
        
        public bool BuildAndImplementCustomService(UtnEmall.Server.EntityModel.CustomerServiceDataEntity customerService, string sessionIdentifier) {
            return base.Channel.BuildAndImplementCustomService(customerService, sessionIdentifier);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginBuildAndImplementCustomService(UtnEmall.Server.EntityModel.CustomerServiceDataEntity customerService, string sessionIdentifier, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginBuildAndImplementCustomService(customerService, sessionIdentifier, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndBuildAndImplementCustomService(System.IAsyncResult result) {
            return base.Channel.EndBuildAndImplementCustomService(result);
        }
        
        private System.IAsyncResult OnBeginBuildAndImplementCustomService(object[] inValues, System.AsyncCallback callback, object asyncState) {
            UtnEmall.Server.EntityModel.CustomerServiceDataEntity customerService = ((UtnEmall.Server.EntityModel.CustomerServiceDataEntity)(inValues[0]));
            string sessionIdentifier = ((string)(inValues[1]));
            return this.BeginBuildAndImplementCustomService(customerService, sessionIdentifier, callback, asyncState);
        }
        
        private object[] OnEndBuildAndImplementCustomService(System.IAsyncResult result) {
            bool retVal = this.EndBuildAndImplementCustomService(result);
            return new object[] {
                    retVal};
        }
        
        private void OnBuildAndImplementCustomServiceCompleted(object state) {
            if ((this.BuildAndImplementCustomServiceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.BuildAndImplementCustomServiceCompleted(this, new BuildAndImplementCustomServiceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void BuildAndImplementCustomServiceAsync(UtnEmall.Server.EntityModel.CustomerServiceDataEntity customerService, string sessionIdentifier) {
            this.BuildAndImplementCustomServiceAsync(customerService, sessionIdentifier, null);
        }
        
        public void BuildAndImplementCustomServiceAsync(UtnEmall.Server.EntityModel.CustomerServiceDataEntity customerService, string sessionIdentifier, object userState) {
            if ((this.onBeginBuildAndImplementCustomServiceDelegate == null)) {
                this.onBeginBuildAndImplementCustomServiceDelegate = new BeginOperationDelegate(this.OnBeginBuildAndImplementCustomService);
            }
            if ((this.onEndBuildAndImplementCustomServiceDelegate == null)) {
                this.onEndBuildAndImplementCustomServiceDelegate = new EndOperationDelegate(this.OnEndBuildAndImplementCustomService);
            }
            if ((this.onBuildAndImplementCustomServiceCompletedDelegate == null)) {
                this.onBuildAndImplementCustomServiceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnBuildAndImplementCustomServiceCompleted);
            }
            base.InvokeAsync(this.onBeginBuildAndImplementCustomServiceDelegate, new object[] {
                        customerService,
                        sessionIdentifier}, this.onEndBuildAndImplementCustomServiceDelegate, this.onBuildAndImplementCustomServiceCompletedDelegate, userState);
        }
    }
}
