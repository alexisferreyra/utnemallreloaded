<XPLDocument><DocumentBody ldsrc="1,1,.\\MainTemplate.es\\InstanceBuilderTemplate.dpp"><Import ldsrc="1"><ns>System</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Using ldsrc="2"><ns>DotNET::System</ns></Using><Using ldsrc="3"><ns>DotNET::System::IO</ns></Using><Using ldsrc="4"><ns>DotNET::System::Collections</ns></Using><Using ldsrc="5"><ns>DotNET::LayerD::CodeDOM</ns></Using><Using ldsrc="6"><ns>DotNET::LayerD::ZOECompiler</ns></Using><Namespace name="Zoe::Tools" ldsrc="8,485"><Class name="iObjectInterpreterBuilder" access="public" isfactory="true" isinteractive="true" ldsrc="10,74"><Function name="Sample" internalname="Sample#1" access="public" storage="static" ldsrc="12,12"><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplClass"><dt typename="XplClass" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="12,14"><return ldsrc="13,13"><fc><l><n>Help</n></l><args /></fc></return></FunctionBody></Function><Function name="Help" internalname="Help#2" access="public" storage="static" ldsrc="15,15"><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplClass"><dt typename="XplClass" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="15,73"><e ldsrc="16"><fc><l><n>Console::WriteLine</n></l><args><e><lit str="Ejecutando Help de iObjectInterpreterBuilder." /></e></args></fc></e><return ldsrc="17,72"><writecode ldsrc="17"><class name="SampleDSL" access="public" isfactory="true" ldsrc="18,71"><Function name="New" access="public" storage="static" ldsrc="21,21"><Parameters><P name="dslData" number="1"><type typename="$BLOCK$" ldsrc="21" /></P></Parameters><ReturnType ispointer="true"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="21,26"><Decls><d name="interpreter" ldsrc="22"><type ispointer="true"><dt typename="MyInterpreter" /><pi ref="true" /></type><i ldsrc="22"><e><new><type typename="MyInterpreter" /></new></e></i></d></Decls><Decls><d name="data" ldsrc="23"><type ispointer="true"><dt typename="DSLData" /><pi ref="true" /></type><i ldsrc="23"><e><fc><l><bo op="m"><l><n>interpreter</n></l><r><n>ProcessDSLData</n></r></bo></l><args><e><n>dslData</n></e></args></fc></e></i></d></Decls><documentation short=" Call code generation function&#xD;&#xA;" /><return ldsrc="25,25"><fc><l><n>Generate</n></l><args><e><n>data</n></e></args></fc></return></FunctionBody></Function><Function name="Generate" access="public" storage="static" ldsrc="28,28"><Parameters><P name="data" number="1"><type ispointer="true" ldsrc="28"><dt typename="DSLData" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" /><FunctionBody ldsrc="28,30"><documentation short=" Place your generation code here&#xD;&#xA;" /></FunctionBody></Function><documentation short=" Class to store main DSL data&#xD;&#xA;" /><Class name="DSLData" ldsrc="33,39"><Field name="SampleName" access="public" ldsrc="35,35"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type></Field><Field name="SampleInt" access="public" ldsrc="36,36"><type typename="$INTEGER$" /></Field><Field name="SampleString" access="public" ldsrc="37,37"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="SampleCollection" access="public" ldsrc="38,38"><type ispointer="true"><dt typename="ArrayList" /><pi ref="true" /></type><i ldsrc="38"><e><new><type typename="ArrayList" /></new></e></i></Field></Class><documentation short=" Class to store collection item data&#xD;&#xA;" /><Class name="SampleItem" ldsrc="41,46"><Field name="SampleExpression" access="public" ldsrc="43,43"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type></Field><Field name="SampleFloat" access="public" ldsrc="44,44"><type typename="$FLOAT$" /></Field><Field name="SampleBoolean" access="public" ldsrc="45,45"><type typename="$BOOLEAN$" /></Field></Class><documentation short=" Sample DSL Model for ObjectInterpreterBuilder&#xD;&#xA;" /><e ldsrc="70"><fc><l><n>ObjectInterpreterBuilder::New</n></l><args><e><n>MyInterpreter</n></e><e><n>DSLData</n></e></args><bk ldsrc="48,70"><documentation short=" Use &quot;INAME&quot; to capture an identifier on a XplIName field&#xD;&#xA;" /><e ldsrc="50"><a><l><n>SampleName</n></l><r><n>INAME</n></r></a></e><documentation short=" Use &quot;INT&quot; to capture an integer literal&#xD;&#xA;" /><e ldsrc="52"><a><l><n>SampleInt</n></l><r><n>INT</n></r></a></e><documentation short=" Use &quot;STRING&quot; to capture a string literal&#xD;&#xA;" /><e ldsrc="54"><a><l><n>SampleString</n></l><r><n>STRING</n></r></a></e><documentation short=" Use &quot;Collection(COLLECTION_FIELD_NAME) { ... };&quot; to capture&#xD;&#xA; collection of items, the collection must have an &quot;Add( item )&quot;&#xD;&#xA; method and must be initialized&#xD;&#xA;" /><e ldsrc="69"><fc><l><n>Collection</n></l><args><e><n>SampleCollection</n></e></args><bk ldsrc="58,69"><documentation short=" Use &quot;ITEM_TYPE { ...item content... };&quot; to capture&#xD;&#xA; each type of items inside the collection&#xD;&#xA;" /><e ldsrc="68"><fc><l><n>SampleItem</n></l><bk ldsrc="61,68"><documentation short=" Use &quot;EXPRESSION&quot; to capture a complete expression&#xD;&#xA;" /><e ldsrc="63"><a><l><n>SampleExpression</n></l><r><n>EXPRESSION</n></r></a></e><documentation short=" Use &quot;FLOAT&quot; to capture a float literal&#xD;&#xA;" /><e ldsrc="65"><a><l><n>SampleFloat</n></l><r><n>FLOAT</n></r></a></e><documentation short=" Use &quot;BOOL&quot; to capture a boolean literal&#xD;&#xA;" /><e ldsrc="67"><a><l><n>SampleBoolean</n></l><r><n>BOOL</n></r></a></e></bk></fc></e></bk></fc></e></bk></fc></e></class></writecode></return></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryInteractiveBase" access="public" /></Inherits></Class><Class name="ObjectInterpreterBuilder" access="public" isfactory="true" ldsrc="76,372"><Field name="generatedFunctions" storage="static" ldsrc="77,77"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type></Field><Function name="New" internalname="New#2" access="public" storage="static" ldsrc="79,79"><Parameters><P name="interpreterName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="79" /></P><P name="mainClass" number="2"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="79" /></P><P name="contentTemplate" number="3"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="79" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="79,91"><Decls><d name="interpreterClass" ldsrc="80"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="80"><e><writecode ldsrc="80"><class name="$interpreterName" access="public" ldsrc="81,84"><Field name="compiler" ldsrc="82,82"><type ispointer="true"><dt typename="ZOECompilerCore" /><pi ref="true" /></type><i ldsrc="82"><e><n>ClassfactoryBase::compiler</n></e></i></Field></class></writecode></e></i></d></Decls><e ldsrc="86"><a><l><n>generatedFunctions</n></l><r><new><type typename="Hashtable" /></new></r></a></e><e ldsrc="88"><fc><l><n>MakeFunctionForType</n></l><args><e><n>interpreterClass</n></e><e><n>mainClass</n></e><e><n>contentTemplate</n></e></args></fc></e><return ldsrc="90,90"><n>interpreterClass</n></return></FunctionBody></Function><Function name="MakeFunctionForType" internalname="MakeFunctionForType#3" storage="static" ldsrc="93,93"><Parameters><P name="interpreterClass" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplClass" ldsrc="93"><dt typename="XplClass" /><pi ref="true" /></type></P><P name="classType" number="2"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="93" /></P><P name="contentTemplate" number="3"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunctionBody" ldsrc="93"><dt typename="XplFunctionBody" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="93,371"><Decls><d name="functionName" ldsrc="94"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="94"><e><new><type typename="XplIName" /><init ldsrc="94"><list><e><bo><l><lit str="Process" /></l><r><bo op="m"><l><n>classType</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><if ldsrc="96"><boolean><fc><l><bo op="m"><l><n>generatedFunctions</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>functionName</n></l><r><n>Identifier</n></r></bo></e></args></fc></boolean><ifbk><return ldsrc="96" /></ifbk></if><e ldsrc="97"><fc><l><bo op="m"><l><n>generatedFunctions</n></l><r><n>Add</n></r></bo></l><args><e><bo op="m"><l><n>functionName</n></l><r><n>Identifier</n></r></bo></e><e><bo op="m"><l><n>functionName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><Decls><d name="propertysIfs" ldsrc="99"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="99"><e><new><type typename="XplFunctionBody" /></new></e></i></d><d name="collectionsIfs" ldsrc="99"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="99"><e><new><type typename="XplFunctionBody" /></new></e></i></d></Decls><documentation short="Itero en los nodos del template para generar los Ifs y otras funciones que hagan falta&#xD;&#xA;" /><for ldsrc="102,102"><init><dl><d name="nodeIt" ldsrc="102"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>contentTemplate</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="102,302"><Decls><d name="node" ldsrc="103"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="103"><e><fc><l><bo op="m"><l><n>nodeIt</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="104"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplAssing" /></r></bo></r></bo></boolean><ifbk ldsrc="104,213"><Decls><d name="assingNode" ldsrc="105"><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type><i ldsrc="105"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="leftExp" ldsrc="106"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="106"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_l</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="rightExp" ldsrc="107"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="107"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_r</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="108"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="109,112"><e ldsrc="110"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="110"><list><e><lit str="Se requiere un identificador en lado izquierdo de Content Tempalte." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="111" /></ifbk></if><if ldsrc="113"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="114,117"><e ldsrc="115"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="115"><list><e><lit str="Se requiere un identificador en lado derecho de Content Tempalte." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="116" /></ifbk></if><Decls><d name="propertyName" ldsrc="118"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="118"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="propertyType" ldsrc="119"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="119"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="propertyIf" ldsrc="120"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="120"><e><lit str="0" type="null" /></e></i></d></Decls><documentation short="Armo el if para la propiedad actual&#xD;&#xA;" /><if ldsrc="122"><boolean><bo op="AND"><l><bo op="AND"><l><bo op="AND"><l><bo op="AND"><l><bo op="AND"><l><bo op="AND"><l><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="STRING" /></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="INT" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="LONG" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="FLOAT" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="BOOL" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="INAME" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><n>propertyType</n></l><r><lit str="EXPRESSION" /></r></bo></r></bo></boolean><ifbk ldsrc="122,124"><e ldsrc="123"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="123"><list><e><lit str="Se requiere un tipo soportado en lado derecho propiedad de Content Tempalte." /></e><e><n>node</n></e></list></init></new></e></args></fc></e></ifbk><else ldsrc="125"><if ldsrc="126"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="EXPRESSION" /></r></bo></boolean><ifbk ldsrc="126,133"><e ldsrc="132"><a><l><n>propertyIf</n></l><r><writecode ldsrc="127"><bk><if ldsrc="128"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="128,131"><e ldsrc="129"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><e ldsrc="130"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></r></a></e></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="134"><if ldsrc="134"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="INAME" /></r></bo></boolean><ifbk ldsrc="134,141"><e ldsrc="140"><a><l><n>propertyIf</n></l><r><writecode ldsrc="135"><bk><if ldsrc="136"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="136,139"><e ldsrc="137"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><e ldsrc="138"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><new><type typename="XplIName" /><init ldsrc="138"><list><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></list></init></new></r></a></e></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="142"><if ldsrc="142"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="STRING" /></r></bo></boolean><ifbk ldsrc="142,149"><e ldsrc="148"><a><l><n>propertyIf</n></l><r><writecode ldsrc="143"><bk><if ldsrc="144"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="144,147"><e ldsrc="145"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><e ldsrc="146"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></r></a></e></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="150"><if ldsrc="150"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="INT" /></r></bo></boolean><ifbk ldsrc="150,167"><e ldsrc="166"><a><l><n>propertyIf</n></l><r><writecode ldsrc="151"><bk><if ldsrc="152"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="152,165"><e ldsrc="153"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><Decls><d name="tempstr" ldsrc="154"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="154"><e><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="155"><boolean><bo op="AND"><l><bo op="AND"><l><bo op="NOTEQ"><l><n>tempstr</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="GR"><l><bo op="m"><l><n>tempstr</n></l><r><n>Length</n></r></bo></l><r><lit str="1" type="integer" /></r></bo></r></bo></l><r><bo op="OR"><l><bo op="EQ"><l><b><l><n>tempstr</n></l><args><e><lit str="1" type="integer" /></e></args></b></l><r><lit str="x" type="char" /></r></bo></l><r><bo op="EQ"><l><b><l><n>tempstr</n></l><args><e><lit str="1" type="integer" /></e></args></b></l><r><lit str="X" type="char" /></r></bo></r></bo></r></bo></boolean><ifbk ldsrc="155,159"><e ldsrc="158"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Int32::Parse</n></l><args><e><fc><l><bo op="m"><l><n>tempstr</n></l><r><n>Substring</n></r></bo></l><args><e><lit str="2" type="integer" /></e></args></fc></e><e><n>DotNET::System::Globalization::NumberStyles::AllowHexSpecifier</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></ifbk><else ldsrc="160"><e ldsrc="163"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Int32::Parse</n></l><args><e><n>tempstr</n></e><e><n>DotNET::System::Globalization::NumberStyles::Number</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></else></if></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="168"><if ldsrc="168"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="LONG" /></r></bo></boolean><ifbk ldsrc="168,185"><e ldsrc="184"><a><l><n>propertyIf</n></l><r><writecode ldsrc="169"><bk><if ldsrc="170"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="170,183"><e ldsrc="171"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><Decls><d name="tempstr" ldsrc="172"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="172"><e><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="173"><boolean><bo op="AND"><l><bo op="AND"><l><bo op="NOTEQ"><l><n>tempstr</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="GR"><l><bo op="m"><l><n>tempstr</n></l><r><n>Length</n></r></bo></l><r><lit str="1" type="integer" /></r></bo></r></bo></l><r><bo op="OR"><l><bo op="EQ"><l><b><l><n>tempstr</n></l><args><e><lit str="1" type="integer" /></e></args></b></l><r><lit str="x" type="char" /></r></bo></l><r><bo op="EQ"><l><b><l><n>tempstr</n></l><args><e><lit str="1" type="integer" /></e></args></b></l><r><lit str="X" type="char" /></r></bo></r></bo></r></bo></boolean><ifbk ldsrc="173,177"><e ldsrc="176"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Int64::Parse</n></l><args><e><fc><l><bo op="m"><l><n>tempstr</n></l><r><n>Substring</n></r></bo></l><args><e><lit str="2" type="integer" /></e></args></fc></e><e><n>DotNET::System::Globalization::NumberStyles::AllowHexSpecifier</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></ifbk><else ldsrc="178"><e ldsrc="181"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Int64::Parse</n></l><args><e><n>tempstr</n></e><e><n>DotNET::System::Globalization::NumberStyles::Number</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></else></if></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="186"><if ldsrc="186"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="FLOAT" /></r></bo></boolean><ifbk ldsrc="186,195"><e ldsrc="194"><a><l><n>propertyIf</n></l><r><writecode ldsrc="187"><bk><if ldsrc="188"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="188,193"><e ldsrc="189"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><e ldsrc="192"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><fc><l><n>Single::Parse</n></l><args><e><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></e><e><n>DotNET::System::Globalization::NumberStyles::Number</n></e><e><n>DotNET::System::Globalization::NumberFormatInfo::InvariantInfo</n></e></args></fc></r></a></e></ifbk></if></bk></writecode></r></a></e></ifbk><else ldsrc="196"><if ldsrc="196"><boolean><bo op="EQ"><l><n>propertyType</n></l><r><lit str="BOOL" /></r></bo></boolean><ifbk ldsrc="196,206"><e ldsrc="205"><a><l><n>propertyIf</n></l><r><writecode ldsrc="197"><bk><if ldsrc="198"><boolean><bo op="EQ"><l><n>propertyName</n></l><r><n>$propertyName</n></r></bo></boolean><ifbk ldsrc="198,204"><e ldsrc="199"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><if ldsrc="200"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type></cast></l><r><n>get_str</n></r></bo></l><args /></fc></l><r><lit str="true" /></r></bo></boolean><ifbk><e ldsrc="201"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><lit str="true" type="bool" /></r></a></e></ifbk><else ldsrc="202"><e ldsrc="203"><a><l><bo op="m"><l><n>instance</n></l><r><n>$leftExp</n></r></bo></l><r><lit str="false" type="bool" /></r></a></e></else></if></ifbk></if></bk></writecode></r></a></e></ifbk></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if><documentation short="Agrego el bloque if al bloque de ifs :-)&#xD;&#xA;" /><if ldsrc="209"><boolean><bo op="NOTEQ"><l><n>propertyIf</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="209,212"><e ldsrc="210"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Propiedad agregada. " /></l><r><n>propertyName</n></r></bo></e></args></fc></e><e ldsrc="211"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>propertysIfs</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><n>propertyIf</n></l><r><n>Children</n></r></bo></l><args /></fc></e></args></fc></e></ifbk></if></ifbk><else ldsrc="214"><if ldsrc="214"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></r></bo></boolean><ifbk ldsrc="214,297"><documentation short=" Si es una llamada a función&#xD;&#xA;" /><Decls><d name="functionCall" ldsrc="216"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="216"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="fcBlock" ldsrc="217"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="217"><e><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="218"><boolean><bo op="EQ"><l><n>fcBlock</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="218,221"><e ldsrc="219"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="219"><list><e><lit str="Se requiere un bloque en el Content Template." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="220" /></ifbk></if><Decls><d name="leftNode" ldsrc="222"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="222"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="223"><boolean><bo op="OR"><l><bo op="EQ"><l><n>leftNode</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="223,226"><e ldsrc="224"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="224"><list><e><lit str="Se requiere un identificador en el Content Template." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="225" /></ifbk></if><if ldsrc="227"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="GR"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>GetLength</n></r></bo></l><args /></fc></l><r><lit str="0" type="integer" /></r></bo></r></bo></boolean><ifbk ldsrc="227,292"><documentation short="Puede ser una colección o algun item especial&#xD;&#xA;" /><if ldsrc="229"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_StringValue</n></r></bo></l><args /></fc></l><r><lit str="Collection" /></r></bo></boolean><ifbk ldsrc="229,279"><Decls><d name="collectionFieldName" ldsrc="230"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="230"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="collectionName" ldsrc="231"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="231"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>collectionFieldName</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="itemsTypesIfs" ldsrc="232"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="232"><e><new><type typename="XplFunctionBody" /></new></e></i></d></Decls><documentation short="Itero en la colección para ver los tipos que contiene la colección&#xD;&#xA;" /><for ldsrc="235,235"><init><dl><d name="nodeItCol" ldsrc="235"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>fcBlock</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="235,259"><if ldsrc="236"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>nodeItCol</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>nodeItCol</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></r></bo></boolean><ifbk ldsrc="236,255"><documentation short="Obtengo el nombre de tipo de los items&#xD;&#xA;" /><Decls><d name="collectionTypeFunc" ldsrc="238"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="238"><e><cast><e><fc><l><bo op="m"><l><n>nodeItCol</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="collectionItemTypeName" ldsrc="239"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="239"><e><new><type typename="XplIName" /><init ldsrc="239"><list><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>collectionTypeFunc</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="collectionItemTypeNameStr" ldsrc="240"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="240"><e><bo op="m"><l><n>collectionItemTypeName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="functionForItemType" ldsrc="241"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="241"><e><new><type typename="XplIName" /><init ldsrc="241"><list><e><bo><l><lit str="Process" /></l><r><bo op="m"><l><n>collectionItemTypeName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><documentation short="Creo la funcion para el tipo de los items&#xD;&#xA;" /><e ldsrc="243"><fc><l><n>MakeFunctionForType</n></l><args><e><n>interpreterClass</n></e><e><n>collectionItemTypeName</n></e><e><fc><l><bo op="m"><l><n>collectionTypeFunc</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></args></fc></e><documentation short="Creo el código para el interprete&#xD;&#xA;" /><e ldsrc="254"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>itemsTypesIfs</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="246"><bk><if ldsrc="247"><boolean><bo op="EQ"><l><bo op="m"><l><n>itemTypeName</n></l><r><n>Identifier</n></r></bo></l><r><n>$collectionItemTypeNameStr</n></r></bo></boolean><ifbk ldsrc="247,252"><documentation short="Creo la instancia del tipo del item&#xD;&#xA;" /><Decls><d name="item" ldsrc="249"><type ispointer="true"><dt typename="$collectionItemTypeName" /><pi ref="true" /></type><i ldsrc="249"><e><fc><l><n>$functionForItemType</n></l><args><e><n>fcbk</n></e></args></fc></e></i></d></Decls><documentation short="Lo agrego a la coleccion&#xD;&#xA;" /><e ldsrc="251"><fc><l><bo op="m"><l><bo op="m"><l><n>instance</n></l><r><n>$collectionFieldName</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><n>item</n></e></args></fc></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e></args></fc></e></ifbk><else ldsrc="256"><e ldsrc="257"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="257"><list><e><lit str="Error en el modelo de colección en el Content Template." /></e><e><n>nodeItCol</n></e></list></init></new></e></args></fc></e></else></if></forblock></for><documentation short="Código comun&#xD;&#xA;" /><e ldsrc="277"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>collectionsIfs</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="262"><bk><if ldsrc="263"><boolean><bo op="EQ"><l><n>collectionName</n></l><r><n>$collectionName</n></r></bo></boolean><ifbk ldsrc="263,275"><e ldsrc="264"><a><l><n>errorFlag</n></l><r><lit str="false" type="bool" /></r></a></e><for ldsrc="265,265"><init><dl><d name="node2" ldsrc="265"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>fcBlock</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="265,274"><documentation short="asumo q cada nodo es una llamada a funcion de la forma:  id{ }&#xD;&#xA;" /><if ldsrc="267"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>node2</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>node2</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></r></bo></boolean><ifbk ldsrc="267,273"><Decls><d name="fc" ldsrc="268"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="268"><e><cast><e><fc><l><bo op="m"><l><n>node2</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="itemTypeName" ldsrc="269"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="269"><e><new><type typename="XplIName" /><init ldsrc="269"><list><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>fc</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="fcbk" ldsrc="270"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="270"><e><fc><l><bo op="m"><l><n>fc</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></i></d></Decls><e ldsrc="272"><n>$itemsTypesIfs</n></e></ifbk></if></forblock></for></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e></args></fc></e></ifbk><else ldsrc="280"><documentation short="Es un item &#xD;&#xA;" /><Decls><d name="simpleItemFieldName" ldsrc="282"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="282"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short="Si no es un identificador es un error&#xD;&#xA;" /><if ldsrc="284"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>simpleItemFieldName</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>simpleItemFieldName</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="284,286"><e ldsrc="285"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="285"><list><e><lit str="Se requiere un identificador en el Content Template." /></e><e><n>simpleItemFieldName</n></e></list></init></new></e></args></fc></e></ifbk><else ldsrc="287"><documentation short="Pendiente el codigo para cuando es un item solo&#xD;&#xA;" /><e ldsrc="289"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="289"><list><e><lit str="El código para un item solo no esta implementado en Content Template." /></e><e><n>simpleItemFieldName</n></e></list></init></new></e></args></fc></e></else></if></else></if></ifbk><else ldsrc="293"><documentation short="Es un item simple&#xD;&#xA;Primero proceso el tipo para el elemento&#xD;&#xA;" /></else></if></ifbk><else ldsrc="298"><documentation short=" Tipo de expresión no reconocida, será ignorada.&#xD;&#xA;" /><e ldsrc="300"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="300"><list><e><lit str="Expresión no reconocida en el Content Template." /></e><e><n>node</n></e></list></init></new></e></args></fc></e></else></if></else></if></forblock></for><documentation short="Creo la función para procesar el tipo&#xD;&#xA;" /><Decls><d name="function" ldsrc="305"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="305"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="306"><classmembers><Function name="$functionName" access="public" ldsrc="308,308"><Parameters><P name="instanceData" number="1"><type ispointer="true" ldsrc="308"><dt typename="XplFunctionBody" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$classType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="308,366"><Decls><d name="instance" ldsrc="309"><type ispointer="true"><dt typename="$classType" /><pi ref="true" /></type><i ldsrc="309"><e><new><type typename="$classType" /></new></e></i></d></Decls><Decls><d name="errorFlag" ldsrc="310"><type typename="$BOOLEAN$" /><i ldsrc="310"><e><lit str="false" type="bool" /></e></i></d></Decls><Decls><d name="errorNode" ldsrc="311"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="311"><e><lit str="0" type="null" /></e></i></d></Decls><for ldsrc="313,313"><init><dl><d name="nodeIt" ldsrc="313"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>instanceData</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="313,363"><Decls><d name="node" ldsrc="314"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="314"><e><fc><l><bo op="m"><l><n>nodeIt</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="315"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplAssing" /></r></bo></r></bo></boolean><ifbk ldsrc="315,333"><Decls><d name="assingNode" ldsrc="316"><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type><i ldsrc="316"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="leftExp" ldsrc="317"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="317"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_l</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="rightExp" ldsrc="318"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="318"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_r</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="319"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="320,323"><e ldsrc="321"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="321"><list><e><lit str="Se requiere un identificador en Instance Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="322,322"><lit str="0" type="null" /></return></ifbk></if><Decls><d name="propertyName" ldsrc="324"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="324"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>leftExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><e ldsrc="325"><a><l><n>errorFlag</n></l><r><lit str="true" type="bool" /></r></a></e><e ldsrc="327"><n>$propertysIfs</n></e><if ldsrc="329"><boolean><n>errorFlag</n></boolean><ifbk ldsrc="329,332"><e ldsrc="330"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="330"><list><e><bo><l><bo><l><lit str="Propiedad " /></l><r><n>propertyName</n></r></bo></l><r><lit str=" no soportada en Instance Creator." /></r></bo></e><e><n>errorNode</n></e></list></init></new></e></args></fc></e><return ldsrc="331,331"><lit str="0" type="null" /></return></ifbk></if></ifbk><else ldsrc="334"><if ldsrc="334"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></r></bo></boolean><ifbk ldsrc="334,356"><Decls><d name="functionCall" ldsrc="335"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="335"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="fcBlock" ldsrc="336"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="336"><e><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="337"><boolean><bo op="EQ"><l><n>fcBlock</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="337,341"><documentation short=" Es un error&#xD;&#xA;" /><e ldsrc="339"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="339"><list><e><lit str="Se requiere un bloque para Instance Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="340,340"><lit str="0" type="null" /></return></ifbk></if><Decls><d name="leftNode" ldsrc="342"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="342"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="343"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>leftNode</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="343,346"><e ldsrc="344"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="344"><list><e><lit str="Se requiere un identificador en Instance Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="345,345"><lit str="0" type="null" /></return></ifbk></if><Decls><d name="collectionName" ldsrc="347"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="347"><e><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></i></d></Decls><e ldsrc="348"><a><l><n>errorFlag</n></l><r><lit str="true" type="bool" /></r></a></e><e ldsrc="350"><n>$collectionsIfs</n></e><if ldsrc="352"><boolean><n>errorFlag</n></boolean><ifbk ldsrc="352,355"><e ldsrc="353"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="353"><list><e><lit str="Colección no soportada en Instance Creator." /></e><e><n>errorNode</n></e></list></init></new></e></args></fc></e><return ldsrc="354,354"><lit str="0" type="null" /></return></ifbk></if></ifbk><else ldsrc="357"><documentation short=" Tipo de expresión no reconocida, será ignorada.&#xD;&#xA;" /><e ldsrc="361"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="360"><list><e><lit str="Expresión no reconocida por Instance Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e></else></if></else></if></forblock></for><return ldsrc="365,365"><n>instance</n></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><e ldsrc="370"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>interpreterClass</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>function</n></e></args></fc></e></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class><Class name="ObjectCreator" access="public" isfactory="true" ldsrc="373,484"><Function name="New" internalname="New#1" access="public" storage="static" ldsrc="375,375"><Parameters><P name="mainObjectType" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="375" /></P><P name="blockArgument" number="2"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="375" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="375,377"><return ldsrc="376,376"><fc><l><n>New</n></l><args><e><n>mainObjectType</n></e><e><lit str="false" type="bool" /></e><e><n>blockArgument</n></e></args></fc></return></FunctionBody></Function><Function name="New" internalname="New#2" access="public" storage="static" ldsrc="378,378"><Parameters><P name="mainObjectType" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="378" /></P><P name="simpleIdentifierToString" number="2"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="378" /></P><P name="blockArgument" number="3"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="378" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="378,411"><if ldsrc="379"><boolean><bo op="EQ"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="379,384"><e ldsrc="382"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="381"><list><e><lit str="No puede llamar a ObjectCreator.New fuera de una clase." /></e><e><n>context</n></e></list></init></new></e></args></fc></e><return ldsrc="383,383"><lit str="0" type="null" /></return></ifbk></if><Decls><d name="funcName" ldsrc="385"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="385"><e><new><type typename="XplIName" /></new></e></i></d></Decls><Decls><d name="funcBody" ldsrc="386"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="386"><e><new><type typename="XplFunctionBody" /></new></e></i></d></Decls><documentation short=" Proceso los elementos del bloque argumento&#xD;&#xA;" /><for ldsrc="389,389"><init><dl><d name="node" ldsrc="389"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>blockArgument</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="389,391"><e ldsrc="390"><fc><l><n>ProcessItem</n></l><args><e><n>node</n></e><e><n>funcBody</n></e><e><new><type typename="XplIName" /><init ldsrc="390"><list><e><lit str="retObj" /></e></list></init></new></e><e><lit str="0" type="null" /></e><e><lit str="0" type="null" /></e><e><n>simpleIdentifierToString</n></e></args></fc></e></forblock></for><documentation short=" Genero la función auxiliar&#xD;&#xA;" /><Decls><d name="func" ldsrc="394"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="394"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="394"><classmembers><Function name="$funcName" storage="static" ldsrc="396,396"><ReturnType ispointer="true"><dt typename="$mainObjectType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="396,402"><Decls><d name="retObj" ldsrc="397"><type ispointer="true"><dt typename="$mainObjectType" /><pi ref="true" /></type><i ldsrc="397"><e><new><type typename="$mainObjectType" /></new></e></i></d></Decls><e ldsrc="399"><n>$funcBody</n></e><return ldsrc="401,401"><n>retObj</n></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short=" Inserto la función auxiliar dentro de la clase actual&#xD;&#xA;" /><e ldsrc="407"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>func</n></e></args></fc></e><documentation short=" Retorno la llamada a funcion&#xD;&#xA;" /><return ldsrc="410,410"><writecode ldsrc="410"><e><fc><l><n>$funcName</n></l><args /></fc></e></writecode></return></FunctionBody></Function><Function name="ProcessItem" internalname="ProcessItem#3" storage="static" ldsrc="413,413"><Parameters><P name="node" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode" ldsrc="413"><dt typename="XplNode" /><pi ref="true" /></type></P><P name="body" number="2"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunctionBody" ldsrc="413"><dt typename="XplFunctionBody" /><pi ref="true" /></type></P><P name="parentObjectId" number="3"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName" ldsrc="413"><dt typename="XplIName" /><pi ref="true" /></type></P><P name="collectionIName" number="4"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName" ldsrc="413"><dt typename="XplIName" /><pi ref="true" /></type></P><P name="grandParentObjectId" number="5"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName" ldsrc="413"><dt typename="XplIName" /><pi ref="true" /></type></P><P name="simpleIdentifierToString" number="6"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="413" /></P></Parameters><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="413,483"><documentation short=" Si el nodo es nulo retorno&#xD;&#xA;" /><if ldsrc="415"><boolean><bo op="OR"><l><bo op="EQ"><l><n>node</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></r></bo></boolean><ifbk><return ldsrc="415" /></ifbk></if><documentation short=" Obtengo el contenido del nodo a procesar&#xD;&#xA;" /><e ldsrc="417"><a><l><n>node</n></l><r><fc><l><bo op="m"><l><n>node</n></l><r><n>get_Content</n></r></bo></l><args /></fc></r></a></e><if ldsrc="419"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplAssing" /></r></bo></boolean><ifbk ldsrc="419,433"><Decls><d name="assingNode" ldsrc="420"><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type><i ldsrc="420"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplAssing" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="leftExp" ldsrc="421"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="421"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_l</n></r></bo></l><args /></fc></e></i></d></Decls><Decls><d name="rightExp" ldsrc="422"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="422"><e><fc><l><bo op="m"><l><n>assingNode</n></l><r><n>get_r</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="423"><boolean><n>simpleIdentifierToString</n></boolean><ifbk ldsrc="423,429"><if ldsrc="424"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></boolean><ifbk ldsrc="424,428"><Decls><d name="lit" ldsrc="425"><type ispointer="true"><dt typename="XplLiteral" /><pi ref="true" /></type><i ldsrc="425"><e><fc><l><n>XplExpression::new_lit</n></l><args /></fc></e></i></d></Decls><e ldsrc="426"><fc><l><bo op="m"><l><n>lit</n></l><r><n>set_str</n></r></bo></l><args><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>get_Content</n></r></bo></l><args /></fc></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></args></fc></e><e ldsrc="427"><fc><l><bo op="m"><l><n>rightExp</n></l><r><n>set_Content</n></r></bo></l><args><e><n>lit</n></e></args></fc></e></ifbk></if></ifbk></if><e ldsrc="432"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="431"><e><a><l><bo op="m"><l><n>$parentObjectId</n></l><r><n>$leftExp</n></r></bo></l><r><n>$rightExp</n></r></a></e></writecode></e></args></fc></e></ifbk><else ldsrc="434"><if ldsrc="434"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>node</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunctioncall" /></r></bo></boolean><ifbk ldsrc="434,476"><Decls><d name="functionCall" ldsrc="435"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="435"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="fcBlock" ldsrc="436"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="436"><e><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_bk</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="437"><boolean><bo op="EQ"><l><n>fcBlock</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="437,443"><documentation short=" Es un error&#xD;&#xA;" /><e ldsrc="441"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="440"><list><e><lit str="Se requiere un bloque para Object Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="442" /></ifbk></if><Decls><d name="leftNode" ldsrc="444"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="444"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionCall</n></l><r><n>get_l</n></r></bo></l><args /></fc></l><r><n>get_Content</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="445"><boolean><bo op="AND"><l><bo op="NOTEQ"><l><n>leftNode</n></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplNode" /></r></bo></r></bo></boolean><ifbk ldsrc="445,450"><e ldsrc="448"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="447"><list><e><lit str="Se requiere un identificador en Object Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e><return ldsrc="449" /></ifbk></if><Decls><d name="leftNodeIName" ldsrc="451"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="451"><e><new><type typename="XplIName" /></new></e></i></d></Decls><Decls><d name="fcParentIName" ldsrc="452"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="452"><e><new><type typename="XplIName" /><init ldsrc="452"><list><e><fc><l><bo op="m"><l><n>leftNode</n></l><r><n>get_StringValue</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="newCollectionIName" ldsrc="453"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="453"><e><lit str="0" type="null" /></e></i></d></Decls><if ldsrc="454"><boolean><bo op="NOTEQ"><l><n>collectionIName</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="454,461"><documentation short=" Inserto la declaración para la variable del elemento&#xD;&#xA;" /><e ldsrc="460"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="457"><bk><Decls><d name="$leftNodeIName" ldsrc="458"><type ispointer="true"><dt typename="$fcParentIName" /><pi ref="true" /></type><i ldsrc="458"><e><new><type typename="$fcParentIName" /></new></e></i></d></Decls></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e></args></fc></e></ifbk><else ldsrc="462"><e ldsrc="463"><a><l><n>newCollectionIName</n></l><r><new><type typename="XplIName" /><init ldsrc="463"><list><e><bo op="m"><l><n>fcParentIName</n></l><r><n>Identifier</n></r></bo></e></list></init></new></r></a></e></else></if><documentation short=" Proceso el bloque para elemento&#xD;&#xA;" /><for ldsrc="466,466"><init><dl><d name="nodeInFc" ldsrc="466"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>fcBlock</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="466,468"><e ldsrc="467"><fc><l><n>ProcessItem</n></l><args><e><n>nodeInFc</n></e><e><n>body</n></e><e><n>leftNodeIName</n></e><e><n>newCollectionIName</n></e><e><n>parentObjectId</n></e><e><n>simpleIdentifierToString</n></e></args></fc></e></forblock></for><if ldsrc="469"><boolean><bo op="NOTEQ"><l><n>collectionIName</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="469,474"><documentation short=" Inserto el elemento dentro de la colección padre&#xD;&#xA;" /><e ldsrc="473"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="472"><e><fc><l><bo op="m"><l><bo op="m"><l><n>$grandParentObjectId</n></l><r><n>$collectionIName</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><n>$leftNodeIName</n></e></args></fc></e></writecode></e></args></fc></e></ifbk></if></ifbk><else ldsrc="477"><documentation short=" Tipo de expresión no reconocida, será ignorada.&#xD;&#xA;" /><e ldsrc="481"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>compiler</n></l><r><n>get_ErrorCollection</n></r></bo></l><args /></fc></l><r><n>AddError</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="480"><list><e><lit str="Expresión no reconocida por Object Creator." /></e><e><n>node</n></e></list></init></new></e></args></fc></e></else></if></else></if></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class></Namespace><documentation short="&#xD;&#xA;Seria llamado de la forma:&#xD;&#xA;	ObjectInterpreterBuilder::New( MyInterpreter, MainTypeName ){&#xD;&#xA;		Property1 = &quot;stringValue&quot;;&#xD;&#xA;		Property2 = 120; //int value&#xD;&#xA;		Property3 = true; //bool value&#xD;&#xA;		Collection1{&#xD;&#xA;			CollectionItemType1{&#xD;&#xA;				Property1 = &quot;stringValue&quot;;&#xD;&#xA;			};&#xD;&#xA;			CollectionItemType2{&#xD;&#xA;				Property1 = 120; //int value&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;		Collection2{&#xD;&#xA;			CollectionItemType3{&#xD;&#xA;				Property1 = true; //bool value&#xD;&#xA;				Property2 = Id; //IName value&#xD;&#xA;				Property3 = 3 + &quot;hola&quot;; //Expression value&#xD;&#xA;				Collection3{&#xD;&#xA;					CollectionItemType4{&#xD;&#xA;						Property2 = &quot;stringValue&quot;;&#xD;&#xA;					};&#xD;&#xA;				};&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;	};&#xD;&#xA;&#xD;&#xA;//De forma similar no seria mejor llamarlo con un template de la forma&#xD;&#xA;	ObjectInterpreterBuilder::New( MyInterpreter, MainTypeName ){&#xD;&#xA;		Property1 = STRING;&#xD;&#xA;		Property2 = INT; //int value&#xD;&#xA;		Property3 = BOOL; //bool value&#xD;&#xA;		Collection(Collection1){ //&lt;-- &quot;Collection1&quot; es el campo utilizado en MainTypeName como coleccion&#xD;&#xA;			CollectionItemType1{ //&lt;-- &quot;CollectionItemType1&quot; es el tipo utilizado para los elementos&#xD;&#xA;				Property1 = STRING;&#xD;&#xA;			};&#xD;&#xA;			CollectionItemType2{&#xD;&#xA;				Property1 = INT; //int value&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;		SimpleItem(SimpleItemType){&#xD;&#xA;			Property1 = INT;&#xD;&#xA;			SimpleItem2(SimpleItem2Type){&#xD;&#xA;				Property2 = STRING;&#xD;&#xA;			};&#xD;&#xA;			Collection(SimpleItemCollection){&#xD;&#xA;				CollectionItemType{&#xD;&#xA;					Property2 = BOOL;&#xD;&#xA;				};&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;		Collection2{&#xD;&#xA;			CollectionItemType3{&#xD;&#xA;				Property1 = BOOL; //bool value&#xD;&#xA;				Property2 = INAME; //IName value&#xD;&#xA;				Property3 = EXPRESSION; //Expression value&#xD;&#xA;				Collection3{&#xD;&#xA;					CollectionItemType4{&#xD;&#xA;						Property2 = STRING;&#xD;&#xA;					};&#xD;&#xA;				};&#xD;&#xA;			};&#xD;&#xA;		};&#xD;&#xA;	};&#xD;&#xA;&#xD;&#xA;//Algoritmo&#xD;&#xA;	-Comienzo con un tipo, procesando ese tipo y le paso el bloque como argumento,&#xD;&#xA;	creo una función para procesar el tipo:&#xD;&#xA;&#xD;&#xA;	MainTypeName^ ProcessMainTypeName(block instanceData){&#xD;&#xA;		MainTypeName^ instance = new MainTypeName();&#xD;&#xA;		//Itero en los nodos del bloque&#xD;&#xA;		for(XplNode^ node in instanceData.Children()){&#xD;&#xA;			if(node is XplFunction){&#xD;&#xA;				//un if en todas las colecciones q tengo&#xD;&#xA;				if(Collection1){&#xD;&#xA;					//Itero en todos los nodos del bloque&#xD;&#xA;					for(XplNode^ node2 in collectionData)&#xD;&#xA;					{&#xD;&#xA;						//si no es una llamada a funcion con bloque es un error&#xD;&#xA;						//Un if por cada tipo de elemento q puede contener la coleccion&#xD;&#xA;						if(node2 Id name == CollectionItemType1){&#xD;&#xA;							instance.Collection1.Add(&#xD;&#xA;									ProcessCollectionItemType1(data)&#xD;&#xA;								);&#xD;&#xA;						}&#xD;&#xA;						else{&#xD;&#xA;							//si no es un tipo de elemento valido es un error&#xD;&#xA;						}&#xD;&#xA;					}&#xD;&#xA;				}&#xD;&#xA;				else if(Collection2){&#xD;&#xA;				}&#xD;&#xA;				else{&#xD;&#xA;					//Error&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;			else if(node is XplAssing){&#xD;&#xA;				//un switch o if en todas las propiedades que tengo&#xD;&#xA;				if(propertyName == &quot;Property1&quot;){&#xD;&#xA;					instance.Property1 = valor;&#xD;&#xA;				}&#xD;&#xA;				else if(propertyName == &quot;Property2&quot;){&#xD;&#xA;					instance.Property2 = valor;&#xD;&#xA;				}&#xD;&#xA;				else{&#xD;&#xA;					//Error&#xD;&#xA;				}&#xD;&#xA;			}&#xD;&#xA;			else{&#xD;&#xA;				//Error&#xD;&#xA;			}&#xD;&#xA;		}&#xD;&#xA;		return instance;&#xD;&#xA;	}&#xD;&#xA;&#xD;&#xA;	-Y creo una función para procesar cada uno de los tipos&#xD;&#xA;	void ProcessCollectionItemType1(block instanceData){&#xD;&#xA;	}			&#xD;&#xA;	&#xD;&#xA;Crea un nuevo interprete&#xD;&#xA;" /></DocumentBody></XPLDocument>