import "System", "platform=DotNET", "ns=DotNET", "assembly=mscorlib";
import "System", "platform=DotNET", "ns=DotNET", "assembly=System";
import "System", "platform=DotNET", "ns=DotNET", "assembly=System.Data";
import "System", "platform=DotNET", "ns=DotNET", "assembly=System.Data.SqlServerCe";
import "System", "platform=DotNET", "ns=DotNET", "assembly=System.Drawing";
import "UtnEmall", "platform=DotNET", "ns=DotNET", "assemblyfilename=..\\..\\Main\\Common\\BaseMobile\\bin\\Debug\\BaseMobile.dll";
import "UtnEmall", "platform=DotNET", "ns=DotNET", "assemblyfilename=..\\..\\Main\\Client\\BackgroundBroadcastService\\bin\\Debug\\BackgroundBroadcastService.dll";
import "System", "platform=DotNET", "ns=DotNET", "assemblyfilename=C:\\Program Files\\Microsoft.NET\\SDK\\CompactFramework\\v3.5\\WindowsCE\\System.Xml.dll";
import "System", "platform=DotNET", "ns=DotNET", "assemblyfilename=C:\\Program files\\Reference Assemblies\\Microsoft\\Framework\\v3.0\\System.ServiceModel.dll";
import "System", "platform=DotNET", "ns=DotNET", "assemblyfilename=C:\\Program files\\Reference Assemblies\\Microsoft\\Framework\\v3.0\\System.Runtime.Serialization.dll";

using Zoe;
using zoe::lang;
using DotNET::System;
using DotNET::System::Collections;
using DotNET::System::Data;
using DotNET::System::Data::Common;
using DotNET::System::Data::SqlServerCe;
using DotNET::UtnEmall::Client::EntityModel;
using DotNET::UtnEmall::Client::DataModel;
using DotNET::System::Globalization;

using UtnEmall::Utils;
using DotNET::System::Diagnostics;
using System::Collections::Generic;
using DotNET::System::Collections::Generic;
using DotNET::System::Collections::ObjectModel;
using DotNET::UtnEmall::Client::PresentationLayer;

using DotNET::System::ServiceModel;
using DotNET::System::ServiceModel::Channels;
using DotNET::System::Runtime::Serialization;
using Microsoft::Tools::ServiceModel;
using DotNET::UtnEmall::Client::PresentationLayer;
using DotNET::UtnEmall::Client::BusinessLogic;
using DotNET::UtnEmall::Client::SmartClientLayer;
using DotNET::UtnEmall::Client::ServiceAccessLayer;
using DotNET::UtnEmall::Client::BackgroundBroadcastService;


namespace DotNET::UtnEmall::Client::DataModel
{
	// Definiciones para modelo
	Model::DefineMobil(true);
	Model::DefineIdentity(false);
	Model::SetEntityWSNamespace("UtnEmall.Server.EntityModel");
	// Definiciones para Business
	ModelBusiness::IsWindowsMobile(true);
	ModelBusiness::SetMobileWebServiceEntityNamespace("UtnEmall.Server.EntityModel");
	ModelBusiness::SetProxiesNamespace(DotNET::UtnEmall::Client::ServiceAccessLayer);
	// Definiciones para SmartClient layer
	SCLGenerator::SetNamespace(DotNET::UtnEmall::Client::SmartClientLayer, false);

	Model::Define(LastSync, false)
	{
		Model::Field(EntityName, gettype(string))
		{
			Rules::PropertyStringNotEmpty(EntityName, "EntityName no puede estar vacío");
		};

		Model::Field(LastTimestamp, gettype(DateTime))
		{
		};
	};

	Model::Define(Category, true, true)
	{
		Model::Field(Description, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Description, "La descripción no puede estar vacía");
		};

		Model::Field(Name, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Name,"El nombre no puede estar vacío");
			Rules::PropertyUnique(Name, "Nombre de categoría duplicado", Category);
		};

		Model::Relations(Childs, Category, ParentCategory, RelationTypes::UnoAMuchos, true, true, true, false, true){};
		Model::Relations(ParentCategory, Category, ParentCategory, RelationTypes::MuchosAUno, true, false, false, true, true){};

		Model::Relations(Preference, Preference, RelationTypes::UnoAMuchos, false, false){};
		Model::Relations(ServiceCategory, ServiceCategory, RelationTypes::UnoAMuchos, false, false)
		{
		};
	};

	Model::Define(Customer, true)
	{

		Model::Field(Name, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Name, "El nombre no puede estar vacío");
		};
		Model::Field(Surname, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Surname, "El apellido no puede estar vacío");
		};
		Model::Field(Address, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Address, "La dirección no puede estar vacía");
		};
		Model::Field(PhoneNumber, gettype(string))
		{
			Rules::PropertyStringNotEmpty(PhoneNumber, "El número de teléfono no puede estar vacío");
		};
		Model::Field(UserName, gettype(string))
		{
			Rules::PropertyStringNotEmpty(UserName, "El nombre de usuario no puede estar vacío");
			Rules::PropertyUnique(UserName, "Nombre de usuario duplicado", Customer);
		};

		Model::Field(Password, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Password, "La contraseña no puede estar vacía");
		};
		Model::Relations(Preferences, Preference, RelationTypes::UnoAMuchos, true, true, true)
		{
			Rules::CollectionNonEmpty(Preferences, "Las preferencias no pueden estar vacías");
		};
		Model::Relations(DeviceProfile, DeviceProfile, RelationTypes::UnoAMuchos,true, true, true)
		{
			Rules::PropertyNotNull(DeviceProfile, "El perfil del dispositivo no puede ser nulo");
		};

	};

	Model::Define(DeviceProfile, false)
	{
		Model::Field(DeviceType, gettype(string))
		{
			Rules::PropertyStringNotEmpty(DeviceType,"El tipo de dispositivo no puede estar vacío");
		};
		Model::Field(DeviceModel, gettype(string))
		{
			Rules::PropertyStringNotEmpty(DeviceModel,"El modelo de dispositivo no puede estar vacío");
		};
		Model::Field(MacAddress, gettype(string))
		{
			Rules::PropertyStringNotEmpty(MacAddress,"La dirección MAC no puede estar vacía");
			Rules::PropertyUnique(MacAddress, "Dirección MAC duplicada", DeviceProfile);
		};
		Model::Field(WindowsMobileVersion, gettype(string))
		{
			Rules::PropertyStringNotEmpty(WindowsMobileVersion,"La versión de Windows Mobile no puede estar vacía");
		};

		Model::Relations(Customer, Customer, RelationTypes::MuchosAUno, false, false, false, true){};
	};

	Model::Define(Preference, false)
	{
		Model::Field(Active, gettype(bool));
		Model::Field(Level, gettype(double))
		{
			Rules::PropertyGreaterThanZero(Level, "El nivel no puede ser negativo");
		};
		Model::Relations(Customer, Customer, RelationTypes::MuchosAUno, false, false, false, true){};
		Model::Relations(Category, Category, RelationTypes::MuchosAUno, true, true, false, true)
		{
			Rules::PropertyNotNull(Category, "La categoría no puede ser nula");
		};
	};

	Model::Define(Service, true, true)
	{
		Model::Field(Name, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Name, "El nombre no puede estar vacío");
			Rules::PropertyUnique(Name, "Ya existe un servicio con el mismo nombre", Service);
		};
		Model::Field(Description, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Description, "La descripción no puede estar vacía");
		};

		Model::Field(WebAccess, gettype(string));
		Model::Field(RelativePathAssembly, gettype(string));

		Model::Field(PathAssemblyServer, gettype(string));

		Model::Field(Active, gettype(bool));
		Model::Field(Global, gettype(bool));

		Model::Field(Image, gettype(string));

		Model::Field(Website, gettype(string));

		//Mark if the service was deployed (and builded)
		Model::Field(Deployed, gettype(bool)){};
		//Mark if the service need to be redeployed on server startup
		Model::Field(Updated, gettype(bool)){};

		Model::Relations(ServiceCategory, ServiceCategory, RelationTypes::UnoAMuchos, true, true, true)
		{
			/*Rules::CollectionNonEmpty(ServiceCategory, "ServiceCategory can't be empty");

			Rules::PropertyCollection(ServiceCategory, ServiceCategory)
			{
				Rules::PropertyNotNull(Category, "Category can't be empty");
			};*/
		};

		Model::Relations(Store, Store, RelationTypes::MuchosAUno, false, false, false, true)
		{
			if (service.Store != null)
            {
                foreach (ServiceCategoryEntity serviceCategory in service.ServiceCategory)
                {
                    CategoryEntity categoryService = serviceCategory.Category;
                    bool isCategoryOfTheStore = false;
                    foreach (StoreCategoryEntity storeCategory in service.Store.StoreCategory)
                    {
                        CategoryEntity categoryStore = storeCategory.Category;
                        if (categoryService.Id == categoryStore.Id)
                        {
                            isCategoryOfTheStore = true;
                        }
                    }
                    result = isCategoryOfTheStore;
                    service.Errors.Add(new Error(categoryService.Name, "La categoría ", categoryService.Name + " no es una categoría de la tienda"));
                }
            }
		};
		Model::Field(StartDate, gettype(DateTime))
		{
			Rules::PropertyNotNull(StartDate, "La fecha de inicio no puede ser nula");
		};

		Model::Field(StopDate, gettype(DateTime))
		{
			Rules::PropertyDateTimeLowerThan(StopDate, StartDate, "La fecha de finalización no puede ser menor a la fecha de inicio");
			Rules::PropertyNotNull(StopDate, "La fecha de finalización no puede ser nula");
		};
	};

	Model::Define(ServiceCategory, false)
	{
		Model::Relations(Service, Service, RelationTypes::MuchosAUno, false, false, false, true){};
		Model::Relations(Category, Category, RelationTypes::MuchosAUno, true, false, false, true){};

	};

	Model::Define(Store, true, true)
	{
		Model::Field(Name, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Name, "El nombre no puede estar vacío");
			Rules::PropertyUnique(Name, "Ya existe una tienda con ese nombre", Store);
		};

		Model::Field(TelephoneNumber, gettype(string))
		{
			Rules::PropertyStringNotEmpty(TelephoneNumber, "El número de teléfono no puede estar vacío");
		};

		Model::Field(InternalPhoneNumber, gettype(string))
		{
			Rules::PropertyStringNotEmpty(InternalPhoneNumber, "El número de teléfono interno no puede estar vacío");
		};

		Model::Field(ContactName, gettype(string))
		{
			Rules::PropertyStringNotEmpty(ContactName, "El contacto no puede estar vacío");
		};
		Model::Field(OwnerName, gettype(string))
		{
			Rules::PropertyStringNotEmpty(OwnerName, "El dueño no puede estar vacío");
		};

		Model::Field(Email, gettype(string))
		{
			Rules::PropertyStringNotEmpty(Email, "La dirección de correo electrónico no puede estar vacía");
		};

		Model::Field(WebAddress, gettype(string));

		Model::Field(LocalNumber, gettype(string))
		{
			Rules::PropertyStringNotEmpty(LocalNumber, "El número de local no puede estar vacío");
			Rules::PropertyUnique(Name, "Ya existe un servicio con el mismo número de local", Store);
		};

		Model::Relations(StoreCategory, StoreCategory, RelationTypes::UnoAMuchos, true, true, true)
		{
			Rules::CollectionNonEmpty(StoreCategory, "La categoría de la tienda no puede estar vacía");
			Rules::PropertyCollection(StoreCategory, StoreCategory)
			{
				Rules::PropertyNotNull(Category, "La categoría no puede estar vacía");
			};
		};

		Model::Relations(Service, Service, RelationTypes::UnoAMuchos, false, false)
		{
			Rules::CollectionNonEmpty(Service, "El servicio no puede estar vacío");
		};


	};

	Model::Define(StoreCategory, false)
	{
		Model::Relations(Category, Category, RelationTypes::MuchosAUno, true, false, false, true){};
		Model::Relations(Store, Store, RelationTypes::MuchosAUno, false, false, false, true){};

	};

	// Seek stadistical data about services usage. Used on client and for interface
	// between Server and Client
	Model::Define(UserActionClientData, true)
	{
		// An integer that mark the type of the action
		Model::Field(ActionType, gettype(int))
		{
			Rules::PropertyGreaterThanZero(ActionType, "El tipo de acción no puede ser negativo");
		};
		// The Start time of the action
		Model::Field(Start, gettype(DateTime))
		{
			Rules::PropertyDateTimeInTheFuture(Start, "La fecha de inicio no puede ser mayor a la fecha actual");
			Rules::PropertyNotNull(Start, "La fecha de inicio no puede ser nula");
		};
		// The End time of the action
		Model::Field(Stop, gettype(DateTime))
		{
			Rules::PropertyDateTimeInTheFuture(Stop, "La fecha de finalización no puede ser mayor a la fecha actual");
			Rules::PropertyDateTimeLowerThan(Stop, Start, "La fecha de finalización no puede ser menor a la fecha de inicio");
			Rules::PropertyNotNull(Stop, "La fecha de finalización no puede ser nula");
		};
		// The Id of the Table on the related data model (when it is applicable)
		Model::Field(IdTable, gettype(int))
		{
			Rules::PropertyGreaterThanZero(IdTable, "El id de tabla no puede ser negativo");
		};
		// The Id of the register on the related data model (when it is applicable)
		Model::Field(IdRegister, gettype(int))
		{
			Rules::PropertyGreaterThanZero(IdRegister, "El id de registro no puede ser negativo");
		};
		// The Component that launch the action on the designed Custom Service. This can be
		// a form, or menuitem
		Model::Field(IdComponent, gettype(int))
		{
			Rules::PropertyGreaterThanZero(IdComponent, "El id de componente no puede ser negativo");
		};
		// The Id of the service
		Model::Field(IdService, gettype(int))
		{
			Rules::PropertyGreaterThanZero(IdService, "El id de servicio no puede ser negativo");
		};
	};


}
