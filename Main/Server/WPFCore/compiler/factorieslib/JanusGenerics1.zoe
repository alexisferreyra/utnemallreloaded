<XPLDocument><DocumentBody ldsrc="1,1,.\\MainTemplate.es\\JanusGenerics.dpp"><Import ldsrc="1"><ns>System</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Import ldsrc="2"><ns>LayerD.CodeDOM</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_layerd_xpl_codedom_net</ns></Import><Import ldsrc="3"><ns>LayerD.ZOECompiler</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_zoec_core</ns></Import><Using ldsrc="4"><ns>DotNET::System</ns></Using><Using ldsrc="5"><ns>DotNET::System::Collections</ns></Using><Using ldsrc="7"><ns>Zoe</ns></Using><Using ldsrc="8"><ns>DotNET::LayerD::CodeDOM</ns></Using><Using ldsrc="9"><ns>DotNET::LayerD::ZOECompiler</ns></Using><Namespace name="UtnEmall::Utils" ldsrc="11,250"><Class name="FaultException" access="public" isfactory="true" ldsrc="14,58"><Field name="insertedTypes" storage="static" ldsrc="16,16"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type><i ldsrc="16"><e><new><type typename="Hashtable" /></new></e></i></Field><Field name="systemServiceModelNS" storage="static" ldsrc="17,17"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNamespace"><dt typename="XplNamespace" /><pi ref="true" /></type></Field><Function name="New" internalname="New#3" access="public" storage="static" ldsrc="19,19"><Parameters><P name="exceptionTypeName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="19" /></P><P name="TDetail" number="2"><type typename="$TYPE$" typeStr="$TYPE$" ldsrc="19" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="19,57"><Decls><d name="fullTypeString" ldsrc="20"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="20"><e><bo><l><lit str="DotNET.System.ServiceModel." /></l><r><bo op="m"><l><n>exceptionTypeName</n></l><r><n>Identifier</n></r></bo></r></bo></e></i></d></Decls><if ldsrc="21"><boolean><bo op="OR"><l><bo op="NOTEQ"><l><b><l><bo op="m"><l><n>compiler</n></l><r><n>LastTypesTable</n></r></bo></l><args><e><n>fullTypeString</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><b><l><n>insertedTypes</n></l><args><e><n>fullTypeString</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></r></bo></boolean><ifbk ldsrc="21,23"><return ldsrc="22,22"><lit str="0" type="null" /></return></ifbk></if><if ldsrc="24"><boolean><bo op="EQ"><l><n>systemServiceModelNS</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="24,34"><documentation short="Creo el espacio de nombres la primera vez&#xD;&#xA;" /><e ldsrc="28"><a><l><n>systemServiceModelNS</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="26"><progunit><Namespace name="DotNET::System::ServiceModel" ldsrc="27,27" /></progunit></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplNamespace" /><pi ref="true" /></type></cast></r></a></e><documentation short="Busco el cuerpo del programa para inyectarlo&#xD;&#xA;" /><Decls><d name="body" ldsrc="30"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="30"><e><n>context</n></e></i></d></Decls><while ldsrc="31"><boolean><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplDocumentBody" /></r></bo></boolean><dobk><e ldsrc="31"><a><l><n>body</n></l><r><fc><l><bo op="m"><l><n>body</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></r></a></e></dobk></while><documentation short="Lo inyecto en el cuerpo del programa&#xD;&#xA;" /><e ldsrc="33"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertBefore</n></r></bo></l><args><e><n>systemServiceModelNS</n></e><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><cast><e><n>body</n></e><type ispointer="true"><dt typename="XplDocumentBody" /><pi ref="true" /></type></cast></l><r><n>get_NamespaceNodeList</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e></args></fc></e></ifbk></if><Decls><d name="typeOfList" ldsrc="35"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="35"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="36"><fc><l><bo op="m"><l><n>typeOfList</n></l><r><n>set_typename</n></r></bo></l><args><e><bo op="m"><l><n>exceptionTypeName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><Decls><d name="listClass" ldsrc="38"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="38"><e><writecode ldsrc="39"><class name="$exceptionTypeName" access="public" external="true" ldsrc="40,43"><Inherits><c name="DotNET::System::Exception" access="public" ldsrc="40" /></Inherits><Function name="$exceptionTypeName" access="public" ldsrc="42,42"><Parameters><P name="info" number="1"><type typename="$TDetail" ldsrc="42" /></P></Parameters><ReturnType /></Function></class></writecode></e></i></d></Decls><while ldsrc="46"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>TDetail</n></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><lit /></r></bo></boolean><dobk ldsrc="46,48"><e ldsrc="47"><a><l><n>TDetail</n></l><r><fc><l><bo op="m"><l><n>TDetail</n></l><r><n>get_dt</n></r></bo></l><args /></fc></r></a></e></dobk></while><e ldsrc="49"><fc><l><bo op="m"><l><n>listClass</n></l><r><n>set_externalname</n></r></bo></l><args><e><lit str="FaultException&lt;Key,Value&gt;" /></e></args></fc></e><e ldsrc="50"><fc><l><bo op="m"><l><n>listClass</n></l><r><n>set_lddata</n></r></bo></l><args><e><bo><l><bo><l><lit str="$NET_GENERIC[System.ServiceModel.FaultException&lt;" /></l><r><fc><l><n>List::GetNETTypeName</n></l><args><e><n>TDetail</n></e></args></fc></r></bo></l><r><lit str="&gt;]$" /></r></bo></e></args></fc></e><e ldsrc="51"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Tipo generico insertado: " /></l><r><fc><l><bo op="m"><l><n>listClass</n></l><r><n>get_lddata</n></r></bo></l><args /></fc></r></bo></e></args></fc></e><e ldsrc="53"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>systemServiceModelNS</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>listClass</n></e></args></fc></e><e ldsrc="54"><fc><l><bo op="m"><l><n>insertedTypes</n></l><r><n>Add</n></r></bo></l><args><e><n>fullTypeString</n></e><e><lit str="true" type="bool" /></e></args></fc></e><return ldsrc="56,56"><lit str="0" type="null" /></return></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class><Class name="Dictionary" access="public" isfactory="true" ldsrc="60,115"><Field name="insertedTypes" storage="static" ldsrc="62,62"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type><i ldsrc="62"><e><new><type typename="Hashtable" /></new></e></i></Field><Field name="systemGenericsNS" storage="static" ldsrc="63,63"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNamespace"><dt typename="XplNamespace" /><pi ref="true" /></type></Field><Function name="New" internalname="New#3" access="public" storage="static" ldsrc="65,65"><Parameters><P name="listTypeName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="65" /></P><P name="typeOfKey" number="2"><type typename="$TYPE$" typeStr="$TYPE$" ldsrc="65" /></P><P name="typeOfElements" number="3"><type typename="$TYPE$" typeStr="$TYPE$" ldsrc="65" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="65,114"><Decls><d name="fullTypeString" ldsrc="66"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="66"><e><bo><l><lit str="DotNET.System.Collections.Generic." /></l><r><bo op="m"><l><n>listTypeName</n></l><r><n>Identifier</n></r></bo></r></bo></e></i></d></Decls><if ldsrc="67"><boolean><bo op="OR"><l><bo op="NOTEQ"><l><b><l><bo op="m"><l><n>compiler</n></l><r><n>LastTypesTable</n></r></bo></l><args><e><n>fullTypeString</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><b><l><n>insertedTypes</n></l><args><e><n>fullTypeString</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></r></bo></boolean><ifbk ldsrc="67,69"><return ldsrc="68,68"><lit str="0" type="null" /></return></ifbk></if><if ldsrc="70"><boolean><bo op="EQ"><l><n>systemGenericsNS</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="70,80"><documentation short="Creo el espacio de nombres la primera vez&#xD;&#xA;" /><e ldsrc="74"><a><l><n>systemGenericsNS</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="72"><progunit><Namespace name="DotNET::System::Collections::Generic" ldsrc="73,73" /></progunit></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplNamespace" /><pi ref="true" /></type></cast></r></a></e><documentation short="Busco el cuerpo del programa para inyectarlo&#xD;&#xA;" /><Decls><d name="body" ldsrc="76"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="76"><e><n>context</n></e></i></d></Decls><while ldsrc="77"><boolean><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplDocumentBody" /></r></bo></boolean><dobk><e ldsrc="77"><a><l><n>body</n></l><r><fc><l><bo op="m"><l><n>body</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></r></a></e></dobk></while><documentation short="Lo inyecto en el cuerpo del programa&#xD;&#xA;" /><e ldsrc="79"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertBefore</n></r></bo></l><args><e><n>systemGenericsNS</n></e><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><cast><e><n>body</n></e><type ispointer="true"><dt typename="XplDocumentBody" /><pi ref="true" /></type></cast></l><r><n>get_NamespaceNodeList</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e></args></fc></e></ifbk></if><Decls><d name="typeOfList" ldsrc="81"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="81"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="82"><fc><l><bo op="m"><l><n>typeOfList</n></l><r><n>set_typename</n></r></bo></l><args><e><bo op="m"><l><n>listTypeName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><Decls><d name="listClass" ldsrc="84"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="84"><e><writecode ldsrc="85"><class name="$listTypeName" access="public" external="true" ldsrc="86,100"><Inherits><c name="DotNET::System::Collections::Hashtable" access="public" ldsrc="86" /></Inherits><Function name="Add" access="public" storage="extern" ldsrc="88,88"><Parameters><P name="key" number="1"><type typename="$typeOfKey" ldsrc="88" /></P><P name="item" number="2"><type typename="$typeOfElements" ldsrc="88" /></P></Parameters><ReturnType typename="$VOID$" /></Function><Function name="ContainsValue" access="public" storage="extern" ldsrc="89,89"><Parameters><P name="item" number="1"><type typename="$typeOfElements" ldsrc="89" /></P></Parameters><ReturnType typename="$BOOLEAN$" /></Function><Function name="ContainsKey" access="public" storage="extern" ldsrc="90,90"><Parameters><P name="item" number="1"><type typename="$typeOfKey" ldsrc="90" /></P></Parameters><ReturnType typename="$BOOLEAN$" /></Function><Function name="Clear" access="public" storage="extern" ldsrc="91,91"><ReturnType typename="$VOID$" /></Function><Operator name="%op_eq%" access="public" storage="static_extern" ldsrc="92,92"><Parameters><P name="arg1" number="1"><type ispointer="true" ldsrc="92"><dt typename="$typeOfList" /><pi ref="true" /></type></P><P name="arg2" number="2"><type ispointer="true" ldsrc="92"><dt typename="$typeOfList" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /></Operator><Indexer name="%indexer%" access="public" storage="extern" ldsrc="93,93"><Parameters><P name="index" number="1"><type typename="$typeOfKey" ldsrc="93" /></P></Parameters><ReturnType typename="$typeOfElements" /><FunctionBody ldsrc="93,96"><Get ldsrc="94,94" lddata="%abstract%" /><Set ldsrc="95,95" lddata="%abstract%" /></FunctionBody></Indexer><Property name="Count" access="public" storage="extern" ldsrc="97"><type typename="$INTEGER$" /><body ldsrc="97,99"><Get ldsrc="98,98" lddata="%abstract%" /></body></Property></class></writecode></e></i></d></Decls><while ldsrc="103"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>typeOfElements</n></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><lit /></r></bo></boolean><dobk ldsrc="103,105"><e ldsrc="104"><a><l><n>typeOfElements</n></l><r><fc><l><bo op="m"><l><n>typeOfElements</n></l><r><n>get_dt</n></r></bo></l><args /></fc></r></a></e></dobk></while><e ldsrc="106"><fc><l><bo op="m"><l><n>listClass</n></l><r><n>set_externalname</n></r></bo></l><args><e><lit str="Dictionary&lt;Key,Value&gt;" /></e></args></fc></e><e ldsrc="107"><fc><l><bo op="m"><l><n>listClass</n></l><r><n>set_lddata</n></r></bo></l><args><e><bo><l><bo><l><bo><l><bo><l><lit str="$NET_GENERIC[System.Collections.Generic.Dictionary&lt;" /></l><r><fc><l><n>List::GetNETTypeName</n></l><args><e><n>typeOfKey</n></e></args></fc></r></bo></l><r><lit str="," /></r></bo></l><r><fc><l><n>List::GetNETTypeName</n></l><args><e><n>typeOfElements</n></e></args></fc></r></bo></l><r><lit str="&gt;]$" /></r></bo></e></args></fc></e><e ldsrc="108"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Tipo generico insertado: " /></l><r><fc><l><bo op="m"><l><n>listClass</n></l><r><n>get_lddata</n></r></bo></l><args /></fc></r></bo></e></args></fc></e><e ldsrc="110"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>systemGenericsNS</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>listClass</n></e></args></fc></e><e ldsrc="111"><fc><l><bo op="m"><l><n>insertedTypes</n></l><r><n>Add</n></r></bo></l><args><e><n>fullTypeString</n></e><e><lit str="true" type="bool" /></e></args></fc></e><return ldsrc="113,113"><lit str="0" type="null" /></return></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class><Class name="List" access="public" isfactory="true" ldsrc="117,248"><Field name="insertedTypes" storage="static" ldsrc="119,119"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type><i ldsrc="119"><e><new><type typename="Hashtable" /></new></e></i></Field><Field name="systemGenericsNS" storage="static" ldsrc="120,120"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNamespace"><dt typename="XplNamespace" /><pi ref="true" /></type></Field><Field name="systemGenericsCollectionsNS" storage="static" ldsrc="121,121"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNamespace"><dt typename="XplNamespace" /><pi ref="true" /></type></Field><Function name="NewCollection" internalname="NewCollection#4" access="public" storage="static" ldsrc="123,123"><Parameters><P name="listTypeName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="123" /></P><P name="typeOfElements" number="2"><type typename="$TYPE$" typeStr="$TYPE$" ldsrc="123" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="123,172"><Decls><d name="fullTypeString" ldsrc="124"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="124"><e><bo><l><lit str="DotNET.System.Collections.ObjectModel." /></l><r><bo op="m"><l><n>listTypeName</n></l><r><n>Identifier</n></r></bo></r></bo></e></i></d></Decls><if ldsrc="125"><boolean><bo op="OR"><l><bo op="NOTEQ"><l><b><l><bo op="m"><l><n>compiler</n></l><r><n>LastTypesTable</n></r></bo></l><args><e><n>fullTypeString</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><b><l><n>insertedTypes</n></l><args><e><n>fullTypeString</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></r></bo></boolean><ifbk ldsrc="125,127"><return ldsrc="126,126"><lit str="0" type="null" /></return></ifbk></if><if ldsrc="128"><boolean><bo op="EQ"><l><n>systemGenericsCollectionsNS</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="128,139"><documentation short="Creo el espacio de nombres la primera vez&#xD;&#xA;" /><e ldsrc="132"><a><l><n>systemGenericsCollectionsNS</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="130"><progunit><Namespace name="DotNET::System::Collections::ObjectModel" ldsrc="131,131" /></progunit></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplNamespace" /><pi ref="true" /></type></cast></r></a></e><documentation short="Busco el cuerpo del programa para inyectarlo&#xD;&#xA;" /><Decls><d name="body" ldsrc="134"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="134"><e><n>context</n></e></i></d></Decls><while ldsrc="135"><boolean><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplDocumentBody" /></r></bo></boolean><dobk><e ldsrc="135"><a><l><n>body</n></l><r><fc><l><bo op="m"><l><n>body</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></r></a></e></dobk></while><documentation short="Lo inyecto en el cuerpo del programa&#xD;&#xA;body.Children().InsertAtBegin( systemGenericsNS );&#xD;&#xA;" /><e ldsrc="138"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertBefore</n></r></bo></l><args><e><n>systemGenericsCollectionsNS</n></e><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><cast><e><n>body</n></e><type ispointer="true"><dt typename="XplDocumentBody" /><pi ref="true" /></type></cast></l><r><n>get_NamespaceNodeList</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e></args></fc></e></ifbk></if><Decls><d name="typeOfList" ldsrc="140"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="140"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="141"><fc><l><bo op="m"><l><n>typeOfList</n></l><r><n>set_typename</n></r></bo></l><args><e><bo op="m"><l><n>listTypeName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><Decls><d name="listClass" ldsrc="142"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="142"><e><writecode ldsrc="143"><class name="$listTypeName" access="public" external="true" ldsrc="144,158"><Inherits><c name="DotNET::System::Collections::ArrayList" access="public" ldsrc="144" /></Inherits><Function name="Add" access="public" storage="extern" ldsrc="146,146"><Parameters><P name="item" number="1"><type typename="$typeOfElements" ldsrc="146" /></P></Parameters><ReturnType typename="$VOID$" /></Function><Function name="Contains" access="public" storage="extern" ldsrc="147,147"><Parameters><P name="item" number="1"><type typename="$typeOfElements" ldsrc="147" /></P></Parameters><ReturnType typename="$BOOLEAN$" /></Function><Function name="Clear" access="public" storage="extern" ldsrc="148,148"><ReturnType typename="$VOID$" /></Function><Operator name="%op_eq%" access="public" storage="static_extern" ldsrc="149,149"><Parameters><P name="arg1" number="1"><type ispointer="true" ldsrc="149"><dt typename="$typeOfList" /><pi ref="true" /></type></P><P name="arg2" number="2"><type ispointer="true" ldsrc="149"><dt typename="$typeOfList" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /></Operator><Indexer name="%indexer%" access="public" storage="extern" ldsrc="150,150"><Parameters><P name="index" number="1"><type typename="$INTEGER$" ldsrc="150" /></P></Parameters><ReturnType typename="$typeOfElements" /><FunctionBody ldsrc="150,153"><Get ldsrc="151,151" lddata="%abstract%" /><Set ldsrc="152,152" lddata="%abstract%" /></FunctionBody></Indexer><Property name="Count" access="public" storage="extern" ldsrc="154"><type typename="$INTEGER$" /><body ldsrc="154,156"><Get ldsrc="155,155" lddata="%abstract%" /></body></Property><Function name="ToArray" access="public" storage="extern" ldsrc="157,157"><ReturnType ispointer="true"><dt isarray="true"><dt typename="$typeOfElements" /></dt><pi ref="true" /></ReturnType></Function></class></writecode></e></i></d></Decls><while ldsrc="161"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>typeOfElements</n></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><lit /></r></bo></boolean><dobk ldsrc="161,163"><e ldsrc="162"><a><l><n>typeOfElements</n></l><r><fc><l><bo op="m"><l><n>typeOfElements</n></l><r><n>get_dt</n></r></bo></l><args /></fc></r></a></e></dobk></while><e ldsrc="164"><fc><l><bo op="m"><l><n>listClass</n></l><r><n>set_externalname</n></r></bo></l><args><e><lit str="List&lt;T&gt;" /></e></args></fc></e><e ldsrc="165"><fc><l><bo op="m"><l><n>listClass</n></l><r><n>set_lddata</n></r></bo></l><args><e><bo><l><bo><l><lit str="$NET_GENERIC[System.Collections.ObjectModel.Collection&lt;" /></l><r><fc><l><n>GetNETTypeName</n></l><args><e><n>typeOfElements</n></e></args></fc></r></bo></l><r><lit str="&gt;]$" /></r></bo></e></args></fc></e><e ldsrc="166"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Tipo generico insertado: " /></l><r><fc><l><bo op="m"><l><n>listClass</n></l><r><n>get_lddata</n></r></bo></l><args /></fc></r></bo></e></args></fc></e><e ldsrc="168"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>systemGenericsCollectionsNS</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>listClass</n></e></args></fc></e><e ldsrc="169"><fc><l><bo op="m"><l><n>insertedTypes</n></l><r><n>Add</n></r></bo></l><args><e><n>fullTypeString</n></e><e><lit str="true" type="bool" /></e></args></fc></e><return ldsrc="171,171"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="New" internalname="New#5" access="public" storage="static" ldsrc="174,174"><Parameters><P name="listTypeName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="174" /></P><P name="typeOfElements" number="2"><type typename="$TYPE$" typeStr="$TYPE$" ldsrc="174" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="174,223"><Decls><d name="fullTypeString" ldsrc="175"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="175"><e><bo><l><lit str="DotNET.System.Collections.Generic." /></l><r><bo op="m"><l><n>listTypeName</n></l><r><n>Identifier</n></r></bo></r></bo></e></i></d></Decls><if ldsrc="176"><boolean><bo op="OR"><l><bo op="NOTEQ"><l><b><l><bo op="m"><l><n>compiler</n></l><r><n>LastTypesTable</n></r></bo></l><args><e><n>fullTypeString</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></l><r><bo op="NOTEQ"><l><b><l><n>insertedTypes</n></l><args><e><n>fullTypeString</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></r></bo></boolean><ifbk ldsrc="176,178"><return ldsrc="177,177"><lit str="0" type="null" /></return></ifbk></if><if ldsrc="179"><boolean><bo op="EQ"><l><n>systemGenericsNS</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="179,190"><documentation short="Creo el espacio de nombres la primera vez&#xD;&#xA;" /><e ldsrc="183"><a><l><n>systemGenericsNS</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="181"><progunit><Namespace name="DotNET::System::Collections::Generic" ldsrc="182,182" /></progunit></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplNamespace" /><pi ref="true" /></type></cast></r></a></e><documentation short="Busco el cuerpo del programa para inyectarlo&#xD;&#xA;" /><Decls><d name="body" ldsrc="185"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="185"><e><n>context</n></e></i></d></Decls><while ldsrc="186"><boolean><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplDocumentBody" /></r></bo></boolean><dobk><e ldsrc="186"><a><l><n>body</n></l><r><fc><l><bo op="m"><l><n>body</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></r></a></e></dobk></while><documentation short="Lo inyecto en el cuerpo del programa&#xD;&#xA;body.Children().InsertAtBegin( systemGenericsNS );&#xD;&#xA;" /><e ldsrc="189"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>body</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertBefore</n></r></bo></l><args><e><n>systemGenericsNS</n></e><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><cast><e><n>body</n></e><type ispointer="true"><dt typename="XplDocumentBody" /><pi ref="true" /></type></cast></l><r><n>get_NamespaceNodeList</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e></args></fc></e></ifbk></if><Decls><d name="typeOfList" ldsrc="191"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="191"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="192"><fc><l><bo op="m"><l><n>typeOfList</n></l><r><n>set_typename</n></r></bo></l><args><e><bo op="m"><l><n>listTypeName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><Decls><d name="listClass" ldsrc="193"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="193"><e><writecode ldsrc="194"><class name="$listTypeName" access="public" external="true" ldsrc="195,209"><Inherits><c name="DotNET::System::Collections::ArrayList" access="public" ldsrc="195" /></Inherits><Function name="Add" access="public" storage="extern" ldsrc="197,197"><Parameters><P name="item" number="1"><type typename="$typeOfElements" ldsrc="197" /></P></Parameters><ReturnType typename="$VOID$" /></Function><Function name="Contains" access="public" storage="extern" ldsrc="198,198"><Parameters><P name="item" number="1"><type typename="$typeOfElements" ldsrc="198" /></P></Parameters><ReturnType typename="$BOOLEAN$" /></Function><Function name="Clear" access="public" storage="extern" ldsrc="199,199"><ReturnType typename="$VOID$" /></Function><Operator name="%op_eq%" access="public" storage="static_extern" ldsrc="200,200"><Parameters><P name="arg1" number="1"><type ispointer="true" ldsrc="200"><dt typename="$typeOfList" /><pi ref="true" /></type></P><P name="arg2" number="2"><type ispointer="true" ldsrc="200"><dt typename="$typeOfList" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /></Operator><Indexer name="%indexer%" access="public" storage="extern" ldsrc="201,201"><Parameters><P name="index" number="1"><type typename="$INTEGER$" ldsrc="201" /></P></Parameters><ReturnType typename="$typeOfElements" /><FunctionBody ldsrc="201,204"><Get ldsrc="202,202" lddata="%abstract%" /><Set ldsrc="203,203" lddata="%abstract%" /></FunctionBody></Indexer><Property name="Count" access="public" storage="extern" ldsrc="205"><type typename="$INTEGER$" /><body ldsrc="205,207"><Get ldsrc="206,206" lddata="%abstract%" /></body></Property><Function name="ToArray" access="public" storage="extern" ldsrc="208,208"><ReturnType ispointer="true"><dt isarray="true"><dt typename="$typeOfElements" /></dt><pi ref="true" /></ReturnType></Function></class></writecode></e></i></d></Decls><while ldsrc="212"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>typeOfElements</n></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><lit /></r></bo></boolean><dobk ldsrc="212,214"><e ldsrc="213"><a><l><n>typeOfElements</n></l><r><fc><l><bo op="m"><l><n>typeOfElements</n></l><r><n>get_dt</n></r></bo></l><args /></fc></r></a></e></dobk></while><e ldsrc="215"><fc><l><bo op="m"><l><n>listClass</n></l><r><n>set_externalname</n></r></bo></l><args><e><lit str="List&lt;T&gt;" /></e></args></fc></e><e ldsrc="216"><fc><l><bo op="m"><l><n>listClass</n></l><r><n>set_lddata</n></r></bo></l><args><e><bo><l><bo><l><lit str="$NET_GENERIC[System.Collections.Generic.List&lt;" /></l><r><fc><l><n>GetNETTypeName</n></l><args><e><n>typeOfElements</n></e></args></fc></r></bo></l><r><lit str="&gt;]$" /></r></bo></e></args></fc></e><e ldsrc="217"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Tipo generico insertado: " /></l><r><fc><l><bo op="m"><l><n>listClass</n></l><r><n>get_lddata</n></r></bo></l><args /></fc></r></bo></e></args></fc></e><e ldsrc="219"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>systemGenericsNS</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>listClass</n></e></args></fc></e><e ldsrc="220"><fc><l><bo op="m"><l><n>insertedTypes</n></l><r><n>Add</n></r></bo></l><args><e><n>fullTypeString</n></e><e><lit str="true" type="bool" /></e></args></fc></e><return ldsrc="222,222"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="GetNETTypeName" internalname="GetNETTypeName#6" access="public" storage="static" ldsrc="224,224"><Parameters><P name="zoeType" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplType" ldsrc="224"><dt typename="XplType" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="224,247"><if ldsrc="225"><boolean><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_ispointer</n></r></bo></l><args /></fc></boolean><ifbk><e ldsrc="226"><a><l><n>zoeType</n></l><r><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_dt</n></r></bo></l><args /></fc></r></a></e></ifbk></if><Decls><d name="zoeTypeName" ldsrc="227"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="227"><e><fc><l><bo op="m"><l><n>zoeType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></e></i></d></Decls><switch ldsrc="229"><e><n>zoeTypeName</n></e><case ldsrc="230"><e><lit str="$OBJECT$" /></e><bk><return ldsrc="231,231"><lit str="object" /></return></bk></case><case ldsrc="232"><e><bo><l><lit str="^_" /></l><r><n>NativeTypes::String</n></r></bo></e></case><case ldsrc="233"><e><n>NativeTypes::String</n></e><bk><return ldsrc="234,234"><lit str="string" /></return></bk></case><case ldsrc="235"><e><n>NativeTypes::Boolean</n></e><bk><return ldsrc="236,236"><lit str="bool" /></return></bk></case><case ldsrc="237"><e><n>NativeTypes::Integer</n></e><bk><return ldsrc="238,238"><lit str="int" /></return></bk></case><case ldsrc="239"><e><n>NativeTypes::Long</n></e><bk><return ldsrc="240,240"><lit str="long" /></return></bk></case><case ldsrc="241"><e><n>NativeTypes::Char</n></e><bk><return ldsrc="242,242"><lit str="char" /></return></bk></case></switch><if ldsrc="244"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>zoeTypeName</n></l><r><n>IndexOf</n></r></bo></l><args><e><lit str="DotNET." /></e></args></fc></l><r><lit str="0" type="integer" /></r></bo></boolean><ifbk><e ldsrc="245"><a><l><n>zoeTypeName</n></l><r><fc><l><bo op="m"><l><n>zoeTypeName</n></l><r><n>Substring</n></r></bo></l><args><e><lit str="7" type="integer" /></e></args></fc></r></a></e></ifbk></if><return ldsrc="246,246"><n>zoeTypeName</n></return></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class></Namespace></DocumentBody></XPLDocument>