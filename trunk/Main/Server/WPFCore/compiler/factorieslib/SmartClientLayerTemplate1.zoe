<XPLDocument><DocumentBody ldsrc="1,1,.\\MainTemplate.es\\SmartClientLayerTemplate.dpp"><Import ldsrc="1"><ns>Microsoft</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Import ldsrc="2"><ns>System</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Using ldsrc="3"><ns>DotNET::System</ns></Using><Using ldsrc="4"><ns>DotNET::System::IO</ns></Using><Using ldsrc="5"><ns>DotNET::System::Collections</ns></Using><Using ldsrc="6"><ns>DotNET::LayerD::CodeDOM</ns></Using><Using ldsrc="7"><ns>DotNET::LayerD::ZOECompiler</ns></Using><Namespace name="UtnEmall::Utils" ldsrc="9,467"><Class name="SCLGenerator" access="public" isfactory="true" ldsrc="10,466"><Field name="_entityTypesNamespace" storage="static" ldsrc="11,11"><type ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="_serviceNamespace" storage="static" ldsrc="12,12"><type ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="_originalClassName" storage="static" ldsrc="13,13"><type ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="_originalClassName2" storage="static" ldsrc="14,14"><type ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="_sourceNamespace" storage="static" ldsrc="16,16"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNamespace"><dt typename="XplNamespace" /><pi ref="true" /></type></Field><Field name="_clase" storage="static" ldsrc="17,17"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplClass"><dt typename="XplClass" /><pi ref="true" /></type></Field><Function name="SetNamespace" internalname="SetNamespace#7" access="public" storage="static" ldsrc="19,19"><Parameters><P name="salNamespace" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="19" /></P><P name="isCustomService" number="2"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="19" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="20,36"><documentation short=" If the namespace was set already, then ignore the creation, this&#xD;&#xA; was due to repeated calls to this function.&#xD;&#xA;" /><if ldsrc="23"><boolean><bo op="EQ"><l><n>_sourceNamespace</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="24,33"><documentation short=" Construct the namespace based on the identifier.&#xD;&#xA;" /><e ldsrc="29"><a><l><n>_sourceNamespace</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="26"><progunit><Namespace name="$salNamespace" ldsrc="27,28" /></progunit></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplNamespace" /><pi ref="true" /></type></cast></r></a></e><documentation short=" Insert a new namespace and a class to know if the client is connected.&#xD;&#xA;" /><e ldsrc="31"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentDocumentBody</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>_sourceNamespace</n></e></args></fc></e></ifbk></if><return ldsrc="35,35"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="GenerateAccessFacades" internalname="GenerateAccessFacades#8" access="public" storage="static" ldsrc="38,38"><Parameters><P name="_serviceNamespace" number="1"><type ispointer="true" typeStr="^_$STRING$" ldsrc="38"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="_entityTypesNamespace" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="38"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="38,40"><return ldsrc="39,39"><fc><l><n>GenerateAccessFacades</n></l><args><e><n>_serviceNamespace</n></e><e><n>_entityTypesNamespace</n></e><e><lit str="false" type="bool" /></e></args></fc></return></FunctionBody></Function><Function name="GenerateAccessFacades" internalname="GenerateAccessFacades#9" access="public" storage="static" ldsrc="42,42"><Parameters><P name="_serviceNamespace" number="1"><type ispointer="true" typeStr="^_$STRING$" ldsrc="42"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="_entityTypesNamespace" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="42"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="isCustomService" number="3"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="42" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="42,68"><e ldsrc="43"><a><l><n>_serviceNamespace</n></l><r><n>_serviceNamespace</n></r></a></e><e ldsrc="44"><a><l><n>_entityTypesNamespace</n></l><r><n>_entityTypesNamespace</n></r></a></e><documentation short=" Set the current class name&#xD;&#xA;" /><Decls><d name="currentClassName" ldsrc="46"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="46"><e><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>get_name</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="47"><boolean><bo op="EQ"><l><b><l><n>currentClassName</n></l><args><e><lit str="0" type="integer" /></e></args></b></l><r><lit str="I" type="char" /></r></bo></boolean><ifbk><e ldsrc="48"><a><l><n>_originalClassName</n></l><r><fc><l><bo op="m"><l><n>currentClassName</n></l><r><n>Substring</n></r></bo></l><args><e><lit str="1" type="integer" /></e></args></fc></r></a></e></ifbk><else ldsrc="49"><e ldsrc="50"><a><l><n>_originalClassName</n></l><r><n>currentClassName</n></r></a></e></else></if><documentation short=" Full string name to use for static layer&#xD;&#xA;" /><e ldsrc="53"><a><l><n>_originalClassName2</n></l><r><bo><l><lit str="UtnEmall.Client.Entity." /></l><r><n>_originalClassName</n></r></bo></r></a></e><e ldsrc="55"><a><l><n>_clase</n></l><r><lit str="0" type="null" /></r></a></e><documentation short=" Iterate through class members, if it is a method, then process it.&#xD;&#xA;" /><for ldsrc="57,57"><init><dl><d name="member" ldsrc="57"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="57,64"><if ldsrc="58"><boolean><bo op="AND"><l><bo op="AND"><l><bo op="EQ"><l><fc><l><bo op="m"><l><n>member</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunction" /></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><lit str="GenerateWSProxy" /></r></bo></r></bo></l><r><bo op="NOTEQ"><l><fc><l><bo op="m"><l><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><lit str="GenerateAccessFacades" /></r></bo></r></bo></boolean><ifbk ldsrc="61,63"><e ldsrc="62"><fc><l><n>GenerateFacade</n></l><args><e><cast><e><n>member</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e><e><n>isCustomService</n></e></args></fc></e></ifbk></if></forblock></for><e ldsrc="66"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>_sourceNamespace</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>_clase</n></e></args></fc></e><return ldsrc="67,67"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="GenerateFacade" internalname="GenerateFacade#10" storage="static" ldsrc="70,70"><Parameters><P name="function" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunction" ldsrc="70"><dt typename="XplFunction" /><pi ref="true" /></type></P><P name="isCustomService" number="2"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="70" /></P></Parameters><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="71,440"><Decls><d name="className" ldsrc="72"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="72"><e><new><type typename="XplIName" /><init ldsrc="72"><list><e><bo><l><n>_originalClassName</n></l><r><lit str="Smart" /></r></bo></e></list></init></new></e></i></d></Decls><documentation short=" Establish the local business clients.						&#xD;&#xA;" /><Decls><d name="localClientType" ldsrc="74"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="74"><e><new><type typename="XplIName" /><init ldsrc="74"><list><e><n>_originalClassName</n></e></list></init></new></e></i></d></Decls><if ldsrc="75"><boolean><n>isCustomService</n></boolean><ifbk ldsrc="76,78"><e ldsrc="77"><a><l><n>localClientType</n></l><r><new><type typename="XplIName" /><init ldsrc="77"><list><e><bo><l><n>_originalClassName</n></l><r><lit str="Local" /></r></bo></e></list></init></new></r></a></e></ifbk></if><documentation short=" Establish the WS clients.&#xD;&#xA;" /><Decls><d name="wsClientType" ldsrc="81"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="81"><e><new><type typename="XplIName" /><init ldsrc="81"><list><e><bo><l><n>_originalClassName</n></l><r><lit str="Client" /></r></bo></e></list></init></new></e></i></d></Decls><documentation short=" Establish the entity type. (for non customer services only)&#xD;&#xA;" /><Decls><d name="entityType" ldsrc="84"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="84"><e><new><type typename="XplIName" /><init ldsrc="84"><list><e><bo><l><n>_originalClassName</n></l><r><lit str="Entity" /></r></bo></e></list></init></new></e></i></d></Decls><documentation short=" Establish the values for the functions.&#xD;&#xA;" /><Decls><d name="functionName" ldsrc="87"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="87"><e><new><type typename="XplIName" /><init ldsrc="87"><list><e><fc><l><bo op="m"><l><n>function</n></l><r><n>get_name</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="functionReturnType" ldsrc="88"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="88"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_ReturnType</n></r></bo></l><args /></fc></l><r><n>Clone</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="functionParameters" ldsrc="89"><type ispointer="true"><dt typename="XplParameters" /><pi ref="true" /></type><i ldsrc="89"><e><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Clone</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplParameters" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short=" Establish the generic function for the clients.&#xD;&#xA;" /><Decls><d name="remoteFunctionCall" ldsrc="92"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="92"><e><writecode ldsrc="92"><e><fc><l><bo op="m"><l><n>Remote</n></l><r><n>$functionName</n></r></bo></l><args /></fc></e></writecode></e></i></d></Decls><Decls><d name="localFunctionCall" ldsrc="93"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="93"><e><writecode ldsrc="93"><e><fc><l><bo op="m"><l><n>Local</n></l><r><n>$functionName</n></r></bo></l><args /></fc></e></writecode></e></i></d></Decls><documentation short=" If the function is static change the call&#xD;&#xA;" /><if ldsrc="95"><boolean><bo op="OR"><l><bo op="EQ"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_storage</n></r></bo></l><args /></fc></l><r><n>XplVarstorage_enum::STATIC</n></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_storage</n></r></bo></l><args /></fc></l><r><n>XplVarstorage_enum::STATIC_EXTERN</n></r></bo></r></bo></boolean><ifbk ldsrc="96,99"><e ldsrc="97"><a><l><n>remoteFunctionCall</n></l><r><writecode ldsrc="97"><e><fc><l><n>$wsClientType::$functionName</n></l><args /></fc></e></writecode></r></a></e><e ldsrc="98"><a><l><n>localFunctionCall</n></l><r><writecode ldsrc="98"><e><fc><l><n>$localClientType::$functionName</n></l><args /></fc></e></writecode></r></a></e></ifbk></if><Decls><d name="remoteFC" ldsrc="101"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="101"><e><cast><e><fc><l><bo op="m"><l><n>remoteFunctionCall</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><Decls><d name="localFC" ldsrc="102"><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type><i ldsrc="102"><e><cast><e><fc><l><bo op="m"><l><n>localFunctionCall</n></l><r><n>get_Content</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunctioncall" /><pi ref="true" /></type></cast></e></i></d></Decls><documentation short=" Establish the function name for the data synchronization.&#xD;&#xA;" /><Decls><d name="synchFunctionName" ldsrc="104"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="104"><e><new><type typename="XplIName" /><init ldsrc="104"><list><e><bo><l><bo><l><lit str="Get" /></l><r><n>_originalClassName</n></r></bo></l><r><lit str="Where" /></r></bo></e></list></init></new></e></i></d></Decls><documentation short=" Insert all the arguments in the two functions.&#xD;&#xA;" /><for ldsrc="107,107"><init><dl><d name="param" ldsrc="107"><type ispointer="true"><dt typename="XplParameter" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="108,117"><Decls><d name="paramName" ldsrc="109"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="109"><e><new><type typename="XplIName" /><init ldsrc="109"><list><e><fc><l><bo op="m"><l><n>param</n></l><r><n>get_name</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><documentation short=" Add all parameters to remote business layer&#xD;&#xA;" /><e ldsrc="111"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>remoteFC</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="111"><e><n>$paramName</n></e></writecode></e></args></fc></e><documentation short=" Do not add session parameter to local business layer calls&#xD;&#xA;" /><if ldsrc="113"><boolean><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>param</n></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><lit str="session" /></r></bo></boolean><ifbk ldsrc="114,116"><e ldsrc="115"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>localFC</n></l><r><n>get_args</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="115"><e><n>$paramName</n></e></writecode></e></args></fc></e></ifbk></if></forblock></for><documentation short=" The type for the list of entities (non customer services)&#xD;&#xA;" /><Decls><d name="entityClientList" ldsrc="120"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="120"><e><new><type typename="XplIName" /><init ldsrc="120"><list><e><bo><l><lit str="ListOf" /></l><r><n>_originalClassName</n></r></bo></e></list></init></new></e></i></d></Decls><documentation short=" Type of List Of LastSyncEntity &#xD;&#xA;" /><Decls><d name="LastSyncList" ldsrc="122"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="122"><e><new><type typename="XplIName" /><init ldsrc="122"><list><e><lit str="ListOfLastSyncEntity" /></e></list></init></new></e></i></d></Decls><if ldsrc="124"><boolean><bo op="AND"><l><bo op="EQ"><l><n>_clase</n></l><r><lit str="0" type="null" /></r></bo></l><r><uo op="not"><u><n>isCustomService</n></u></uo></r></bo></boolean><ifbk ldsrc="125,217"><documentation short=" Common class body for non customer services smart client layer&#xD;&#xA;" /><e ldsrc="216"><a><l><n>_clase</n></l><r><writecode ldsrc="127"><class name="$className" access="public" ldsrc="128,215"><Field name="_local" ldsrc="130,130"><type ispointer="true"><dt typename="$localClientType" /><pi ref="true" /></type></Field><Field name="_remote" ldsrc="131,131"><type ispointer="true"><dt typename="$wsClientType" /><pi ref="true" /></type></Field><Field name="_lastSync" storage="static" ldsrc="132,132"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></type></Field><Property name="Local" ldsrc="134"><type ispointer="true"><dt typename="$localClientType" /><pi ref="true" /></type><body ldsrc="135,144"><Get ldsrc="137,143"><if ldsrc="138"><boolean><bo op="EQ"><l><n>_local</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="139,141"><e ldsrc="140"><a><l><n>_local</n></l><r><new><type typename="$localClientType" /></new></r></a></e></ifbk></if><return ldsrc="142,142"><n>_local</n></return></Get></body></Property><Property name="Remote" ldsrc="146"><type ispointer="true"><dt typename="$wsClientType" /><pi ref="true" /></type><body ldsrc="147,159"><Get ldsrc="149,158"><if ldsrc="150"><boolean><bo op="EQ"><l><n>_remote</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="151,156"><e ldsrc="155"><a><l><n>_remote</n></l><r><new><type typename="$wsClientType" /><init ldsrc="155"><list><e><n>DotNET::UtnEmall::Client::SmartClientLayer::Connection::ServerBinding</n></e><e><new><type typename="EndpointAddress" /><init ldsrc="154"><list><e><bo><l><bo op="m"><l><n>DotNET::UtnEmall::Client::SmartClientLayer::Connection::ServerUri</n></l><r><n>AbsoluteUri</n></r></bo></l><r><n>$_originalClassName</n></r></bo></e></list></init></new></e></list></init></new></r></a></e></ifbk></if><return ldsrc="157,157"><n>_remote</n></return></Get></body></Property><Property name="LastSync" storage="static" ldsrc="161"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></type><body ldsrc="162,192"><Get ldsrc="164,183"><if ldsrc="165"><boolean><bo op="EQ"><l><n>_lastSync</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="166,180"><Decls><d name="lastSyncDataAccess" ldsrc="167"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::DataModel::LastSyncDataAccess" /><pi ref="true" /></type><i ldsrc="167"><e><new><type typename="DotNET::UtnEmall::Client::DataModel::LastSyncDataAccess" /></new></e></i></d></Decls><Decls><d name="results" ldsrc="168"><type ispointer="true"><dt typename="$LastSyncList" /><pi ref="true" /></type><i ldsrc="168"><e><fc><l><bo op="m"><l><n>lastSyncDataAccess</n></l><r><n>LoadWhere</n></r></bo></l><args><e><n>DotNET::UtnEmall::Client::EntityModel::LastSyncEntity::DBEntityName</n></e><e><n>$_originalClassName2</n></e><e><lit str="false" type="bool" /></e><e><n>DotNET::UtnEmall::Client::DataModel::OperatorType::Equal</n></e></args></fc></e></i></d></Decls><if ldsrc="170"><boolean><bo op="GR"><l><bo op="m"><l><n>results</n></l><r><n>Count</n></r></bo></l><r><lit str="0" type="integer" /></r></bo></boolean><ifbk ldsrc="171,173"><e ldsrc="172"><a><l><n>_lastSync</n></l><r><b><l><n>results</n></l><args><e><lit str="0" type="integer" /></e></args></b></r></a></e></ifbk><else ldsrc="174"><e ldsrc="176"><a><l><n>_lastSync</n></l><r><new><type typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /></new></r></a></e><e ldsrc="177"><a><l><bo op="m"><l><n>_lastSync</n></l><r><n>EntityName</n></r></bo></l><r><n>$_originalClassName2</n></r></a></e><e ldsrc="178"><a><l><bo op="m"><l><n>_lastSync</n></l><r><n>LastTimestamp</n></r></bo></l><r><n>DotNET::UtnEmall::Client::SmartClientLayer::Connection::MinDate</n></r></a></e></else></if></ifbk></if><return ldsrc="182,182"><n>_lastSync</n></return></Get><Set ldsrc="186,191"><e ldsrc="187"><a><l><bo op="m"><l><n>_lastSync</n></l><r><n>LastTimestamp</n></r></bo></l><r><bo op="m"><l><n>value</n></l><r><n>LastTimestamp</n></r></bo></r></a></e><e ldsrc="188"><a><l><bo op="m"><l><n>_lastSync</n></l><r><n>EntityName</n></r></bo></l><r><bo op="m"><l><n>value</n></l><r><n>EntityName</n></r></bo></r></a></e><Decls><d name="lastSyncDataAccess" ldsrc="189"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::DataModel::LastSyncDataAccess" /><pi ref="true" /></type><i ldsrc="189"><e><new><type typename="DotNET::UtnEmall::Client::DataModel::LastSyncDataAccess" /></new></e></i></d></Decls><e ldsrc="190"><fc><l><bo op="m"><l><n>lastSyncDataAccess</n></l><r><n>Save</n></r></bo></l><args><e><n>_lastSync</n></e></args></fc></e></Set></body></Property><Function name="CheckIsSynchronized" access="public" ldsrc="195,195"><ReturnType typename="$VOID$" /><FunctionBody ldsrc="196,214"><documentation short=" if we didn't synchronized since the last disconnection&#xD;&#xA;" /><if ldsrc="198"><boolean><bo op="LSEQ"><l><bo op="m"><l><n>$className::LastSync</n></l><r><n>LastTimestamp</n></r></bo></l><r><n>Connection::LastTimeDisconnected</n></r></bo></boolean><ifbk ldsrc="199,213"><documentation short=" get the remote entities that are not saved on the device&#xD;&#xA;" /><Decls><d name="remoteUpdates" ldsrc="201"><type ispointer="true"><dt typename="$entityClientList" /><pi ref="true" /></type><i ldsrc="201"><e><fc><l><bo op="m"><l><n>Remote</n></l><r><n>$synchFunctionName</n></r></bo></l><args><e><n>$entityType::DBTimestamp</n></e><e><bo op="m"><l><n>$className::LastSync</n></l><r><n>LastTimestamp</n></r></bo></e><e><lit str="false" type="bool" /></e><e><n>DotNET::UtnEmall::Client::DataModel::OperatorType::Greater</n></e><e><n>Connection::Session</n></e></args></fc></e></i></d></Decls><documentation short=" save the remote entities on the device&#xD;&#xA;" /><for ldsrc="204,204"><init><dl><d name="remoteEntity" ldsrc="204"><type ispointer="true"><dt typename="$entityType" /><pi ref="true" /></type></d></dl></init><condition><n>remoteUpdates</n></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="205,207"><e ldsrc="206"><fc><l><bo op="m"><l><n>Local</n></l><r><n>Save</n></r></bo></l><args><e><n>remoteEntity</n></e></args></fc></e></forblock></for><Decls><d name="now" ldsrc="209"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></type><i ldsrc="209"><e><new><type typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /></new></e></i></d></Decls><e ldsrc="210"><a><l><bo op="m"><l><n>now</n></l><r><n>LastTimestamp</n></r></bo></l><r><n>DateTime::Now</n></r></a></e><e ldsrc="211"><a><l><bo op="m"><l><n>now</n></l><r><n>EntityName</n></r></bo></l><r><n>$_originalClassName2</n></r></a></e><e ldsrc="212"><a><l><n>$className::LastSync</n></l><r><n>now</n></r></a></e></ifbk></if></FunctionBody></Function></class></writecode></r></a></e></ifbk><else ldsrc="218"><if ldsrc="218"><boolean><bo op="AND"><l><bo op="EQ"><l><n>_clase</n></l><r><lit str="0" type="null" /></r></bo></l><r><n>isCustomService</n></r></bo></boolean><ifbk ldsrc="219,277"><e ldsrc="276"><a><l><n>_clase</n></l><r><writecode ldsrc="220"><class name="$className" access="public" ldsrc="221,275"><Field name="_local" ldsrc="223,223"><type ispointer="true"><dt typename="$localClientType" /><pi ref="true" /></type></Field><Field name="_remote" ldsrc="224,224"><type ispointer="true"><dt typename="$wsClientType" /><pi ref="true" /></type></Field><Field name="lastSyncs" storage="static" ldsrc="225,225"><type ispointer="true"><dt typename="Hashtable" /><pi ref="true" /></type><i ldsrc="225"><e><new><type typename="Hashtable" /></new></e></i></Field><Property name="Local" ldsrc="227"><type ispointer="true"><dt typename="$localClientType" /><pi ref="true" /></type><body ldsrc="228,237"><Get ldsrc="230,236"><if ldsrc="231"><boolean><bo op="EQ"><l><n>_local</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="232,234"><e ldsrc="233"><a><l><n>_local</n></l><r><new><type typename="$localClientType" /></new></r></a></e></ifbk></if><return ldsrc="235,235"><n>_local</n></return></Get></body></Property><Property name="Remote" ldsrc="238"><type ispointer="true"><dt typename="$wsClientType" /><pi ref="true" /></type><body ldsrc="239,251"><Get ldsrc="241,250"><if ldsrc="242"><boolean><bo op="EQ"><l><n>_remote</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="243,248"><e ldsrc="247"><a><l><n>_remote</n></l><r><new><type typename="$wsClientType" /><init ldsrc="247"><list><e><n>DotNET::UtnEmall::Client::SmartClientLayer::Connection::ServerBinding</n></e><e><new><type typename="EndpointAddress" /><init ldsrc="246"><list><e><bo><l><bo op="m"><l><n>DotNET::UtnEmall::Client::SmartClientLayer::Connection::ServerUri</n></l><r><n>AbsoluteUri</n></r></bo></l><r><n>$_originalClassName</n></r></bo></e></list></init></new></e></list></init></new></r></a></e></ifbk></if><return ldsrc="249,249"><n>_remote</n></return></Get></body></Property><Function name="GetLastSynchronizationOf" storage="static" ldsrc="253,253"><Parameters><P name="entityTypeName" number="1"><type ispointer="true" ldsrc="253"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="253,274"><if ldsrc="254"><boolean><bo op="EQ"><l><b><l><n>lastSyncs</n></l><args><e><n>entityTypeName</n></e></args></b></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="254,272"><documentation short=" Search the last sync date for the current Entity&#xD;&#xA;" /><Decls><d name="lastSyncDataAccess" ldsrc="256"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::DataModel::LastSyncDataAccess" /><pi ref="true" /></type><i ldsrc="256"><e><new><type typename="DotNET::UtnEmall::Client::DataModel::LastSyncDataAccess" /></new></e></i></d></Decls><Decls><d name="results" ldsrc="257"><type ispointer="true"><dt typename="$LastSyncList" /><pi ref="true" /></type><i ldsrc="257"><e><fc><l><bo op="m"><l><n>lastSyncDataAccess</n></l><r><n>LoadWhere</n></r></bo></l><args><e><n>DotNET::UtnEmall::Client::EntityModel::LastSyncEntity::DBEntityName</n></e><e><n>entityTypeName</n></e><e><lit str="false" type="bool" /></e><e><n>DotNET::UtnEmall::Client::DataModel::OperatorType::Equal</n></e></args></fc></e></i></d></Decls><Decls><d name="lastSync" ldsrc="258"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></type></d></Decls><if ldsrc="260"><boolean><bo op="GR"><l><bo op="m"><l><n>results</n></l><r><n>Count</n></r></bo></l><r><lit str="0" type="integer" /></r></bo></boolean><ifbk ldsrc="261,263"><e ldsrc="262"><a><l><n>lastSync</n></l><r><b><l><n>results</n></l><args><e><lit str="0" type="integer" /></e></args></b></r></a></e></ifbk><else ldsrc="264"><e ldsrc="266"><a><l><n>lastSync</n></l><r><new><type typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /></new></r></a></e><e ldsrc="267"><a><l><bo op="m"><l><n>lastSync</n></l><r><n>EntityName</n></r></bo></l><r><n>entityTypeName</n></r></a></e><e ldsrc="268"><a><l><bo op="m"><l><n>lastSync</n></l><r><n>LastTimestamp</n></r></bo></l><r><n>DotNET::UtnEmall::Client::SmartClientLayer::Connection::MinDate</n></r></a></e></else></if><documentation short=" Add the sync date to the current hashtable&#xD;&#xA;" /><e ldsrc="271"><fc><l><bo op="m"><l><n>lastSyncs</n></l><r><n>Add</n></r></bo></l><args><e><n>entityTypeName</n></e><e><n>lastSync</n></e></args></fc></e></ifbk></if><return ldsrc="273,273"><cast><e><b><l><n>lastSyncs</n></l><args><e><n>entityTypeName</n></e></args></b></e><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></type></cast></return></FunctionBody></Function></class></writecode></r></a></e></ifbk></if></else></if><Decls><d name="facadeFunction" ldsrc="279"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="279"><e><lit str="0" type="null" /></e></i></d></Decls><if ldsrc="281"><boolean><uo op="not"><u><n>isCustomService</n></u></uo></boolean><ifbk ldsrc="281,303"><documentation short=" Generate the skeleton for the switch method.&#xD;&#xA;" /><e ldsrc="302"><a><l><n>facadeFunction</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="283"><classmembers><Function name="$functionName" access="public" ldsrc="285,285"><ReturnType typename="$functionReturnType" /><FunctionBody ldsrc="286,301"><e ldsrc="287"><fc><l><n>UtnEmall::Utils::List::NewCollection</n></l><args><e><n>$entityClientList</n></e><e><t ispointer="true"><dt typename="$entityType" /><pi ref="true" /></t></e></args></fc></e><e ldsrc="288"><fc><l><n>UtnEmall::Utils::List::NewCollection</n></l><args><e><n>$LastSyncList</n></e><e><t ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></t></e></args></fc></e><Decls><d name="result" ldsrc="289"><type typename="$functionReturnType" /></d></Decls><documentation short=" if we are connected&#xD;&#xA;" /><if ldsrc="291"><boolean><n>Connection::IsConnected</n></boolean><ifbk ldsrc="292,295"><e ldsrc="293"><fc><l><n>CheckIsSynchronized</n></l><args /></fc></e><e ldsrc="294"><a><l><n>result</n></l><r><n>$remoteFunctionCall</n></r></a></e></ifbk><else ldsrc="296"><e ldsrc="298"><a><l><n>result</n></l><r><n>$localFunctionCall</n></r></a></e></else></if><return ldsrc="300,300"><n>result</n></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></r></a></e></ifbk><else ldsrc="304"><Decls><d name="syncEntityFunc" ldsrc="305"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="305"><e><lit str="0" type="null" /></e></i></d></Decls><Decls><d name="remoteEntityType" ldsrc="306"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="306"><e><lit str="0" type="null" /></e></i></d></Decls><Decls><d name="entityDAType" ldsrc="307"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="307"><e><lit str="0" type="null" /></e></i></d></Decls><documentation short=" Generate the checkSync function from Entity&#xD;&#xA;" /><if ldsrc="310"><boolean><bo op="NOTEQ"><l><fc><l><bo op="m"><l><n>functionReturnType</n></l><r><n>get_dt</n></r></bo></l><args /></fc></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="311,410"><documentation short=" WARNING : Asumo que el nombre del tipo de retorno comienza con &quot;CollectionOf ... Entity&quot;&#xD;&#xA;" /><Decls><d name="entityTypeString" ldsrc="313"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="313"><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>functionReturnType</n></l><r><n>get_dt</n></r></bo></l><args /></fc></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><n>Substring</n></r></bo></l><args><e><lit str="12" type="integer" /></e></args></fc></e></i></d></Decls><documentation short=" Name for the function that will check these entities&#xD;&#xA;" /><Decls><d name="syncFuncName" ldsrc="315"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="315"><e><bo><l><lit str="Check" /></l><r><n>entityTypeString</n></r></bo></e></i></d></Decls><documentation short=" Name for the data access class of the entity type to check&#xD;&#xA;" /><Decls><d name="entityDA" ldsrc="317"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="317"><e><bo><l><fc><l><bo op="m"><l><n>entityTypeString</n></l><r><n>Substring</n></r></bo></l><args><e><lit str="0" type="integer" /></e><e><bo op="min"><l><bo op="m"><l><n>entityTypeString</n></l><r><n>Length</n></r></bo></l><r><lit str="6" type="integer" /></r></bo></e></args></fc></l><r><lit str="DataAccess" /></r></bo></e></i></d></Decls><documentation short=" Initialize inames &#xD;&#xA;" /><e ldsrc="320"><a><l><n>remoteEntityType</n></l><r><new><type typename="XplIName" /><init ldsrc="320"><list><e><n>entityTypeString</n></e></list></init></new></r></a></e><e ldsrc="321"><a><l><n>syncEntityFunc</n></l><r><new><type typename="XplIName" /><init ldsrc="321"><list><e><n>syncFuncName</n></e></list></init></new></r></a></e><e ldsrc="322"><a><l><n>entityDAType</n></l><r><new><type typename="XplIName" /><init ldsrc="322"><list><e><n>entityDA</n></e></list></init></new></r></a></e><documentation short=" Full string to use on LastSync table to identify this entity type&#xD;&#xA; Don't move this line upper :-) &#xD;&#xA;" /><e ldsrc="326"><a><l><n>entityTypeString</n></l><r><bo><l><bo><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>function</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></l><r><n>get_Parent</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplNamespace" /><pi ref="true" /></type></cast></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><n>Replace</n></r></bo></l><args><e><lit str="::" /></e><e><lit str="." /></e></args></fc></l><r><lit str="." /></r></bo></l><r><n>entityTypeString</n></r></bo></r></a></e><Decls><d name="exists" ldsrc="328"><type typename="$BOOLEAN$" /><i ldsrc="328"><e><lit str="false" type="bool" /></e></i></d></Decls><documentation short=" Search for the Check function&#xD;&#xA;" /><for ldsrc="330,330"><init><dl><d name="node" ldsrc="330"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type></d></dl></init><condition><fc><l><bo op="m"><l><n>_clase</n></l><r><n>Children</n></r></bo></l><args /></fc></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="331,340"><if ldsrc="332"><boolean><is><e><n>node</n></e><type typename="XplFunction" /></is></boolean><ifbk ldsrc="333,339"><Decls><d name="nodeFunc" ldsrc="334"><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type><i ldsrc="334"><e><cast><e><n>node</n></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></e></i></d></Decls><if ldsrc="335"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>nodeFunc</n></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><bo op="m"><l><n>syncEntityFunc</n></l><r><n>Identifier</n></r></bo></r></bo></boolean><ifbk ldsrc="336,338"><e ldsrc="337"><a><l><n>exists</n></l><r><lit str="true" type="bool" /></r></a></e></ifbk></if></ifbk></if></forblock></for><if ldsrc="342"><boolean><uo op="not"><u><n>exists</n></u></uo></boolean><ifbk ldsrc="343,388"><documentation short=" Create function to check for certain entity type&#xD;&#xA;" /><e ldsrc="387"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>_clase</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="346"><classmembers><Function name="$syncEntityFunc" ldsrc="348,348"><Parameters><P name="entities" number="1"><type typename="$functionReturnType" ldsrc="348" /></P></Parameters><ReturnType typename="$VOID$" /><FunctionBody ldsrc="349,386"><documentation short=" Check if each entity is up-to-date&#xD;&#xA; If it isn't, then save it locally&#xD;&#xA;" /><Decls><d name="lastSync" ldsrc="352"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></type><i ldsrc="352"><e><fc><l><n>$className::GetLastSynchronizationOf</n></l><args><e><n>$entityTypeString</n></e></args></fc></e></i></d></Decls><Decls><d name="dataAccess" ldsrc="353"><type ispointer="true"><dt typename="$entityDAType" /><pi ref="true" /></type><i ldsrc="353"><e><new><type typename="$entityDAType" /></new></e></i></d></Decls><for ldsrc="355,355"><init><dl><d name="remoteEntity" ldsrc="355"><type ispointer="true"><dt typename="$remoteEntityType" /><pi ref="true" /></type></d></dl></init><condition><n>entities</n></condition><repeat><e><n>_FOR_EACH_</n></e></repeat><forblock ldsrc="356,378"><if ldsrc="357"><boolean><bo op="GR"><l><bo op="m"><l><n>remoteEntity</n></l><r><n>Timestamp</n></r></bo></l><r><bo op="m"><l><n>lastSync</n></l><r><n>LastTimestamp</n></r></bo></r></bo></boolean><ifbk ldsrc="358,369"><if ldsrc="359"><boolean><bo op="m"><l><n>remoteEntity</n></l><r><n>Deleted</n></r></bo></boolean><ifbk ldsrc="360,363"><documentation short=" Delete the entity from mobile database.&#xD;&#xA;" /><e ldsrc="362"><fc><l><bo op="m"><l><n>dataAccess</n></l><r><n>Delete</n></r></bo></l><args><e><n>remoteEntity</n></e><e><lit str="0" type="null" /></e></args></fc></e></ifbk><else ldsrc="364"><documentation short=" Save the new or modified entity locally&#xD;&#xA;" /><e ldsrc="367"><fc><l><bo op="m"><l><n>dataAccess</n></l><r><n>Save</n></r></bo></l><args><e><n>remoteEntity</n></e></args></fc></e></else></if></ifbk><else ldsrc="370"><Decls><d name="tempEntity" ldsrc="371"><type ispointer="true"><dt typename="$remoteEntityType" /><pi ref="true" /></type><i ldsrc="371"><e><fc><l><bo op="m"><l><n>dataAccess</n></l><r><n>Load</n></r></bo></l><args><e><bo op="m"><l><n>remoteEntity</n></l><r><n>Id</n></r></bo></e><e><lit str="false" type="bool" /></e></args></fc></e></i></d></Decls><if ldsrc="372"><boolean><bo op="OR"><l><bo op="EQ"><l><bo op="m"><l><n>tempEntity</n></l><r><n>Id</n></r></bo></l><r><lit str="0" type="integer" /></r></bo></l><r><bo op="LS"><l><bo op="m"><l><n>tempEntity</n></l><r><n>Timestamp</n></r></bo></l><r><bo op="m"><l><n>remoteEntity</n></l><r><n>Timestamp</n></r></bo></r></bo></r></bo></boolean><ifbk ldsrc="373,376"><documentation short=" Save the new or modified entity locally&#xD;&#xA;" /><e ldsrc="375"><fc><l><bo op="m"><l><n>dataAccess</n></l><r><n>Save</n></r></bo></l><args><e><n>remoteEntity</n></e></args></fc></e></ifbk></if></else></if></forblock></for><documentation short=" Save the new last sync time&#xD;&#xA;" /><e ldsrc="381"><a><l><bo op="m"><l><n>lastSync</n></l><r><n>LastTimestamp</n></r></bo></l><r><n>DateTime::Now</n></r></a></e><documentation short=" Assign the new sync info and save&#xD;&#xA;" /><Decls><d name="lastSyncDataAccess" ldsrc="384"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::DataModel::LastSyncDataAccess" /><pi ref="true" /></type><i ldsrc="384"><e><new><type typename="DotNET::UtnEmall::Client::DataModel::LastSyncDataAccess" /></new></e></i></d></Decls><e ldsrc="385"><fc><l><bo op="m"><l><n>lastSyncDataAccess</n></l><r><n>Save</n></r></bo></l><args><e><n>lastSync</n></e></args></fc></e></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e></args></fc></e></ifbk></if><documentation short="   the skeleton for the switch method.&#xD;&#xA;" /><e ldsrc="409"><a><l><n>facadeFunction</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="391"><classmembers><Function name="$functionName" access="public" ldsrc="393,393"><ReturnType typename="$functionReturnType" /><FunctionBody ldsrc="394,408"><e ldsrc="395"><fc><l><n>UtnEmall::Utils::List::NewCollection</n></l><args><e><n>$LastSyncList</n></e><e><t ispointer="true"><dt typename="DotNET::UtnEmall::Client::EntityModel::LastSyncEntity" /><pi ref="true" /></t></e></args></fc></e><Decls><d name="result" ldsrc="396"><type typename="$functionReturnType" /></d></Decls><documentation short=" if we are connected&#xD;&#xA;" /><if ldsrc="398"><boolean><n>Connection::IsConnected</n></boolean><ifbk ldsrc="399,402"><e ldsrc="400"><a><l><n>result</n></l><r><n>$remoteFunctionCall</n></r></a></e><e ldsrc="401"><fc><l><n>$syncEntityFunc</n></l><args><e><n>result</n></e></args></fc></e></ifbk><else ldsrc="403"><e ldsrc="405"><a><l><n>result</n></l><r><n>$localFunctionCall</n></r></a></e></else></if><return ldsrc="407,407"><n>result</n></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></r></a></e></ifbk></if><documentation short=" Special case for Save functions&#xD;&#xA;" /><if ldsrc="413"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>functionReturnType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><lit str="$BOOLEAN$" /></r></bo></boolean><ifbk ldsrc="414,426"><e ldsrc="425"><a><l><n>facadeFunction</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="415"><classmembers><Function name="$functionName" access="public" ldsrc="417,417"><ReturnType typename="$functionReturnType" /><FunctionBody ldsrc="418,424"><if ldsrc="419"><boolean><n>Connection::IsConnected</n></boolean><ifbk ldsrc="420,422"><return ldsrc="421,421"><n>$remoteFunctionCall</n></return></ifbk></if><return ldsrc="423,423"><lit str="false" type="bool" /></return></FunctionBody></Function></classmembers></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplFunction" /><pi ref="true" /></type></cast></r></a></e></ifbk></if></else></if><documentation short=" Insert the try-catch to smart client functions&#xD;&#xA;" /><e ldsrc="430"><fc><l><n>ApplyTryCatch</n></l><args><e><n>facadeFunction</n></e></args></fc></e><if ldsrc="432"><boolean><bo op="NOTEQ"><l><n>facadeFunction</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="432,438"><e ldsrc="433"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Funcion " /></l><r><fc><l><bo op="m"><l><n>facadeFunction</n></l><r><n>get_name</n></r></bo></l><args /></fc></r></bo></e></args></fc></e><documentation short=" Insert the function inside the smart client class&#xD;&#xA;" /><e ldsrc="435"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>_clase</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>facadeFunction</n></e></args></fc></e><documentation short=" Insert the parameters inside function declaration&#xD;&#xA;" /><e ldsrc="437"><fc><l><bo op="m"><l><n>facadeFunction</n></l><r><n>set_Parameters</n></r></bo></l><args><e><n>functionParameters</n></e></args></fc></e></ifbk></if></FunctionBody></Function><Function name="ApplyTryCatch" internalname="ApplyTryCatch#11" storage="static" ldsrc="443,443"><Parameters><P name="facadeFunction" number="1"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunction" ldsrc="443"><dt typename="XplFunction" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" typeStr="$VOID$" /><FunctionBody ldsrc="443,465"><if ldsrc="444"><boolean><bo op="EQ"><l><n>facadeFunction</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk><return ldsrc="444" /></ifbk></if><Decls><d name="mainBody" ldsrc="446"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="446"><e><fc><l><bo op="m"><l><n>facadeFunction</n></l><r><n>get_FunctionBody</n></r></bo></l><args /></fc></e></i></d></Decls><if ldsrc="447"><boolean><bo op="EQ"><l><n>mainBody</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk><return ldsrc="447" /></ifbk></if><e ldsrc="464"><fc><l><bo op="m"><l><n>facadeFunction</n></l><r><n>set_FunctionBody</n></r></bo></l><args><e><writecode ldsrc="450"><bk><try ldsrc="451"><trybk ldsrc="451,453"><e ldsrc="452"><n>$mainBody</n></e></trybk><catchbk><init ldsrc="454"><d name="dataAccessError" ldsrc="454"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::DataModel::UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="454,456"><throw ldsrc="455,455"><new><type typename="DotNET::UtnEmall::Client::SmartClientLayer::UtnEmallSmartLayerException" /><init ldsrc="455"><list><e><bo op="m"><l><n>dataAccessError</n></l><r><n>Message</n></r></bo></e><e><n>dataAccessError</n></e></list></init></new></throw></bk></catchbk><catchbk><init ldsrc="457"><d name="businessLogicError" ldsrc="457"><type ispointer="true"><dt typename="DotNET::UtnEmall::Client::BusinessLogic::UtnEmallBusinessLogicException" /><pi ref="true" /></type></d></init><bk ldsrc="457,459"><throw ldsrc="458,458"><new><type typename="DotNET::UtnEmall::Client::SmartClientLayer::UtnEmallSmartLayerException" /><init ldsrc="458"><list><e><bo op="m"><l><n>businessLogicError</n></l><r><n>Message</n></r></bo></e><e><n>businessLogicError</n></e></list></init></new></throw></bk></catchbk><catchbk><init ldsrc="460"><d name="communicationError" ldsrc="460"><type ispointer="true"><dt typename="DotNET::System::ServiceModel::CommunicationException" /><pi ref="true" /></type></d></init><bk ldsrc="460,462"><throw ldsrc="461,461"><new><type typename="DotNET::UtnEmall::Client::SmartClientLayer::UtnEmallSmartLayerException" /><init ldsrc="461"><list><e><bo op="m"><l><n>communicationError</n></l><r><n>Message</n></r></bo></e><e><n>communicationError</n></e></list></init></new></throw></bk></catchbk></try></bk></writecode></e></args></fc></e></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class></Namespace></DocumentBody></XPLDocument>