<XPLDocument><DocumentBody ldsrc="1,1,.\\MainTemplate.es\\BusinessModelTemplates.dpp"><Import ldsrc="1"><ns>System</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Import ldsrc="2"><ns>LayerD.CodeDOM</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_layerd_xpl_codedom_net</ns></Import><Import ldsrc="3"><ns>LayerD.ZOECompiler</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_zoec_core</ns></Import><Using ldsrc="4"><ns>Zoe</ns></Using><Using ldsrc="5"><ns>DotNET::LayerD::ZOECompiler</ns></Using><Using ldsrc="6"><ns>DotNET::LayerD::CodeDOM</ns></Using><Using ldsrc="7"><ns>DotNET::System::Collections</ns></Using><Using ldsrc="8"><ns>DotNET::System::Collections::ObjectModel</ns></Using><Using ldsrc="9"><ns>DotNET::System</ns></Using><documentation short="Utils::DefaultNetImports();&#xD;&#xA;" /><Namespace name="UtnEmall::Utils" ldsrc="13,923"><documentation short=" Clase factory para el modelo de negocio(classEntity) y de datos(DataAccessEntity).&#xD;&#xA;" /><Class name="ModelBusiness" access="public" isfactory="true" ldsrc="16,922"><Field name="fieldsBlock" storage="static" ldsrc="18,18"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunctionBody"><dt typename="XplFunctionBody" /><pi ref="true" /></type></Field><Field name="businessClassName" storage="static" ldsrc="20,20"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="20"><e><lit str="0" type="null" /></e></i></Field><Field name="varBusiness" storage="static" ldsrc="21,21"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="21"><e><lit str="0" type="null" /></e></i></Field><Field name="entityType" storage="static" ldsrc="23,23"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplType"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="23"><e><lit str="0" type="null" /></e></i></Field><Field name="varEntity" storage="static" ldsrc="24,24"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="24"><e><lit str="0" type="null" /></e></i></Field><Field name="dataAccessType" storage="static" ldsrc="26,26"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplType"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="26"><e><lit str="0" type="null" /></e></i></Field><Field name="varDataAccess" storage="static" ldsrc="27,27"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="27"><e><lit str="0" type="null" /></e></i></Field><Field name="getAllFunctionName" storage="static" ldsrc="29,29"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="29"><e><lit str="0" type="null" /></e></i></Field><Field name="getWhereFunctionName" storage="static" ldsrc="30,30"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="30"><e><lit str="0" type="null" /></e></i></Field><Field name="getWhereEqualFunctionName" storage="static" ldsrc="31,31"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="31"><e><lit str="0" type="null" /></e></i></Field><Field name="getEntityFunctionName" storage="static" ldsrc="32,32"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="32"><e><lit str="0" type="null" /></e></i></Field><documentation short="ArrayList que almacena los campos de las entityclass.&#xD;&#xA;" /><Field name="listaCampos" storage="static" ldsrc="35,35"><type ispointer="true" typeStr="^_DotNET.System.Collections.ArrayList"><dt typename="ArrayList" /><pi ref="true" /></type><i ldsrc="35"><e><new><type typename="ArrayList" /></new></e></i></Field><documentation short=" ArrayList que almacena los tipos de los campos de las entityclass.		&#xD;&#xA;" /><Field name="listaTipos" storage="static" ldsrc="37,37"><type ispointer="true" typeStr="^_DotNET.System.Collections.ArrayList"><dt typename="ArrayList" /><pi ref="true" /></type><i ldsrc="37"><e><new><type typename="ArrayList" /></new></e></i></Field><documentation short=" Tabla con los bloques custom save&#xD;&#xA;" /><Field name="customSaves" storage="static" ldsrc="39,39"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type><i ldsrc="39"><e><new><type typename="Hashtable" /></new></e></i></Field><documentation short=" Tabla con los bloques custom delete&#xD;&#xA;" /><Field name="customDeletes" storage="static" ldsrc="41,41"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type><i ldsrc="41"><e><new><type typename="Hashtable" /></new></e></i></Field><Field name="isWindowsMobile" storage="static"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" /></Field><Field name="generateServiceAccessLayerForMobile" storage="static" ldsrc="43,43"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" /></Field><Field name="webServiceEntityNamespace" storage="static" ldsrc="44,44"><type ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="proxiesNamespace" storage="static" ldsrc="45,45"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNamespace"><dt typename="XplNamespace" /><pi ref="true" /></type><i ldsrc="45"><e><lit str="0" type="null" /></e></i></Field><Function name="SetProxiesNamespace" internalname="SetProxiesNamespace#20" access="public" storage="static" ldsrc="47,47"><Parameters><P name="newProxiesNamespace" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="47" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="47,54"><e ldsrc="51"><a><l><n>proxiesNamespace</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="48"><progunit><Namespace name="$newProxiesNamespace" ldsrc="49,50" /></progunit></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplNamespace" /><pi ref="true" /></type></cast></r></a></e><e ldsrc="52"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentDocumentBody</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>proxiesNamespace</n></e></args></fc></e><return ldsrc="53,53"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="SetMobileWebServiceEntityNamespace" internalname="SetMobileWebServiceEntityNamespace#21" access="public" storage="static" ldsrc="55,55"><Parameters><P name="namespaceStr" number="1"><type ispointer="true" typeStr="^_$STRING$" ldsrc="55"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="55,58"><e ldsrc="56"><a><l><n>webServiceEntityNamespace</n></l><r><n>namespaceStr</n></r></a></e><return ldsrc="57,57"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="IsWindowsMobile" internalname="IsWindowsMobile#22" access="public" storage="static" ldsrc="59,59"><Parameters><P name="isMobile" number="1"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="59" /></P><P name="generateServiceAccessLayer" number="2"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="59" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="60,64"><e ldsrc="61"><a><l><n>generateServiceAccessLayerForMobile</n></l><r><n>generateServiceAccessLayer</n></r></a></e><e ldsrc="62"><a><l><n>isWindowsMobile</n></l><r><n>isMobile</n></r></a></e><return ldsrc="63,63"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="IsWindowsMobile" internalname="IsWindowsMobile#23" access="public" storage="static" ldsrc="65,65"><Parameters><P name="isMobile" number="1"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="65" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="66,70"><e ldsrc="67"><a><l><n>isWindowsMobile</n></l><r><n>isMobile</n></r></a></e><e ldsrc="68"><a><l><n>generateServiceAccessLayerForMobile</n></l><r><lit str="true" type="bool" /></r></a></e><return ldsrc="69,69"><lit str="0" type="null" /></return></FunctionBody></Function><documentation short=" Define las clases Entity y DataAccess para cada clase del modelo.&#xD;&#xA;" /><Function name="Define" internalname="Define#24" access="public" storage="static" ldsrc="72,72"><Parameters><P name="modelName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="72" /></P><P name="modelData" number="2"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="72" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="72,74"><return ldsrc="73,73"><fc><l><n>Define</n></l><args><e><n>modelName</n></e><e><lit str="false" type="bool" /></e><e><n>modelData</n></e></args></fc></return></FunctionBody></Function><Function name="Define" internalname="Define#25" access="public" storage="static" ldsrc="75,75"><Parameters><P name="modelName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="75" /></P><P name="addPreserveReferenceAttribute" number="2"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="75" /></P><P name="modelData" number="3"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="75" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="76,898"><Decls><d name="wsInterfaceName" ldsrc="77"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="77"><e><new><type typename="XplIName" /><init ldsrc="77"><list><e><bo><l><lit str="I" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><Decls><d name="wsInterfaceType" ldsrc="78"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="78"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="79"><fc><l><bo op="m"><l><n>wsInterfaceType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo op="m"><l><n>wsInterfaceName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><e ldsrc="81"><a><l><n>fieldsBlock</n></l><r><new><type typename="XplFunctionBody" /></new></r></a></e><Decls><d name="clase" ldsrc="83"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="83"><e><lit str="0" type="null" /></e></i></d></Decls><e ldsrc="84"><a><l><n>businessClassName</n></l><r><new><type typename="XplIName" /><init ldsrc="84"><list><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></list></init></new></r></a></e><e ldsrc="85"><a><l><n>varBusiness</n></l><r><new><type typename="XplIName" /><init ldsrc="85"><list><e><bo><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>Substring</n></r></bo></l><args><e><lit str="0" type="integer" /></e><e><lit str="1" type="integer" /></e></args></fc></l><r><n>ToLower</n></r></bo></l><args /></fc></l><r><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>Substring</n></r></bo></l><args><e><lit str="1" type="integer" /></e></args></fc></r></bo></e></list></init></new></r></a></e><e ldsrc="87"><a><l><n>entityType</n></l><r><new><type typename="XplType" /></new></r></a></e><e ldsrc="88"><fc><l><bo op="m"><l><n>entityType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><lit str="Entity" /></r></bo></e></args></fc></e><e ldsrc="89"><a><l><n>varEntity</n></l><r><new><type typename="XplIName" /><init ldsrc="89"><list><e><bo><l><bo><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>Substring</n></r></bo></l><args><e><lit str="0" type="integer" /></e><e><lit str="1" type="integer" /></e></args></fc></l><r><n>ToLower</n></r></bo></l><args /></fc></l><r><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>Substring</n></r></bo></l><args><e><lit str="1" type="integer" /></e></args></fc></r></bo></l><r><lit str="Entity" /></r></bo></e></list></init></new></r></a></e><Decls><d name="varEntityStr" ldsrc="90"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="90"><e><bo op="m"><l><n>varEntity</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><e ldsrc="92"><a><l><n>dataAccessType</n></l><r><new><type typename="XplType" /></new></r></a></e><e ldsrc="93"><fc><l><bo op="m"><l><n>dataAccessType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><lit str="DataAccess" /></r></bo></e></args></fc></e><e ldsrc="94"><a><l><n>varDataAccess</n></l><r><new><type typename="XplIName" /><init ldsrc="94"><list><e><bo><l><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>ToLower</n></r></bo></l><args /></fc></l><r><lit str="DataAccess" /></r></bo></e></list></init></new></r></a></e><Decls><d name="className" ldsrc="95"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="95"><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><e ldsrc="97"><a><l><n>getAllFunctionName</n></l><r><new><type typename="XplIName" /><init ldsrc="97"><list><e><bo><l><lit str="GetAll" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></r></a></e><e ldsrc="98"><a><l><n>getEntityFunctionName</n></l><r><new><type typename="XplIName" /><init ldsrc="98"><list><e><bo><l><lit str="Get" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></r></a></e><e ldsrc="99"><a><l><n>getWhereFunctionName</n></l><r><new><type typename="XplIName" /><init ldsrc="99"><list><e><bo><l><bo><l><lit str="Get" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str="Where" /></r></bo></e></list></init></new></r></a></e><e ldsrc="100"><a><l><n>getWhereEqualFunctionName</n></l><r><new><type typename="XplIName" /><init ldsrc="100"><list><e><bo><l><bo><l><lit str="Get" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str="WhereEqual" /></r></bo></e></list></init></new></r></a></e><documentation short="Tipos para lista&#xD;&#xA;" /><Decls><d name="listOfType" ldsrc="103"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="103"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="104"><fc><l><bo op="m"><l><n>listOfType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><lit str="CollectionOf" /></l><r><fc><l><bo op="m"><l><n>entityType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></r></bo></e></args></fc></e><Decls><d name="listOfTypesName" ldsrc="105"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="105"><e><new><type typename="XplIName" /><init ldsrc="105"><list><e><fc><l><bo op="m"><l><n>listOfType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><if ldsrc="107"><boolean><uo op="not"><u><n>isWindowsMobile</n></u></uo></boolean><ifbk ldsrc="107,111"><e ldsrc="110"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="109"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><lit str="System.ServiceModel.ServiceContract" /></e></args></fc></e></writecode></e></args></fc></e></ifbk></if><Decls><d name="methodAttExp" ldsrc="112"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="112"><e><lit str="0" type="null" /></e></i></d><d name="preserverReferenceExp" ldsrc="112"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="112"><e><lit str="0" type="null" /></e></i></d></Decls><e ldsrc="114"><a><l><n>preserverReferenceExp</n></l><r><new><type typename="XplExpression" /></new></r></a></e><e ldsrc="115"><fc><l><bo op="m"><l><n>preserverReferenceExp</n></l><r><n>set_Content</n></r></bo></l><args><e><fc><l><n>XplExpression::new_empty</n></l><args /></fc></e></args></fc></e><if ldsrc="117"><boolean><uo op="not"><u><n>isWindowsMobile</n></u></uo></boolean><ifbk ldsrc="118,125"><e ldsrc="119"><a><l><n>methodAttExp</n></l><r><writecode ldsrc="119"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><lit str="System.ServiceModel.OperationContract" /></e></args></fc></e></writecode></r></a></e><if ldsrc="121"><boolean><n>addPreserveReferenceAttribute</n></boolean><ifbk ldsrc="121,124"><e ldsrc="122"><fc><l><n>Console::WriteLine</n></l><args><e><lit str="Preserve Reference" /></e></args></fc></e><e ldsrc="123"><a><l><n>preserverReferenceExp</n></l><r><writecode ldsrc="123"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><lit str="UtnEmall.Server.Core.ReferencePreservingDataContractFormat" /></e></args></fc></e></writecode></r></a></e></ifbk></if></ifbk><else ldsrc="126"><e ldsrc="128"><a><l><n>methodAttExp</n></l><r><new><type typename="XplExpression" /></new></r></a></e><e ldsrc="129"><fc><l><bo op="m"><l><n>methodAttExp</n></l><r><n>set_Content</n></r></bo></l><args><e><fc><l><n>XplExpression::new_empty</n></l><args /></fc></e></args></fc></e></else></if><e ldsrc="132"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Interfaz: " /></l><r><bo op="m"><l><n>wsInterfaceName</n></l><r><n>Identifier</n></r></bo></r></bo></e></args></fc></e><e ldsrc="257"><a><l><n>clase</n></l><r><writecode ldsrc="134"><class name="$wsInterfaceName" access="public" isinterface="true" doc=" &lt;summary&gt;&#xD;&#xA;   La interfaz &lt;c&gt;$wsInterfaceName$&lt;/c&gt; es un contrato de servicio web para procesar $entityType$,&#xD;&#xA;	  guarda, actualiza, elimina y valida los datos del mismo.&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA;" ldsrc="139,256"><documentation short=" &lt;summary&gt;&#xD;&#xA; Función para guardar $entityType$ en la base de datos. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a guardar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null si el $entityType$ se guardo con exito, el mismo $entityType$ en otro caso&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="154"><n>$preserverReferenceExp</n></e><e ldsrc="155"><n>$methodAttExp</n></e><Function name="Save" access="public" ldsrc="156,156"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="156"><dt typename="$entityType" /><pi ref="true" /></type></P><P name="session" number="2"><type ispointer="true" ldsrc="156"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Función para eliminar un $entityType$ de la base de datos. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a eliminar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesión.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null si el $entityType$ fue eliminado con éxito, el mismo $entityType$ en otro caso&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="170"><n>$preserverReferenceExp</n></e><e ldsrc="171"><n>$methodAttExp</n></e><Function name="Delete" access="public" ldsrc="172,172"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="172"><dt typename="$entityType" /><pi ref="true" /></type></P><P name="session" number="2"><type ispointer="true" ldsrc="172"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene un $varEntity$ específico&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id del $entityType$ a cargar&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Un $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="185"><n>$preserverReferenceExp</n></e><e ldsrc="186"><n>$methodAttExp</n></e><Function name="$getEntityFunctionName" access="public" ldsrc="187,187"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="187" /></P><P name="loadRelation" number="2"><type typename="$BOOLEAN$" ldsrc="187" /></P><P name="session" number="3"><type ispointer="true" ldsrc="187"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true si desea guardar las relaciones&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="199"><n>$preserverReferenceExp</n></e><e ldsrc="200"><n>$methodAttExp</n></e><Function name="$getAllFunctionName" access="public" ldsrc="201,201"><Parameters><P name="loadRelation" number="1"><type typename="$BOOLEAN$" ldsrc="201" /></P><P name="session" number="2"><type ispointer="true" ldsrc="201"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="217"><n>$preserverReferenceExp</n></e><e ldsrc="218"><n>$methodAttExp</n></e><Function name="$getWhereFunctionName" access="public" ldsrc="219,219"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="219"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="219"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="219" /></P><P name="operatorType" number="4"><type typename="OperatorType" ldsrc="219" /></P><P name="session" number="5"><type ispointer="true" ldsrc="219"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron exactamente&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;Indica si se cargan las relaciones&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesión del usuario&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="237"><n>$preserverReferenceExp</n></e><e ldsrc="238"><n>$methodAttExp</n></e><Function name="$getWhereEqualFunctionName" access="public" ldsrc="239,239"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="239"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="239"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="239" /></P><P name="session" number="4"><type ispointer="true" ldsrc="239"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Función que valida un $entityType$ antes de ser guardado. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a validar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;true si se valido correctamente, false en caso contrario&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; si &lt;paramref name=&quot;$varEntity$&quot;/&gt; es null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="253"><n>$preserverReferenceExp</n></e><e ldsrc="254"><n>$methodAttExp</n></e><Function name="Validate" access="public" ldsrc="255,255"><Parameters><P name="$varBusiness" number="1"><type ispointer="true" ldsrc="255"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /></Function></class></writecode></r></a></e><documentation short="Si es un mobil genero los proxies&#xD;&#xA;" /><if ldsrc="261"><boolean><bo op="EQ"><l><n>webServiceEntityNamespace</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk><e ldsrc="261"><a><l><n>webServiceEntityNamespace</n></l><r><lit str="http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel" /></r></a></e></ifbk></if><if ldsrc="262"><boolean><bo op="AND"><l><n>isWindowsMobile</n></l><r><n>generateServiceAccessLayerForMobile</n></r></bo></boolean><ifbk ldsrc="262,277"><e ldsrc="269"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>clase</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtBegin</n></r></bo></l><args><e><writecode ldsrc="264"><e><fc><l><n>UtnEmall::Utils::SALGenerator::GenerateWSProxy</n></l><args><e><lit str="http://tempuri.org/" /></e><e><n>$webServiceEntityNamespace</n></e></args></fc></e></writecode></e></args></fc></e><e ldsrc="276"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>clase</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtBegin</n></r></bo></l><args><e><writecode ldsrc="271"><e><fc><l><n>UtnEmall::Utils::SCLGenerator::GenerateAccessFacades</n></l><args><e><lit str="http://tempuri.org/" /></e><e><n>$webServiceEntityNamespace</n></e></args></fc></e></writecode></e></args></fc></e></ifbk></if><documentation short=" Si hay definido un espacio de nombres para los proxies lo inserto alli, sino lo inserto en&#xD;&#xA; el espacion de nombres indicado&#xD;&#xA;" /><if ldsrc="281"><boolean><bo op="EQ"><l><n>proxiesNamespace</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk><e ldsrc="282"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>clase</n></e></args></fc></e></ifbk><else ldsrc="283"><e ldsrc="284"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>proxiesNamespace</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>clase</n></e></args></fc></e></else></if><documentation short=" Defino el bloque de save&#xD;&#xA;" /><Decls><d name="saveLogicBody" ldsrc="287"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="287"><e><writecode ldsrc="287"><bk><documentation short=" Guarda un $varEntity$ usando un objeto de data access&#xD;&#xA;" /><e ldsrc="289"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>Save</n></r></bo></l><args><e><n>$varEntity</n></e></args></fc></e><return ldsrc="290,290"><lit str="0" type="null" /></return></bk></writecode></e></i></d></Decls><if ldsrc="292"><boolean><fc><l><bo op="m"><l><n>customSaves</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></args></fc></boolean><ifbk><e ldsrc="293"><a><l><n>saveLogicBody</n></l><r><cast><e><b><l><n>customSaves</n></l><args><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></args></b></e><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type></cast></r></a></e></ifbk></if><documentation short=" Defino el bloque de delete&#xD;&#xA;" /><Decls><d name="deleteLogicBody" ldsrc="296"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="296"><e><writecode ldsrc="296"><bk><documentation short=" Elimina un $varEntity$ usando un objeto data access&#xD;&#xA;" /><e ldsrc="298"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>Delete</n></r></bo></l><args><e><n>$varEntity</n></e></args></fc></e><return ldsrc="299,299"><lit str="0" type="null" /></return></bk></writecode></e></i></d></Decls><if ldsrc="301"><boolean><fc><l><bo op="m"><l><n>customDeletes</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></args></fc></boolean><ifbk><e ldsrc="302"><a><l><n>deleteLogicBody</n></l><r><cast><e><b><l><n>customDeletes</n></l><args><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></args></b></e><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type></cast></r></a></e></ifbk></if><if ldsrc="304"><boolean><n>isWindowsMobile</n></boolean><ifbk ldsrc="305,585"><e ldsrc="582"><a><l><n>clase</n></l><r><writecode ldsrc="306"><class name="$businessClassName" access="public" doc=" &lt;summary&gt;&#xD;&#xA;   La clase &lt;c&gt;$businessClassName$&lt;/c&gt; implementa la lógica de negocio para guardar, editar, borrar y validar un $entityType$,&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA;" ldsrc="310,580"><e ldsrc="312"><fc><l><n>UtnEmall::Utils::List::NewCollection</n></l><args><e><n>$listOfTypesName</n></e><e><t ispointer="true"><dt typename="$entityType" /><pi ref="true" /></t></e></args></fc></e><Field name="$varDataAccess" ldsrc="314,314"><type ispointer="true"><dt typename="$dataAccessType" /><pi ref="true" /></type></Field><documentation short=" &lt;summary&gt;&#xD;&#xA;  &lt;c&gt;$businessClassName$&lt;/c&gt; constructor&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA;" /><Function name="$businessClassName" access="public" ldsrc="320,320"><ReturnType /><FunctionBody ldsrc="321,323"><e ldsrc="322"><a><l><n>$varDataAccess</n></l><r><new><type typename="$dataAccessType" /></new></r></a></e></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Función para guardar $entityType$ en la base de datos. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a guardar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null si el $entityType$ se guardo con exito, el mismo $entityType$ en otro caso&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Save" access="public" ldsrc="337,337"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="337"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="338,358"><if ldsrc="339"><boolean><bo op="EQ"><l><n>$varEntity</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="340,342"><throw ldsrc="341,341"><new><type typename="ArgumentException" /><init ldsrc="341"><list><e><lit str="The entity can't be null" /></e><e><n>$varEntityStr</n></e></list></init></new></throw></ifbk></if><documentation short=" Valida el $entityType$&#xD;&#xA;" /><if ldsrc="344"><boolean><uo op="not"><u><fc><l><n>Validate</n></l><args><e><n>$varEntity</n></e></args></fc></u></uo></boolean><ifbk ldsrc="345,347"><return ldsrc="346,346"><n>$varEntity</n></return></ifbk></if><try ldsrc="349"><trybk ldsrc="350,352"><e ldsrc="351"><n>$saveLogicBody</n></e></trybk><catchbk><init ldsrc="353"><d name="utnEmallDataAccessException" ldsrc="353"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="354,357"><documentation short=" Reenvía como una excepcion personalizada&#xD;&#xA;" /><throw ldsrc="356,356"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="356"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Función para eliminar un $entityType$ de la base de datos. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a eliminar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesión.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null si el $entityType$ fue eliminado con éxito, el mismo $entityType$ en otro caso&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Delete" access="public" ldsrc="372,372"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="372"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="373,386"><if ldsrc="374"><boolean><bo op="EQ"><l><n>$varEntity</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="375,377"><throw ldsrc="376,376"><new><type typename="ArgumentException" /><init ldsrc="376"><list><e><lit str="The argument can't be null" /></e><e><n>$varEntityStr</n></e></list></init></new></throw></ifbk></if><try ldsrc="378"><trybk ldsrc="379,381"><e ldsrc="380"><n>$deleteLogicBody</n></e></trybk><catchbk><init ldsrc="382"><d name="utnEmallDataAccessException" ldsrc="382"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="383,385"><throw ldsrc="384,384"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="384"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene un $varEntity$ específico&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id del $entityType$ a cargar&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Un $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getEntityFunctionName" access="public" ldsrc="400,400"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="400" /></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="401,403"><return ldsrc="402,402"><fc><l><n>$getEntityFunctionName</n></l><args><e><n>id</n></e><e><lit str="true" type="bool" /></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene un $varEntity$ específico&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id del $entityType$ a cargar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true para cargar las relaciones&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Un $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getEntityFunctionName" access="public" ldsrc="417,417"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="417" /></P><P name="loadRelation" number="2"><type typename="$BOOLEAN$" ldsrc="417" /></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="418,427"><try ldsrc="419"><trybk ldsrc="420,422"><return ldsrc="421,421"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>Load</n></r></bo></l><args><e><n>id</n></e><e><n>loadRelation</n></e></args></fc></return></trybk><catchbk><init ldsrc="423"><d name="utnEmallDataAccessException" ldsrc="423"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="424,426"><throw ldsrc="425,425"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="425"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;returns&gt;Collection de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getAllFunctionName" access="public" ldsrc="436,436"><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="437,439"><return ldsrc="438,438"><fc><l><n>$getAllFunctionName</n></l><args><e><lit str="true" type="bool" /></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una colección de $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true si desea guardar las relaciones&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getAllFunctionName" access="public" ldsrc="450,450"><Parameters><P name="loadRelation" number="1"><type typename="$BOOLEAN$" ldsrc="450" /></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="451,460"><try ldsrc="452"><trybk ldsrc="453,455"><return ldsrc="454,454"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadAll</n></r></bo></l><args><e><n>loadRelation</n></e></args></fc></return></trybk><catchbk><init ldsrc="456"><d name="utnEmallDataAccessException" ldsrc="456"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="457,459"><throw ldsrc="458,458"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="458"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereFunctionName" access="public" ldsrc="476,476"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="476"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="476"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="operatorType" number="3"><type typename="OperatorType" ldsrc="476" /></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="477,479"><return ldsrc="478,478"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><lit str="true" type="bool" /></e><e><n>operatorType</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;OperatorType&quot;&gt;Tipo de operador de comparación&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereFunctionName" access="public" ldsrc="496,496"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="496"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="496"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="496" /></P><P name="operatorType" number="4"><type typename="OperatorType" ldsrc="496" /></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="497,506"><try ldsrc="498"><trybk ldsrc="499,501"><return ldsrc="500,500"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadWhere</n></r></bo></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><n>loadRelation</n></e><e><n>operatorType</n></e></args></fc></return></trybk><catchbk><init ldsrc="502"><d name="utnEmallDataAccessException" ldsrc="502"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="503,505"><throw ldsrc="504,504"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="504"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron exactamente&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereEqualFunctionName" access="public" ldsrc="522,522"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="522"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="522"><dt typename="$OBJECT$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="523,525"><return ldsrc="524,524"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><lit str="true" type="bool" /></e><e><n>OperatorType::Equal</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron exactamente&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;Indica si se cargan las relaciones&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereEqualFunctionName" access="public" ldsrc="542,542"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="542"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="542"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="542" /></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="543,552"><try ldsrc="544"><trybk ldsrc="545,547"><return ldsrc="546,546"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><n>loadRelation</n></e><e><n>OperatorType::Equal</n></e></args></fc></return></trybk><catchbk><init ldsrc="548"><d name="utnEmallDataAccessException" ldsrc="548"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="549,551"><throw ldsrc="550,550"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="550"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Función que valida un $entityType$ antes de ser guardado. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a validar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;true si se valido correctamente, false en caso contrario&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; si &lt;paramref name=&quot;$varEntity$&quot;/&gt; es null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Validate" access="public" ldsrc="566,566"><Parameters><P name="$varBusiness" number="1"><type ispointer="true" ldsrc="566"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /><FunctionBody ldsrc="567,579"><Decls><d name="result" ldsrc="568"><type typename="$BOOLEAN$" /><i ldsrc="568"><e><lit str="true" type="bool" /></e></i></d></Decls><if ldsrc="570"><boolean><bo op="EQ"><l><n>$varBusiness</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="571,573"><throw ldsrc="572,572"><new><type typename="ArgumentException" /><init ldsrc="572"><list><e><lit str="The argument can't be null" /></e></list></init></new></throw></ifbk></if><documentation short=" Check entity data							&#xD;&#xA;" /><e ldsrc="576"><n>$modelData</n></e><return ldsrc="578,578"><n>result</n></return></FunctionBody></Function></class></writecode></r></a></e><documentation short="ESTO ES POR UN ERROR EN EL WRITECODE DE ZOE&#xD;&#xA;((XplImplement^)clase.FindNode(&quot;/@XplImplement&quot;)).set_name(wsInterfaceName.Identifier);&#xD;&#xA;" /></ifbk><else ldsrc="586"><e ldsrc="891"><a><l><n>clase</n></l><r><writecode ldsrc="588"><class name="$businessClassName" access="public" doc=" &lt;summary&gt;&#xD;&#xA;   La clase &lt;c&gt;$businessClassName$&lt;/c&gt; implementa la lógica de negocio para guardar, editar, borrar y validar un $entityType$,&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA;" ldsrc="592,889"><Implements><i name="$wsInterfaceType" access="public" ldsrc="592" /></Implements><e ldsrc="594"><fc><l><n>UtnEmall::Utils::List::NewCollection</n></l><args><e><n>$listOfTypesName</n></e><e><t ispointer="true"><dt typename="$entityType" /><pi ref="true" /></t></e></args></fc></e><e ldsrc="595"><fc><l><n>UtnEmall::Utils::FaultException::New</n></l><args><e><n>FaultExceptionExceptionDetail</n></e><e><t ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></t></e></args></fc></e><Field name="$varDataAccess" ldsrc="597,597"><type ispointer="true"><dt typename="$dataAccessType" /><pi ref="true" /></type></Field><Function name="$businessClassName" access="public" ldsrc="600,600"><ReturnType /><FunctionBody ldsrc="601,603"><e ldsrc="602"><a><l><n>$varDataAccess</n></l><r><new><type typename="$dataAccessType" /></new></r></a></e></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Función para guardar $entityType$ en la base de datos. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a guardar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null si el $entityType$ se guardo con exito, el mismo $entityType$ en otro caso&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Save" access="public" ldsrc="617,617"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="617"><dt typename="$entityType" /><pi ref="true" /></type></P><P name="session" number="2"><type ispointer="true" ldsrc="617"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="618,639"><Decls><d name="permited" ldsrc="619"><type typename="$BOOLEAN$" /><i ldsrc="619"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="save" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="620"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="621,624"><Decls><d name="detail" ldsrc="622"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="622"><e><new><type typename="ExceptionDetail" /><init ldsrc="622"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="622"><list><e><lit str="The user hasn't permissions to save an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="623,623"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="623"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><if ldsrc="626"><boolean><uo op="not"><u><fc><l><n>Validate</n></l><args><e><n>$varEntity</n></e></args></fc></u></uo></boolean><ifbk ldsrc="627,629"><return ldsrc="628,628"><n>$varEntity</n></return></ifbk></if><try ldsrc="631"><trybk ldsrc="632,634"><e ldsrc="633"><n>$saveLogicBody</n></e></trybk><catchbk><init ldsrc="635"><d name="utnEmallDataAccessException" ldsrc="635"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="636,638"><throw ldsrc="637,637"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="637"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Función para eliminar un $entityType$ de la base de datos. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a eliminar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesión.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null si el $entityType$ fue eliminado con éxito, el mismo $entityType$ en otro caso&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Delete" access="public" ldsrc="653,653"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="653"><dt typename="$entityType" /><pi ref="true" /></type></P><P name="session" number="2"><type ispointer="true" ldsrc="653"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="654,674"><Decls><d name="permited" ldsrc="655"><type typename="$BOOLEAN$" /><i ldsrc="655"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="delete" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="656"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="657,660"><Decls><d name="detail" ldsrc="658"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="658"><e><new><type typename="ExceptionDetail" /><init ldsrc="658"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="658"><list><e><lit str="The user hasn't permissions to delete an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="659,659"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="659"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><if ldsrc="662"><boolean><bo op="EQ"><l><n>$varEntity</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="663,665"><throw ldsrc="664,664"><new><type typename="ArgumentException" /><init ldsrc="664"><list><e><lit str="The argument can not be null or be empty" /></e></list></init></new></throw></ifbk></if><try ldsrc="666"><trybk ldsrc="667,669"><e ldsrc="668"><n>$deleteLogicBody</n></e></trybk><catchbk><init ldsrc="670"><d name="utnEmallDataAccessException" ldsrc="670"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="671,673"><throw ldsrc="672,672"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="672"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene un $varEntity$ específico&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id del $entityType$ a cargar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesión.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Un $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getEntityFunctionName" access="public" ldsrc="688,688"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="688" /></P><P name="session" number="2"><type ispointer="true" ldsrc="688"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="689,691"><return ldsrc="690,690"><fc><l><n>$getEntityFunctionName</n></l><args><e><n>id</n></e><e><lit str="true" type="bool" /></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene un $varEntity$ específico&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id del $entityType$ a cargar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true para cargar las relaciones&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesión.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Un $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getEntityFunctionName" access="public" ldsrc="706,706"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="706" /></P><P name="loadRelation" number="2"><type typename="$BOOLEAN$" ldsrc="706" /></P><P name="session" number="3"><type ispointer="true" ldsrc="706"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="707,722"><Decls><d name="permited" ldsrc="708"><type typename="$BOOLEAN$" /><i ldsrc="708"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="read" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="709"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="710,713"><Decls><d name="detail" ldsrc="711"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="711"><e><new><type typename="ExceptionDetail" /><init ldsrc="711"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="711"><list><e><lit str="The user hasn't permissions to read an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="712,712"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="712"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><try ldsrc="714"><trybk ldsrc="715,717"><return ldsrc="716,716"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>Load</n></r></bo></l><args><e><n>id</n></e><e><n>loadRelation</n></e></args></fc></return></trybk><catchbk><init ldsrc="718"><d name="utnEmallDataAccessException" ldsrc="718"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="719,721"><throw ldsrc="720,720"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="720"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una colección de $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getAllFunctionName" access="public" ldsrc="733,733"><Parameters><P name="session" number="1"><type ispointer="true" ldsrc="733"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="734,736"><return ldsrc="735,735"><fc><l><n>$getAllFunctionName</n></l><args><e><lit str="true" type="bool" /></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una colección de $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true si desea guardar las relaciones&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una excepción UtnEmallDataAccessException ocurre en el data model.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getAllFunctionName" access="public" ldsrc="748,748"><Parameters><P name="loadRelation" number="1"><type typename="$BOOLEAN$" ldsrc="748" /></P><P name="session" number="2"><type ispointer="true" ldsrc="748"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="749,764"><Decls><d name="permited" ldsrc="750"><type typename="$BOOLEAN$" /><i ldsrc="750"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="read" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="751"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="752,755"><Decls><d name="detail" ldsrc="753"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="753"><e><new><type typename="ExceptionDetail" /><init ldsrc="753"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="753"><list><e><lit str="The user hasn't permissions to read an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="754,754"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="754"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><try ldsrc="756"><trybk ldsrc="757,759"><return ldsrc="758,758"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadAll</n></r></bo></l><args><e><n>loadRelation</n></e></args></fc></return></trybk><catchbk><init ldsrc="760"><d name="utnEmallDataAccessException" ldsrc="760"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="761,763"><throw ldsrc="762,762"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="762"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;OperatorType&quot;&gt;Tipo de operador de comparación a utilizar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereFunctionName" access="public" ldsrc="783,783"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="783"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="783"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="operatorType" number="3"><type typename="OperatorType" ldsrc="783" /></P><P name="session" number="4"><type ispointer="true" ldsrc="783"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="784,786"><return ldsrc="785,785"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><lit str="true" type="bool" /></e><e><n>operatorType</n></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;Indica si se cargan las relaciones&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;OperatorType&quot;&gt;Tipo de operador de comparación a utilizar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereFunctionName" access="public" ldsrc="805,805"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="805"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="805"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="805" /></P><P name="operatorType" number="4"><type typename="OperatorType" ldsrc="805" /></P><P name="session" number="5"><type ispointer="true" ldsrc="805"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="806,822"><Decls><d name="permited" ldsrc="808"><type typename="$BOOLEAN$" /><i ldsrc="808"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="read" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="809"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="810,813"><Decls><d name="detail" ldsrc="811"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="811"><e><new><type typename="ExceptionDetail" /><init ldsrc="811"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="811"><list><e><lit str="The user hasn't permissions to read an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="812,812"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="812"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><try ldsrc="814"><trybk ldsrc="815,817"><return ldsrc="816,816"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadWhere</n></r></bo></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><n>loadRelation</n></e><e><n>operatorType</n></e></args></fc></return></trybk><catchbk><init ldsrc="818"><d name="utnEmallDataAccessException" ldsrc="818"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="819,821"><throw ldsrc="820,820"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="820"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron exactamente&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereEqualFunctionName" access="public" ldsrc="839,839"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="839"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="839"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="session" number="3"><type ispointer="true" ldsrc="839"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="840,842"><return ldsrc="841,841"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><lit str="true" type="bool" /></e><e><n>OperatorType::Equal</n></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Obtiene una coleccion de todos los $varEntity$ que cumplen con cierto patron exactamente&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;propiedad del $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;patrón de busqueda&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;Indica si se cargan las relaciones&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesión del usuario&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Colección de $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;propertyName&quot;/&gt; es null o vacio.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; Si &lt;paramref name=&quot;expValue&quot;/&gt; es null or vacío.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereEqualFunctionName" access="public" ldsrc="860,860"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="860"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="860"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="860" /></P><P name="session" number="4"><type ispointer="true" ldsrc="860"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="861,862"><return ldsrc="862,862"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><n>loadRelation</n></e><e><n>OperatorType::Equal</n></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Función que valida un $entityType$ antes de ser guardado. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ a validar&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;Identificador de sesion del usuario.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;true si se valido correctamente, false en caso contrario&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; si &lt;paramref name=&quot;$varEntity$&quot;/&gt; es null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; Si una UtnEmallDataAccessException ocurre en el DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Validate" access="public" ldsrc="876,876"><Parameters><P name="$varBusiness" number="1"><type ispointer="true" ldsrc="876"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /><FunctionBody ldsrc="877,887"><Decls><d name="result" ldsrc="878"><type typename="$BOOLEAN$" /><i ldsrc="878"><e><lit str="true" type="bool" /></e></i></d></Decls><if ldsrc="880"><boolean><bo op="EQ"><l><n>$varBusiness</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="881,883"><throw ldsrc="882,882"><new><type typename="ArgumentException" /><init ldsrc="882"><list><e><lit str="The argument can not be null or be empty" /></e></list></init></new></throw></ifbk></if><documentation short=" Chequea los datos de la entidad&#xD;&#xA;" /><e ldsrc="885"><n>$modelData</n></e><return ldsrc="886,886"><n>result</n></return></FunctionBody></Function></class></writecode></r></a></e><documentation short="ESTO ES POR UN ERROR EN EL WRITECODE DE ZOE&#xD;&#xA;" /><e ldsrc="894"><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>clase</n></l><r><n>FindNode</n></r></bo></l><args><e><lit str="/@XplImplement" /></e></args></fc></e><type ispointer="true"><dt typename="XplImplement" /><pi ref="true" /></type></cast></l><r><n>set_name</n></r></bo></l><args><e><bo op="m"><l><n>wsInterfaceName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e></else></if><return ldsrc="897,897"><n>clase</n></return></FunctionBody></Function><Function name="CustomSave" internalname="CustomSave#26" access="public" storage="static" ldsrc="900,900"><Parameters><P name="businessClassName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="900" /></P><P name="customBlock" number="2"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="900" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="900,910"><if ldsrc="901"><boolean><uo op="not"><u><fc><l><bo op="m"><l><n>customSaves</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></e></args></fc></u></uo></boolean><ifbk ldsrc="901,903"><e ldsrc="902"><fc><l><bo op="m"><l><n>customSaves</n></l><r><n>Add</n></r></bo></l><args><e><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></e><e><n>customBlock</n></e></args></fc></e></ifbk><else ldsrc="904"><Decls><d name="newError" ldsrc="905"><type ispointer="true"><dt typename="Error" /><pi ref="true" /></type><i ldsrc="905"><e><new><type typename="Error" /><init ldsrc="905"><list><e><bo><l><bo><l><lit str="Bloque custom save " /></l><r><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str=" ya agregado" /></r></bo></e></list></init></new></e></i></d></Decls><e ldsrc="906"><fc><l><bo op="m"><l><n>newError</n></l><r><n>set_PersistentError</n></r></bo></l><args><e><lit str="true" type="bool" /></e></args></fc></e><e ldsrc="907"><fc><l><bo op="m"><l><bo op="m"><l><n>compiler</n></l><r><n>Errors</n></r></bo></l><r><n>AddError</n></r></bo></l><args><e><n>newError</n></e></args></fc></e></else></if><return ldsrc="909,909"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="CustomDelete" internalname="CustomDelete#27" access="public" storage="static" ldsrc="911,911"><Parameters><P name="businessClassName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="911" /></P><P name="customBlock" number="2"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="911" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="911,921"><if ldsrc="912"><boolean><uo op="not"><u><fc><l><bo op="m"><l><n>customDeletes</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></e></args></fc></u></uo></boolean><ifbk ldsrc="912,914"><e ldsrc="913"><fc><l><bo op="m"><l><n>customDeletes</n></l><r><n>Add</n></r></bo></l><args><e><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></e><e><n>customBlock</n></e></args></fc></e></ifbk><else ldsrc="915"><Decls><d name="newError" ldsrc="916"><type ispointer="true"><dt typename="Error" /><pi ref="true" /></type><i ldsrc="916"><e><new><type typename="Error" /><init ldsrc="916"><list><e><bo><l><bo><l><lit str="Bloque custom delete " /></l><r><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str=" ya agregado" /></r></bo></e></list></init></new></e></i></d></Decls><e ldsrc="917"><fc><l><bo op="m"><l><n>newError</n></l><r><n>set_PersistentError</n></r></bo></l><args><e><lit str="true" type="bool" /></e></args></fc></e><e ldsrc="918"><fc><l><bo op="m"><l><bo op="m"><l><n>compiler</n></l><r><n>Errors</n></r></bo></l><r><n>AddError</n></r></bo></l><args><e><n>newError</n></e></args></fc></e></else></if><return ldsrc="920,920"><lit str="0" type="null" /></return></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class></Namespace></DocumentBody></XPLDocument>