<XPLDocument><DocumentBody ldsrc="1,1,.\\MainTemplate\\BusinessModelTemplates.dpp"><Import ldsrc="1"><ns>System</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Import ldsrc="2"><ns>LayerD.CodeDOM</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_layerd_xpl_codedom_net</ns></Import><Import ldsrc="3"><ns>LayerD.ZOECompiler</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_zoec_core</ns></Import><Using ldsrc="4"><ns>Zoe</ns></Using><Using ldsrc="5"><ns>DotNET::LayerD::ZOECompiler</ns></Using><Using ldsrc="6"><ns>DotNET::LayerD::CodeDOM</ns></Using><Using ldsrc="7"><ns>DotNET::System::Collections</ns></Using><Using ldsrc="8"><ns>DotNET::System::Collections::ObjectModel</ns></Using><Using ldsrc="9"><ns>DotNET::System</ns></Using><documentation short="Utils::DefaultNetImports();&#xD;&#xA;" /><Namespace name="UtnEmall::Utils" ldsrc="13,923"><documentation short=" Clase factory para el modelo de negocio(classEntity) y de datos(DataAccessEntity).&#xD;&#xA;" /><Class name="ModelBusiness" access="public" isfactory="true" ldsrc="16,922"><Field name="fieldsBlock" storage="static" ldsrc="18,18"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplFunctionBody"><dt typename="XplFunctionBody" /><pi ref="true" /></type></Field><Field name="businessClassName" storage="static" ldsrc="20,20"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="20"><e><lit str="0" type="null" /></e></i></Field><Field name="varBusiness" storage="static" ldsrc="21,21"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="21"><e><lit str="0" type="null" /></e></i></Field><Field name="entityType" storage="static" ldsrc="23,23"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplType"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="23"><e><lit str="0" type="null" /></e></i></Field><Field name="varEntity" storage="static" ldsrc="24,24"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="24"><e><lit str="0" type="null" /></e></i></Field><Field name="dataAccessType" storage="static" ldsrc="26,26"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplType"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="26"><e><lit str="0" type="null" /></e></i></Field><Field name="varDataAccess" storage="static" ldsrc="27,27"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="27"><e><lit str="0" type="null" /></e></i></Field><Field name="getAllFunctionName" storage="static" ldsrc="29,29"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="29"><e><lit str="0" type="null" /></e></i></Field><Field name="getWhereFunctionName" storage="static" ldsrc="30,30"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="30"><e><lit str="0" type="null" /></e></i></Field><Field name="getWhereEqualFunctionName" storage="static" ldsrc="31,31"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="31"><e><lit str="0" type="null" /></e></i></Field><Field name="getEntityFunctionName" storage="static" ldsrc="32,32"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="32"><e><lit str="0" type="null" /></e></i></Field><documentation short="ArrayList que almacena los campos de las entityclass.&#xD;&#xA;" /><Field name="listaCampos" storage="static" ldsrc="35,35"><type ispointer="true" typeStr="^_DotNET.System.Collections.ArrayList"><dt typename="ArrayList" /><pi ref="true" /></type><i ldsrc="35"><e><new><type typename="ArrayList" /></new></e></i></Field><documentation short=" ArrayList que almacena los tipos de los campos de las entityclass.		&#xD;&#xA;" /><Field name="listaTipos" storage="static" ldsrc="37,37"><type ispointer="true" typeStr="^_DotNET.System.Collections.ArrayList"><dt typename="ArrayList" /><pi ref="true" /></type><i ldsrc="37"><e><new><type typename="ArrayList" /></new></e></i></Field><documentation short=" Tabla con los bloques custom save&#xD;&#xA;" /><Field name="customSaves" storage="static" ldsrc="39,39"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type><i ldsrc="39"><e><new><type typename="Hashtable" /></new></e></i></Field><documentation short=" Tabla con los bloques custom delete&#xD;&#xA;" /><Field name="customDeletes" storage="static" ldsrc="41,41"><type ispointer="true" typeStr="^_DotNET.System.Collections.Hashtable"><dt typename="Hashtable" /><pi ref="true" /></type><i ldsrc="41"><e><new><type typename="Hashtable" /></new></e></i></Field><Field name="isWindowsMobile" storage="static"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" /></Field><Field name="generateServiceAccessLayerForMobile" storage="static" ldsrc="43,43"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" /></Field><Field name="webServiceEntityNamespace" storage="static" ldsrc="44,44"><type ispointer="true" typeStr="^_$STRING$"><dt typename="$STRING$" /><pi ref="true" /></type></Field><Field name="proxiesNamespace" storage="static" ldsrc="45,45"><type ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNamespace"><dt typename="XplNamespace" /><pi ref="true" /></type><i ldsrc="45"><e><lit str="0" type="null" /></e></i></Field><Function name="SetProxiesNamespace" internalname="SetProxiesNamespace#20" access="public" storage="static" ldsrc="47,47"><Parameters><P name="newProxiesNamespace" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="47" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="47,54"><e ldsrc="51"><a><l><n>proxiesNamespace</n></l><r><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><writecode ldsrc="48"><progunit><Namespace name="$newProxiesNamespace" ldsrc="49,50" /></progunit></writecode></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplNamespace" /><pi ref="true" /></type></cast></r></a></e><e ldsrc="52"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentDocumentBody</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>proxiesNamespace</n></e></args></fc></e><return ldsrc="53,53"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="SetMobileWebServiceEntityNamespace" internalname="SetMobileWebServiceEntityNamespace#21" access="public" storage="static" ldsrc="55,55"><Parameters><P name="namespaceStr" number="1"><type ispointer="true" typeStr="^_$STRING$" ldsrc="55"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="55,58"><e ldsrc="56"><a><l><n>webServiceEntityNamespace</n></l><r><n>namespaceStr</n></r></a></e><return ldsrc="57,57"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="IsWindowsMobile" internalname="IsWindowsMobile#22" access="public" storage="static" ldsrc="59,59"><Parameters><P name="isMobile" number="1"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="59" /></P><P name="generateServiceAccessLayer" number="2"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="59" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="60,64"><e ldsrc="61"><a><l><n>generateServiceAccessLayerForMobile</n></l><r><n>generateServiceAccessLayer</n></r></a></e><e ldsrc="62"><a><l><n>isWindowsMobile</n></l><r><n>isMobile</n></r></a></e><return ldsrc="63,63"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="IsWindowsMobile" internalname="IsWindowsMobile#23" access="public" storage="static" ldsrc="65,65"><Parameters><P name="isMobile" number="1"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="65" /></P></Parameters><ReturnType typename="$VOID$" ftype="expression" typeStr="$VOID$" /><FunctionBody ldsrc="66,70"><e ldsrc="67"><a><l><n>isWindowsMobile</n></l><r><n>isMobile</n></r></a></e><e ldsrc="68"><a><l><n>generateServiceAccessLayerForMobile</n></l><r><lit str="true" type="bool" /></r></a></e><return ldsrc="69,69"><lit str="0" type="null" /></return></FunctionBody></Function><documentation short=" Define las clases Entity y DataAccess para cada clase del modelo.&#xD;&#xA;" /><Function name="Define" internalname="Define#24" access="public" storage="static" ldsrc="72,72"><Parameters><P name="modelName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="72" /></P><P name="modelData" number="2"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="72" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="72,74"><return ldsrc="73,73"><fc><l><n>Define</n></l><args><e><n>modelName</n></e><e><lit str="false" type="bool" /></e><e><n>modelData</n></e></args></fc></return></FunctionBody></Function><Function name="Define" internalname="Define#25" access="public" storage="static" ldsrc="75,75"><Parameters><P name="modelName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="75" /></P><P name="addPreserveReferenceAttribute" number="2"><type typename="$BOOLEAN$" typeStr="$BOOLEAN$" ldsrc="75" /></P><P name="modelData" number="3"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="75" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="76,898"><Decls><d name="wsInterfaceName" ldsrc="77"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="77"><e><new><type typename="XplIName" /><init ldsrc="77"><list><e><bo><l><lit str="I" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><Decls><d name="wsInterfaceType" ldsrc="78"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="78"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="79"><fc><l><bo op="m"><l><n>wsInterfaceType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo op="m"><l><n>wsInterfaceName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e><e ldsrc="81"><a><l><n>fieldsBlock</n></l><r><new><type typename="XplFunctionBody" /></new></r></a></e><Decls><d name="clase" ldsrc="83"><type ispointer="true"><dt typename="XplClass" /><pi ref="true" /></type><i ldsrc="83"><e><lit str="0" type="null" /></e></i></d></Decls><e ldsrc="84"><a><l><n>businessClassName</n></l><r><new><type typename="XplIName" /><init ldsrc="84"><list><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></list></init></new></r></a></e><e ldsrc="85"><a><l><n>varBusiness</n></l><r><new><type typename="XplIName" /><init ldsrc="85"><list><e><bo><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>Substring</n></r></bo></l><args><e><lit str="0" type="integer" /></e><e><lit str="1" type="integer" /></e></args></fc></l><r><n>ToLower</n></r></bo></l><args /></fc></l><r><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>Substring</n></r></bo></l><args><e><lit str="1" type="integer" /></e></args></fc></r></bo></e></list></init></new></r></a></e><e ldsrc="87"><a><l><n>entityType</n></l><r><new><type typename="XplType" /></new></r></a></e><e ldsrc="88"><fc><l><bo op="m"><l><n>entityType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><lit str="Entity" /></r></bo></e></args></fc></e><e ldsrc="89"><a><l><n>varEntity</n></l><r><new><type typename="XplIName" /><init ldsrc="89"><list><e><bo><l><bo><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>Substring</n></r></bo></l><args><e><lit str="0" type="integer" /></e><e><lit str="1" type="integer" /></e></args></fc></l><r><n>ToLower</n></r></bo></l><args /></fc></l><r><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>Substring</n></r></bo></l><args><e><lit str="1" type="integer" /></e></args></fc></r></bo></l><r><lit str="Entity" /></r></bo></e></list></init></new></r></a></e><Decls><d name="varEntityStr" ldsrc="90"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="90"><e><bo op="m"><l><n>varEntity</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><e ldsrc="92"><a><l><n>dataAccessType</n></l><r><new><type typename="XplType" /></new></r></a></e><e ldsrc="93"><fc><l><bo op="m"><l><n>dataAccessType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><lit str="DataAccess" /></r></bo></e></args></fc></e><e ldsrc="94"><a><l><n>varDataAccess</n></l><r><new><type typename="XplIName" /><init ldsrc="94"><list><e><bo><l><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>ToLower</n></r></bo></l><args /></fc></l><r><lit str="DataAccess" /></r></bo></e></list></init></new></r></a></e><Decls><d name="className" ldsrc="95"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="95"><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><e ldsrc="97"><a><l><n>getAllFunctionName</n></l><r><new><type typename="XplIName" /><init ldsrc="97"><list><e><bo><l><lit str="GetAll" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></r></a></e><e ldsrc="98"><a><l><n>getEntityFunctionName</n></l><r><new><type typename="XplIName" /><init ldsrc="98"><list><e><bo><l><lit str="Get" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></r></a></e><e ldsrc="99"><a><l><n>getWhereFunctionName</n></l><r><new><type typename="XplIName" /><init ldsrc="99"><list><e><bo><l><bo><l><lit str="Get" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str="Where" /></r></bo></e></list></init></new></r></a></e><e ldsrc="100"><a><l><n>getWhereEqualFunctionName</n></l><r><new><type typename="XplIName" /><init ldsrc="100"><list><e><bo><l><bo><l><lit str="Get" /></l><r><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str="WhereEqual" /></r></bo></e></list></init></new></r></a></e><documentation short="Tipos para lista&#xD;&#xA;" /><Decls><d name="listOfType" ldsrc="103"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="103"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="104"><fc><l><bo op="m"><l><n>listOfType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><lit str="CollectionOf" /></l><r><fc><l><bo op="m"><l><n>entityType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></r></bo></e></args></fc></e><Decls><d name="listOfTypesName" ldsrc="105"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="105"><e><new><type typename="XplIName" /><init ldsrc="105"><list><e><fc><l><bo op="m"><l><n>listOfType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><if ldsrc="107"><boolean><uo op="not"><u><n>isWindowsMobile</n></u></uo></boolean><ifbk ldsrc="107,111"><e ldsrc="110"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><writecode ldsrc="109"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><lit str="System.ServiceModel.ServiceContract" /></e></args></fc></e></writecode></e></args></fc></e></ifbk></if><Decls><d name="methodAttExp" ldsrc="112"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="112"><e><lit str="0" type="null" /></e></i></d><d name="preserverReferenceExp" ldsrc="112"><type ispointer="true"><dt typename="XplExpression" /><pi ref="true" /></type><i ldsrc="112"><e><lit str="0" type="null" /></e></i></d></Decls><e ldsrc="114"><a><l><n>preserverReferenceExp</n></l><r><new><type typename="XplExpression" /></new></r></a></e><e ldsrc="115"><fc><l><bo op="m"><l><n>preserverReferenceExp</n></l><r><n>set_Content</n></r></bo></l><args><e><fc><l><n>XplExpression::new_empty</n></l><args /></fc></e></args></fc></e><if ldsrc="117"><boolean><uo op="not"><u><n>isWindowsMobile</n></u></uo></boolean><ifbk ldsrc="118,125"><e ldsrc="119"><a><l><n>methodAttExp</n></l><r><writecode ldsrc="119"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><lit str="System.ServiceModel.OperationContract" /></e></args></fc></e></writecode></r></a></e><if ldsrc="121"><boolean><n>addPreserveReferenceAttribute</n></boolean><ifbk ldsrc="121,124"><e ldsrc="122"><fc><l><n>Console::WriteLine</n></l><args><e><lit str="Preserve Reference" /></e></args></fc></e><e ldsrc="123"><a><l><n>preserverReferenceExp</n></l><r><writecode ldsrc="123"><e><fc><l><n>Zoe::Attribute::Add</n></l><args><e><lit str="UtnEmall.Server.Core.ReferencePreservingDataContractFormat" /></e></args></fc></e></writecode></r></a></e></ifbk></if></ifbk><else ldsrc="126"><e ldsrc="128"><a><l><n>methodAttExp</n></l><r><new><type typename="XplExpression" /></new></r></a></e><e ldsrc="129"><fc><l><bo op="m"><l><n>methodAttExp</n></l><r><n>set_Content</n></r></bo></l><args><e><fc><l><n>XplExpression::new_empty</n></l><args /></fc></e></args></fc></e></else></if><e ldsrc="132"><fc><l><n>Console::WriteLine</n></l><args><e><bo><l><lit str="Interfaz: " /></l><r><bo op="m"><l><n>wsInterfaceName</n></l><r><n>Identifier</n></r></bo></r></bo></e></args></fc></e><e ldsrc="261"><a><l><n>clase</n></l><r><writecode ldsrc="134"><class name="$wsInterfaceName" access="public" isinterface="true" doc=" &lt;summary&gt;&#xD;&#xA;   The &lt;c&gt;$wsInterfaceName$&lt;/c&gt; business contract to process $entityType$,&#xD;&#xA;	  saving, updating, deleting and validating entity data.&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA;" ldsrc="139,260"><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to save a $entityType$ to the database. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ to save&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null if the $entityType$ was saved successfully, the same $entityType$ otherwise&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="154"><n>$preserverReferenceExp</n></e><e ldsrc="155"><n>$methodAttExp</n></e><Function name="Save" access="public" ldsrc="156,156"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="156"><dt typename="$entityType" /><pi ref="true" /></type></P><P name="session" number="2"><type ispointer="true" ldsrc="156"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to delete a $entityType$ from database. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ to delete&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null if the $entityType$ was deleted successfully, the same $entityType$ otherwise&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="170"><n>$preserverReferenceExp</n></e><e ldsrc="171"><n>$methodAttExp</n></e><Function name="Delete" access="public" ldsrc="172,172"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="172"><dt typename="$entityType" /><pi ref="true" /></type></P><P name="session" number="2"><type ispointer="true" ldsrc="172"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get an specific $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id of the $entityType$ to load&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;A $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="187"><n>$preserverReferenceExp</n></e><e ldsrc="188"><n>$methodAttExp</n></e><Function name="$getEntityFunctionName" access="public" ldsrc="189,189"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="189" /></P><P name="loadRelation" number="2"><type typename="$BOOLEAN$" ldsrc="189" /></P><P name="session" number="3"><type ispointer="true" ldsrc="189"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of all $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="201"><n>$preserverReferenceExp</n></e><e ldsrc="202"><n>$methodAttExp</n></e><Function name="$getAllFunctionName" access="public" ldsrc="203,203"><Parameters><P name="loadRelation" number="1"><type typename="$BOOLEAN$" ldsrc="203" /></P><P name="session" number="2"><type ispointer="true" ldsrc="203"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="221"><n>$preserverReferenceExp</n></e><e ldsrc="222"><n>$methodAttExp</n></e><Function name="$getWhereFunctionName" access="public" ldsrc="223,223"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="223"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="223"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="223" /></P><P name="operatorType" number="4"><type typename="OperatorType" ldsrc="223" /></P><P name="session" number="5"><type ispointer="true" ldsrc="223"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="241"><n>$preserverReferenceExp</n></e><e ldsrc="242"><n>$methodAttExp</n></e><Function name="$getWhereEqualFunctionName" access="public" ldsrc="243,243"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="243"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="243"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="243" /></P><P name="session" number="4"><type ispointer="true" ldsrc="243"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to validate a $entityType$ before it's saved. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ to validate&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null if the $entityType$ was deleted successfully, the same $entityType$ otherwise&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><e ldsrc="257"><n>$preserverReferenceExp</n></e><e ldsrc="258"><n>$methodAttExp</n></e><Function name="Validate" access="public" ldsrc="259,259"><Parameters><P name="$varBusiness" number="1"><type ispointer="true" ldsrc="259"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /></Function></class></writecode></r></a></e><documentation short="Si es un mobil genero los proxies&#xD;&#xA;" /><if ldsrc="265"><boolean><bo op="EQ"><l><n>webServiceEntityNamespace</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk><e ldsrc="265"><a><l><n>webServiceEntityNamespace</n></l><r><lit str="http://schemas.datacontract.org/2004/07/UtnEmall.Server.EntityModel" /></r></a></e></ifbk></if><if ldsrc="266"><boolean><bo op="AND"><l><n>isWindowsMobile</n></l><r><n>generateServiceAccessLayerForMobile</n></r></bo></boolean><ifbk ldsrc="266,281"><e ldsrc="273"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>clase</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtBegin</n></r></bo></l><args><e><writecode ldsrc="268"><e><fc><l><n>UtnEmall::Utils::SALGenerator::GenerateWSProxy</n></l><args><e><lit str="http://tempuri.org/" /></e><e><n>$webServiceEntityNamespace</n></e></args></fc></e></writecode></e></args></fc></e><e ldsrc="280"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>clase</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtBegin</n></r></bo></l><args><e><writecode ldsrc="275"><e><fc><l><n>UtnEmall::Utils::SCLGenerator::GenerateAccessFacades</n></l><args><e><lit str="http://tempuri.org/" /></e><e><n>$webServiceEntityNamespace</n></e></args></fc></e></writecode></e></args></fc></e></ifbk></if><documentation short=" Si hay definido un espacio de nombres para los proxies lo inserto alli, sino lo inserto en&#xD;&#xA; el espacion de nombres indicado&#xD;&#xA;" /><if ldsrc="285"><boolean><bo op="EQ"><l><n>proxiesNamespace</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk><e ldsrc="286"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentNamespace</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>clase</n></e></args></fc></e></ifbk><else ldsrc="287"><e ldsrc="288"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><n>proxiesNamespace</n></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAtEnd</n></r></bo></l><args><e><n>clase</n></e></args></fc></e></else></if><documentation short=" Defino el bloque de save&#xD;&#xA;" /><Decls><d name="saveLogicBody" ldsrc="291"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="291"><e><writecode ldsrc="291"><bk><documentation short=" Save $varEntity$ using data access object&#xD;&#xA;" /><e ldsrc="293"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>Save</n></r></bo></l><args><e><n>$varEntity</n></e></args></fc></e><return ldsrc="294,294"><lit str="0" type="null" /></return></bk></writecode></e></i></d></Decls><if ldsrc="296"><boolean><fc><l><bo op="m"><l><n>customSaves</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></args></fc></boolean><ifbk><e ldsrc="297"><a><l><n>saveLogicBody</n></l><r><cast><e><b><l><n>customSaves</n></l><args><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></args></b></e><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type></cast></r></a></e></ifbk></if><documentation short=" Defino el bloque de delete&#xD;&#xA;" /><Decls><d name="deleteLogicBody" ldsrc="300"><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type><i ldsrc="300"><e><writecode ldsrc="300"><bk><documentation short=" Delete $varEntity$ using data access object&#xD;&#xA;" /><e ldsrc="302"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>Delete</n></r></bo></l><args><e><n>$varEntity</n></e></args></fc></e><return ldsrc="303,303"><lit str="0" type="null" /></return></bk></writecode></e></i></d></Decls><if ldsrc="305"><boolean><fc><l><bo op="m"><l><n>customDeletes</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></args></fc></boolean><ifbk><e ldsrc="306"><a><l><n>deleteLogicBody</n></l><r><cast><e><b><l><n>customDeletes</n></l><args><e><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></e></args></b></e><type ispointer="true"><dt typename="XplFunctionBody" /><pi ref="true" /></type></cast></r></a></e></ifbk></if><if ldsrc="308"><boolean><n>isWindowsMobile</n></boolean><ifbk ldsrc="309,586"><e ldsrc="583"><a><l><n>clase</n></l><r><writecode ldsrc="310"><class name="$businessClassName" access="public" doc=" &lt;summary&gt;&#xD;&#xA;   The &lt;c&gt;$businessClassName$&lt;/c&gt; implement business logic to process $entityType$,&#xD;&#xA;	  saving, updating, deleting and validating entity data.&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA;" ldsrc="315,581"><e ldsrc="317"><fc><l><n>UtnEmall::Utils::List::NewCollection</n></l><args><e><n>$listOfTypesName</n></e><e><t ispointer="true"><dt typename="$entityType" /><pi ref="true" /></t></e></args></fc></e><Field name="$varDataAccess" ldsrc="319,319"><type ispointer="true"><dt typename="$dataAccessType" /><pi ref="true" /></type></Field><documentation short=" &lt;summary&gt;&#xD;&#xA;   The &lt;c&gt;$businessClassName$&lt;/c&gt; constructor&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA;" /><Function name="$businessClassName" access="public" ldsrc="325,325"><ReturnType /><FunctionBody ldsrc="326,328"><e ldsrc="327"><a><l><n>$varDataAccess</n></l><r><new><type typename="$dataAccessType" /></new></r></a></e></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to save a $entityType$ to the database. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ to save&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null if the $entityType$ was saved successfully, the same $entityType$ otherwise&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Save" access="public" ldsrc="342,342"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="342"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="343,363"><if ldsrc="344"><boolean><bo op="EQ"><l><n>$varEntity</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="345,347"><throw ldsrc="346,346"><new><type typename="ArgumentException" /><init ldsrc="346"><list><e><lit str="The entity can't be null" /></e><e><n>$varEntityStr</n></e></list></init></new></throw></ifbk></if><documentation short=" Validate $entityType$&#xD;&#xA;" /><if ldsrc="349"><boolean><uo op="not"><u><fc><l><n>Validate</n></l><args><e><n>$varEntity</n></e></args></fc></u></uo></boolean><ifbk ldsrc="350,352"><return ldsrc="351,351"><n>$varEntity</n></return></ifbk></if><try ldsrc="354"><trybk ldsrc="355,357"><e ldsrc="356"><n>$saveLogicBody</n></e></trybk><catchbk><init ldsrc="358"><d name="utnEmallDataAccessException" ldsrc="358"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="359,362"><documentation short=" Rethrow as custom exception&#xD;&#xA;" /><throw ldsrc="361,361"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="361"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to delete a $entityType$ from database. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ to delete&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null if the $entityType$ was deleted successfully, the same $entityType$ otherwise&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Delete" access="public" ldsrc="377,377"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="377"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="378,392"><if ldsrc="379"><boolean><bo op="EQ"><l><n>$varEntity</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="380,382"><throw ldsrc="381,381"><new><type typename="ArgumentException" /><init ldsrc="381"><list><e><lit str="The argument can't be null" /></e><e><n>$varEntityStr</n></e></list></init></new></throw></ifbk></if><try ldsrc="383"><trybk ldsrc="384,386"><e ldsrc="385"><n>$deleteLogicBody</n></e></trybk><catchbk><init ldsrc="387"><d name="utnEmallDataAccessException" ldsrc="387"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="388,391"><documentation short=" Rethrow as custom exception&#xD;&#xA;" /><throw ldsrc="390,390"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="390"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get an specific $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id of the $entityType$ to load&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;A $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getEntityFunctionName" access="public" ldsrc="406,406"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="406" /></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="407,409"><return ldsrc="408,408"><fc><l><n>$getEntityFunctionName</n></l><args><e><n>id</n></e><e><lit str="true" type="bool" /></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get an specific $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id of the $entityType$ to load&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;A $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getEntityFunctionName" access="public" ldsrc="423,423"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="423" /></P><P name="loadRelation" number="2"><type typename="$BOOLEAN$" ldsrc="423" /></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="424,433"><try ldsrc="425"><trybk ldsrc="426,428"><return ldsrc="427,427"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>Load</n></r></bo></l><args><e><n>id</n></e><e><n>loadRelation</n></e></args></fc></return></trybk><catchbk><init ldsrc="429"><d name="utnEmallDataAccessException" ldsrc="429"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="430,432"><throw ldsrc="431,431"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="431"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;returns&gt;Collection of all $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getAllFunctionName" access="public" ldsrc="442,442"><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="443,445"><return ldsrc="444,444"><fc><l><n>$getAllFunctionName</n></l><args><e><lit str="true" type="bool" /></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of all $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getAllFunctionName" access="public" ldsrc="455,455"><Parameters><P name="loadRelation" number="1"><type typename="$BOOLEAN$" ldsrc="455" /></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="456,465"><try ldsrc="457"><trybk ldsrc="458,460"><return ldsrc="459,459"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadAll</n></r></bo></l><args><e><n>loadRelation</n></e></args></fc></return></trybk><catchbk><init ldsrc="461"><d name="utnEmallDataAccessException" ldsrc="461"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="462,464"><throw ldsrc="463,463"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="463"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereFunctionName" access="public" ldsrc="481,481"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="481"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="481"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="operatorType" number="3"><type typename="OperatorType" ldsrc="481" /></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="482,484"><return ldsrc="483,483"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><lit str="true" type="bool" /></e><e><n>operatorType</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereFunctionName" access="public" ldsrc="501,501"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="501"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="501"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="501" /></P><P name="operatorType" number="4"><type typename="OperatorType" ldsrc="501" /></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="502,511"><try ldsrc="503"><trybk ldsrc="504,506"><return ldsrc="505,505"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadWhere</n></r></bo></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><n>loadRelation</n></e><e><n>operatorType</n></e></args></fc></return></trybk><catchbk><init ldsrc="507"><d name="utnEmallDataAccessException" ldsrc="507"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="508,510"><throw ldsrc="509,509"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="509"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereEqualFunctionName" access="public" ldsrc="527,527"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="527"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="527"><dt typename="$OBJECT$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="528,530"><return ldsrc="529,529"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><lit str="true" type="bool" /></e><e><n>OperatorType::Equal</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereEqualFunctionName" access="public" ldsrc="547,547"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="547"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="547"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="547" /></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="548,557"><try ldsrc="549"><trybk ldsrc="550,552"><return ldsrc="551,551"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><n>loadRelation</n></e><e><n>OperatorType::Equal</n></e></args></fc></return></trybk><catchbk><init ldsrc="553"><d name="utnEmallDataAccessException" ldsrc="553"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="554,556"><throw ldsrc="555,555"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="555"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to validate a $entityType$ . &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varBusiness$&quot;&gt;$entityType$ to validate&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;true&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varBusiness$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Validate" access="public" ldsrc="567,567"><Parameters><P name="$varBusiness" number="1"><type ispointer="true" ldsrc="567"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /><FunctionBody ldsrc="568,580"><Decls><d name="result" ldsrc="569"><type typename="$BOOLEAN$" /><i ldsrc="569"><e><lit str="true" type="bool" /></e></i></d></Decls><if ldsrc="571"><boolean><bo op="EQ"><l><n>$varBusiness</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="572,574"><throw ldsrc="573,573"><new><type typename="ArgumentException" /><init ldsrc="573"><list><e><lit str="The argument can't be null" /></e></list></init></new></throw></ifbk></if><documentation short=" Check entity data							&#xD;&#xA;" /><e ldsrc="577"><n>$modelData</n></e><return ldsrc="579,579"><n>result</n></return></FunctionBody></Function></class></writecode></r></a></e><documentation short="ESTO ES POR UN ERROR EN EL WRITECODE DE ZOE&#xD;&#xA;((XplImplement^)clase.FindNode(&quot;/@XplImplement&quot;)).set_name(wsInterfaceName.Identifier);&#xD;&#xA;" /></ifbk><else ldsrc="587"><e ldsrc="891"><a><l><n>clase</n></l><r><writecode ldsrc="589"><class name="$businessClassName" access="public" doc=" &lt;summary&gt;&#xD;&#xA;   The &lt;c&gt;$businessClassName$&lt;/c&gt; implement business logic to process $entityType$,&#xD;&#xA;	  saving, updating, deleting and validating entity data.&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA;" ldsrc="594,889"><Implements><i name="$wsInterfaceType" access="public" ldsrc="594" /></Implements><e ldsrc="596"><fc><l><n>UtnEmall::Utils::List::NewCollection</n></l><args><e><n>$listOfTypesName</n></e><e><t ispointer="true"><dt typename="$entityType" /><pi ref="true" /></t></e></args></fc></e><e ldsrc="597"><fc><l><n>UtnEmall::Utils::FaultException::New</n></l><args><e><n>FaultExceptionExceptionDetail</n></e><e><t ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></t></e></args></fc></e><Field name="$varDataAccess" ldsrc="599,599"><type ispointer="true"><dt typename="$dataAccessType" /><pi ref="true" /></type></Field><Function name="$businessClassName" access="public" ldsrc="602,602"><ReturnType /><FunctionBody ldsrc="603,605"><e ldsrc="604"><a><l><n>$varDataAccess</n></l><r><new><type typename="$dataAccessType" /></new></r></a></e></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to save a $entityType$ to the database. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ to save&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null if the $entityType$ was saved successfully, the same $entityType$ otherwise&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Save" access="public" ldsrc="619,619"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="619"><dt typename="$entityType" /><pi ref="true" /></type></P><P name="session" number="2"><type ispointer="true" ldsrc="619"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="620,641"><Decls><d name="permited" ldsrc="621"><type typename="$BOOLEAN$" /><i ldsrc="621"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="save" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="622"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="623,626"><Decls><d name="detail" ldsrc="624"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="624"><e><new><type typename="ExceptionDetail" /><init ldsrc="624"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="624"><list><e><lit str="The user hasn't permissions to save an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="625,625"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="625"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><if ldsrc="628"><boolean><uo op="not"><u><fc><l><n>Validate</n></l><args><e><n>$varEntity</n></e></args></fc></u></uo></boolean><ifbk ldsrc="629,631"><return ldsrc="630,630"><n>$varEntity</n></return></ifbk></if><try ldsrc="633"><trybk ldsrc="634,636"><e ldsrc="635"><n>$saveLogicBody</n></e></trybk><catchbk><init ldsrc="637"><d name="utnEmallDataAccessException" ldsrc="637"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="638,640"><throw ldsrc="639,639"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="639"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to delete a $entityType$ from database. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ to delete&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null if the $entityType$ was deleted successfully, the same $entityType$ otherwise&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Delete" access="public" ldsrc="655,655"><Parameters><P name="$varEntity" number="1"><type ispointer="true" ldsrc="655"><dt typename="$entityType" /><pi ref="true" /></type></P><P name="session" number="2"><type ispointer="true" ldsrc="655"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="656,676"><Decls><d name="permited" ldsrc="657"><type typename="$BOOLEAN$" /><i ldsrc="657"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="delete" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="658"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="659,662"><Decls><d name="detail" ldsrc="660"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="660"><e><new><type typename="ExceptionDetail" /><init ldsrc="660"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="660"><list><e><lit str="The user hasn't permissions to delete an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="661,661"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="661"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><if ldsrc="664"><boolean><bo op="EQ"><l><n>$varEntity</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="665,667"><throw ldsrc="666,666"><new><type typename="ArgumentException" /><init ldsrc="666"><list><e><lit str="The argument can not be null or be empty" /></e></list></init></new></throw></ifbk></if><try ldsrc="668"><trybk ldsrc="669,671"><e ldsrc="670"><n>$deleteLogicBody</n></e></trybk><catchbk><init ldsrc="672"><d name="utnEmallDataAccessException" ldsrc="672"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="673,675"><throw ldsrc="674,674"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="674"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get an specific $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id of the $entityType$ to load&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;A $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getEntityFunctionName" access="public" ldsrc="690,690"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="690" /></P><P name="session" number="2"><type ispointer="true" ldsrc="690"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="691,693"><return ldsrc="692,692"><fc><l><n>$getEntityFunctionName</n></l><args><e><n>id</n></e><e><lit str="true" type="bool" /></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get an specific $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;id&quot;&gt;id of the $entityType$ to load&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;A $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getEntityFunctionName" access="public" ldsrc="708,708"><Parameters><P name="id" number="1"><type typename="$INTEGER$" ldsrc="708" /></P><P name="loadRelation" number="2"><type typename="$BOOLEAN$" ldsrc="708" /></P><P name="session" number="3"><type ispointer="true" ldsrc="708"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$entityType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="709,724"><Decls><d name="permited" ldsrc="710"><type typename="$BOOLEAN$" /><i ldsrc="710"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="read" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="711"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="712,715"><Decls><d name="detail" ldsrc="713"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="713"><e><new><type typename="ExceptionDetail" /><init ldsrc="713"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="713"><list><e><lit str="The user hasn't permissions to read an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="714,714"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="714"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><try ldsrc="716"><trybk ldsrc="717,719"><return ldsrc="718,718"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>Load</n></r></bo></l><args><e><n>id</n></e><e><n>loadRelation</n></e></args></fc></return></trybk><catchbk><init ldsrc="720"><d name="utnEmallDataAccessException" ldsrc="720"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="721,723"><throw ldsrc="722,722"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="722"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of all $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getAllFunctionName" access="public" ldsrc="735,735"><Parameters><P name="session" number="1"><type ispointer="true" ldsrc="735"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="736,738"><return ldsrc="737,737"><fc><l><n>$getAllFunctionName</n></l><args><e><lit str="true" type="bool" /></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of all $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getAllFunctionName" access="public" ldsrc="750,750"><Parameters><P name="loadRelation" number="1"><type typename="$BOOLEAN$" ldsrc="750" /></P><P name="session" number="2"><type ispointer="true" ldsrc="750"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="751,766"><Decls><d name="permited" ldsrc="752"><type typename="$BOOLEAN$" /><i ldsrc="752"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="read" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="753"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="754,757"><Decls><d name="detail" ldsrc="755"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="755"><e><new><type typename="ExceptionDetail" /><init ldsrc="755"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="755"><list><e><lit str="The user hasn't permissions to read an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="756,756"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="756"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><try ldsrc="758"><trybk ldsrc="759,761"><return ldsrc="760,760"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadAll</n></r></bo></l><args><e><n>loadRelation</n></e></args></fc></return></trybk><catchbk><init ldsrc="762"><d name="utnEmallDataAccessException" ldsrc="762"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="763,765"><throw ldsrc="764,764"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="764"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereFunctionName" access="public" ldsrc="784,784"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="784"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="784"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="operatorType" number="3"><type typename="OperatorType" ldsrc="784" /></P><P name="session" number="4"><type ispointer="true" ldsrc="784"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="785,787"><return ldsrc="786,786"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><lit str="true" type="bool" /></e><e><n>operatorType</n></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereFunctionName" access="public" ldsrc="805,805"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="805"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="805"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="805" /></P><P name="operatorType" number="4"><type typename="OperatorType" ldsrc="805" /></P><P name="session" number="5"><type ispointer="true" ldsrc="805"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="806,822"><Decls><d name="permited" ldsrc="808"><type typename="$BOOLEAN$" /><i ldsrc="808"><e><fc><l><bo op="m"><l><n>ValidationService::Instance</n></l><r><n>ValidatePermission</n></r></bo></l><args><e><n>session</n></e><e><lit str="read" /></e><e><n>$className</n></e></args></fc></e></i></d></Decls><if ldsrc="809"><boolean><uo op="not"><u><n>permited</n></u></uo></boolean><ifbk ldsrc="810,813"><Decls><d name="detail" ldsrc="811"><type ispointer="true"><dt typename="ExceptionDetail" /><pi ref="true" /></type><i ldsrc="811"><e><new><type typename="ExceptionDetail" /><init ldsrc="811"><list><e><new><type typename="UtnEmallPermissionException" /><init ldsrc="811"><list><e><lit str="The user hasn't permissions to read an entity" /></e></list></init></new></e></list></init></new></e></i></d></Decls><throw ldsrc="812,812"><new><type typename="FaultExceptionExceptionDetail" /><init ldsrc="812"><list><e><n>detail</n></e></list></init></new></throw></ifbk></if><try ldsrc="814"><trybk ldsrc="815,817"><return ldsrc="816,816"><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadWhere</n></r></bo></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><n>loadRelation</n></e><e><n>operatorType</n></e></args></fc></return></trybk><catchbk><init ldsrc="818"><d name="utnEmallDataAccessException" ldsrc="818"><type ispointer="true"><dt typename="UtnEmallDataAccessException" /><pi ref="true" /></type></d></init><bk ldsrc="819,821"><throw ldsrc="820,820"><new><type typename="UtnEmallBusinessLogicException" /><init ldsrc="820"><list><e><bo op="m"><l><n>utnEmallDataAccessException</n></l><r><n>Message</n></r></bo></e><e><n>utnEmallDataAccessException</n></e></list></init></new></throw></bk></catchbk></try></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereEqualFunctionName" access="public" ldsrc="839,839"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="839"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="839"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="session" number="3"><type ispointer="true" ldsrc="839"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="840,842"><return ldsrc="841,841"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><lit str="true" type="bool" /></e><e><n>OperatorType::Equal</n></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Get collection of all $varEntity$ that comply with certain pattern&#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;propertyName&quot;&gt;property of $varEntity$&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;expValue&quot;&gt;pattern&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;loadRelation&quot;&gt;true to load the relations&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;Collection of $entityType$&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;propertyName&quot;/&gt; is null or empty.&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;expValue&quot;/&gt; is null or empty.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="$getWhereEqualFunctionName" access="public" ldsrc="860,860"><Parameters><P name="propertyName" number="1"><type ispointer="true" ldsrc="860"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="expValue" number="2"><type ispointer="true" ldsrc="860"><dt typename="$OBJECT$" /><pi ref="true" /></type></P><P name="loadRelation" number="3"><type typename="$BOOLEAN$" ldsrc="860" /></P><P name="session" number="4"><type ispointer="true" ldsrc="860"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="861,862"><return ldsrc="862,862"><fc><l><n>$getWhereFunctionName</n></l><args><e><n>propertyName</n></e><e><n>expValue</n></e><e><n>loadRelation</n></e><e><n>OperatorType::Equal</n></e><e><n>session</n></e></args></fc></return></FunctionBody></Function><documentation short=" &lt;summary&gt;&#xD;&#xA; Function to validate a $entityType$ before it's saved. &#xD;&#xA; &lt;/summary&gt;&#xD;&#xA; &lt;param name=&quot;$varEntity$&quot;&gt;$entityType$ to validate&lt;/param&gt;&#xD;&#xA; &lt;param name=&quot;session&quot;&gt;User's session identifier.&lt;/param&gt;&#xD;&#xA; &lt;returns&gt;null if the $entityType$ was deleted successfully, the same $entityType$ otherwise&lt;/returns&gt;&#xD;&#xA; &lt;exception cref=&quot;ArgumentNullException&quot;&gt;&#xD;&#xA; if &lt;paramref name=&quot;$varEntity$&quot;/&gt; is null.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA; &lt;exception cref=&quot;UtnEmallBusinessLogicException&quot;&gt;&#xD;&#xA; If an UtnEmallDataAccessException occurs in DataModel.&#xD;&#xA; &lt;/exception&gt;&#xD;&#xA;" /><Function name="Validate" access="public" ldsrc="876,876"><Parameters><P name="$varBusiness" number="1"><type ispointer="true" ldsrc="876"><dt typename="$entityType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /><FunctionBody ldsrc="877,887"><Decls><d name="result" ldsrc="878"><type typename="$BOOLEAN$" /><i ldsrc="878"><e><lit str="true" type="bool" /></e></i></d></Decls><if ldsrc="880"><boolean><bo op="EQ"><l><n>$varBusiness</n></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="881,883"><throw ldsrc="882,882"><new><type typename="ArgumentException" /><init ldsrc="882"><list><e><lit str="The argument can not be null or be empty" /></e></list></init></new></throw></ifbk></if><documentation short=" Check entity data&#xD;&#xA;" /><e ldsrc="885"><n>$modelData</n></e><return ldsrc="886,886"><n>result</n></return></FunctionBody></Function></class></writecode></r></a></e><documentation short="ESTO ES POR UN ERROR EN EL WRITECODE DE ZOE&#xD;&#xA;" /><e ldsrc="894"><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><n>clase</n></l><r><n>FindNode</n></r></bo></l><args><e><lit str="/@XplImplement" /></e></args></fc></e><type ispointer="true"><dt typename="XplImplement" /><pi ref="true" /></type></cast></l><r><n>set_name</n></r></bo></l><args><e><bo op="m"><l><n>wsInterfaceName</n></l><r><n>Identifier</n></r></bo></e></args></fc></e></else></if><return ldsrc="897,897"><n>clase</n></return></FunctionBody></Function><Function name="CustomSave" internalname="CustomSave#26" access="public" storage="static" ldsrc="900,900"><Parameters><P name="businessClassName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="900" /></P><P name="customBlock" number="2"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="900" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="900,910"><if ldsrc="901"><boolean><uo op="not"><u><fc><l><bo op="m"><l><n>customSaves</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></e></args></fc></u></uo></boolean><ifbk ldsrc="901,903"><e ldsrc="902"><fc><l><bo op="m"><l><n>customSaves</n></l><r><n>Add</n></r></bo></l><args><e><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></e><e><n>customBlock</n></e></args></fc></e></ifbk><else ldsrc="904"><Decls><d name="newError" ldsrc="905"><type ispointer="true"><dt typename="Error" /><pi ref="true" /></type><i ldsrc="905"><e><new><type typename="Error" /><init ldsrc="905"><list><e><bo><l><bo><l><lit str="Bloque custom save " /></l><r><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str=" ya agregado" /></r></bo></e></list></init></new></e></i></d></Decls><e ldsrc="906"><fc><l><bo op="m"><l><n>newError</n></l><r><n>set_PersistentError</n></r></bo></l><args><e><lit str="true" type="bool" /></e></args></fc></e><e ldsrc="907"><fc><l><bo op="m"><l><bo op="m"><l><n>compiler</n></l><r><n>Errors</n></r></bo></l><r><n>AddError</n></r></bo></l><args><e><n>newError</n></e></args></fc></e></else></if><return ldsrc="909,909"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="CustomDelete" internalname="CustomDelete#27" access="public" storage="static" ldsrc="911,911"><Parameters><P name="businessClassName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="911" /></P><P name="customBlock" number="2"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="911" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="911,921"><if ldsrc="912"><boolean><uo op="not"><u><fc><l><bo op="m"><l><n>customDeletes</n></l><r><n>ContainsKey</n></r></bo></l><args><e><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></e></args></fc></u></uo></boolean><ifbk ldsrc="912,914"><e ldsrc="913"><fc><l><bo op="m"><l><n>customDeletes</n></l><r><n>Add</n></r></bo></l><args><e><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></e><e><n>customBlock</n></e></args></fc></e></ifbk><else ldsrc="915"><Decls><d name="newError" ldsrc="916"><type ispointer="true"><dt typename="Error" /><pi ref="true" /></type><i ldsrc="916"><e><new><type typename="Error" /><init ldsrc="916"><list><e><bo><l><bo><l><lit str="Bloque custom delete " /></l><r><bo op="m"><l><n>businessClassName</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str=" ya agregado" /></r></bo></e></list></init></new></e></i></d></Decls><e ldsrc="917"><fc><l><bo op="m"><l><n>newError</n></l><r><n>set_PersistentError</n></r></bo></l><args><e><lit str="true" type="bool" /></e></args></fc></e><e ldsrc="918"><fc><l><bo op="m"><l><bo op="m"><l><n>compiler</n></l><r><n>Errors</n></r></bo></l><r><n>AddError</n></r></bo></l><args><e><n>newError</n></e></args></fc></e></else></if><return ldsrc="920,920"><lit str="0" type="null" /></return></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class></Namespace></DocumentBody></XPLDocument>