<XPLDocument><DocumentBody ldsrc="1,1,.\\MainTemplate.es\\BusinessLogicDSLTemplate.dpp"><Import ldsrc="1"><ns>Microsoft</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Import ldsrc="2"><ns>System</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=mscorlib</ns></Import><Import ldsrc="3"><ns>LayerD.CodeDOM</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_layerd_xpl_codedom_net</ns></Import><Import ldsrc="4"><ns>LayerD.ZOECompiler</ns><ns>platform=DotNET</ns><ns>ns=DotNET</ns><ns>assembly=lib_zoec_core</ns></Import><Using ldsrc="5"><ns>DotNET::System</ns></Using><Using ldsrc="6"><ns>DotNET::System::IO</ns></Using><Using ldsrc="7"><ns>DotNET::System::Collections</ns></Using><Using ldsrc="8"><ns>DotNET::LayerD::CodeDOM</ns></Using><Using ldsrc="9"><ns>DotNET::LayerD::ZOECompiler</ns></Using><Namespace name="UtnEmall::Utils" ldsrc="11,273"><Class name="Rules" access="public" isfactory="true" ldsrc="12,272"><Function name="ObjName" internalname="ObjName#1" access="public" storage="static" ldsrc="14,14"><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplIName"><dt typename="XplIName" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="15,38"><Decls><d name="objName" ldsrc="16"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type></d></Decls><if ldsrc="17"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentFunction</n></r></bo></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><lit str="Validate" /></r></bo></boolean><ifbk ldsrc="18,20"><e ldsrc="19"><a><l><n>objName</n></l><r><new><type typename="XplIName" /><init ldsrc="19"><list><e><bo><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><n>Substring</n></r></bo></l><args><e><lit str="0" type="integer" /></e><e><lit str="1" type="integer" /></e></args></fc></l><r><n>ToLower</n></r></bo></l><args /></fc></l><r><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>get_name</n></r></bo></l><args /></fc></l><r><n>Substring</n></r></bo></l><args><e><lit str="1" type="integer" /></e></args></fc></r></bo></e></list></init></new></r></a></e></ifbk><else ldsrc="21"><Decls><d name="temp" ldsrc="23"><type ispointer="true"><dt typename="XplNode" /><pi ref="true" /></type><i ldsrc="23"><e><n>context</n></e></i></d></Decls><while ldsrc="24"><boolean><uo op="not"><u><bo op="OR"><l><bo op="EQ"><l><fc><l><bo op="m"><l><n>temp</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplFunction" /></r></bo></l><r><bo op="EQ"><l><fc><l><bo op="m"><l><n>temp</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplForStatement" /></r></bo></r></bo></u></uo></boolean><dobk ldsrc="25,27"><e ldsrc="26"><a><l><n>temp</n></l><r><fc><l><bo op="m"><l><n>temp</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></r></a></e></dobk></while><if ldsrc="28"><boolean><bo op="EQ"><l><fc><l><bo op="m"><l><n>temp</n></l><r><n>get_TypeName</n></r></bo></l><args /></fc></l><r><lit str="XplForStatement" /></r></bo></boolean><ifbk ldsrc="29,31"><e ldsrc="30"><a><l><n>objName</n></l><r><new><type typename="XplIName" /><init ldsrc="30"><list><e><lit str="item" /></e></list></init></new></r></a></e></ifbk><else ldsrc="32"><e ldsrc="34"><a><l><n>objName</n></l><r><new><type typename="XplIName" /><init ldsrc="34"><list><e><fc><l><bo op="m"><l><cast><e><fc><l><bo op="m"><l><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentFunction</n></r></bo></l><r><n>get_Parameters</n></r></bo></l><args /></fc></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>FirstNode</n></r></bo></l><args /></fc></e><type ispointer="true"><dt typename="XplParameter" /><pi ref="true" /></type></cast></l><r><n>get_name</n></r></bo></l><args /></fc></e></list></init></new></r></a></e></else></if></else></if><return ldsrc="37,37"><n>objName</n></return></FunctionBody></Function><Function name="PropertyNotNull" internalname="PropertyNotNull#2" access="public" storage="static" ldsrc="39,39"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="39" /></P><P name="errorMessage" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="39"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="39,54"><Decls><d name="propertyStr" ldsrc="41"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="41"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="objName" ldsrc="43"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="43"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><e ldsrc="52"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="46"><bk><if ldsrc="47"><boolean><bo op="EQ"><l><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="48,51"><e ldsrc="49"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="49"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="50"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="53,53"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="HasPermission" internalname="HasPermission#3" access="public" storage="static" ldsrc="56,56"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="56" /></P><P name="errorMessage" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="56"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="56,71"><Decls><d name="propertyStr" ldsrc="58"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="58"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="objName" ldsrc="60"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="60"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><e ldsrc="69"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="63"><bk><if ldsrc="64"><boolean><bo op="EQ"><l><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="65,68"><e ldsrc="66"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="66"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="67"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="70,70"><lit str="0" type="null" /></return></FunctionBody></Function><documentation short=" gives an error if the date is in the past&#xD;&#xA;" /><Function name="PropertyDateTimeInThePast" internalname="PropertyDateTimeInThePast#4" access="public" storage="static" ldsrc="74,74"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="74" /></P><P name="errorMessage" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="74"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="74,89"><Decls><d name="propertyStr" ldsrc="76"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="76"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="objName" ldsrc="78"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="78"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><e ldsrc="87"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="81"><bk><if ldsrc="82"><boolean><bo op="LS"><l><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></l><r><n>zoe::lang::DateTime::Now</n></r></bo></boolean><ifbk ldsrc="83,86"><e ldsrc="84"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="84"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="85"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="88,88"><lit str="0" type="null" /></return></FunctionBody></Function><documentation short=" gives an error if the date is in the future&#xD;&#xA;" /><Function name="PropertyDateTimeInTheFuture" internalname="PropertyDateTimeInTheFuture#5" access="public" storage="static" ldsrc="92,92"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="92" /></P><P name="errorMessage" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="92"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="92,107"><Decls><d name="propertyStr" ldsrc="94"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="94"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="objName" ldsrc="96"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="96"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><e ldsrc="105"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="99"><bk><if ldsrc="100"><boolean><bo op="GR"><l><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></l><r><n>zoe::lang::DateTime::Now</n></r></bo></boolean><ifbk ldsrc="101,104"><e ldsrc="102"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="102"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="103"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="106,106"><lit str="0" type="null" /></return></FunctionBody></Function><documentation short=" gives an error if the propertyName is lower than date&#xD;&#xA;" /><Function name="PropertyDateTimeLowerThan" internalname="PropertyDateTimeLowerThan#6" access="public" storage="static" ldsrc="110,110"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="110" /></P><P name="propertyNameCmp" number="2"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="110" /></P><P name="errorMessage" number="3"><type ispointer="true" typeStr="^_$STRING$" ldsrc="110"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="110,125"><Decls><d name="propertyStr" ldsrc="112"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="112"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="objName" ldsrc="114"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="114"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><e ldsrc="123"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="117"><bk><if ldsrc="118"><boolean><bo op="LS"><l><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></l><r><bo op="m"><l><n>$objName</n></l><r><n>$propertyNameCmp</n></r></bo></r></bo></boolean><ifbk ldsrc="119,122"><e ldsrc="120"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="120"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="121"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="124,124"><lit str="0" type="null" /></return></FunctionBody></Function><documentation short=" gives an error if the propertyName is greater than date&#xD;&#xA;" /><Function name="PropertyDateTimeGreaterThan" internalname="PropertyDateTimeGreaterThan#7" access="public" storage="static" ldsrc="128,128"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="128" /></P><P name="propertyNameCmp" number="2"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="128" /></P><P name="errorMessage" number="3"><type ispointer="true" typeStr="^_$STRING$" ldsrc="128"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="128,143"><Decls><d name="propertyStr" ldsrc="130"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="130"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="objName" ldsrc="132"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="132"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><e ldsrc="141"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="135"><bk><if ldsrc="136"><boolean><bo op="GR"><l><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></l><r><bo op="m"><l><n>$objName</n></l><r><n>$propertyNameCmp</n></r></bo></r></bo></boolean><ifbk ldsrc="137,140"><e ldsrc="138"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="138"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="139"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="142,142"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="PropertyStringNotEmpty" internalname="PropertyStringNotEmpty#8" access="public" storage="static" ldsrc="145,145"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="145" /></P><P name="errorMessage" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="145"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="145,158"><Decls><d name="objName" ldsrc="146"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="146"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><Decls><d name="propertyStr" ldsrc="147"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="147"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><e ldsrc="156"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="150"><bk><if ldsrc="151"><boolean><fc><l><n>DotNET::System::String::IsNullOrEmpty</n></l><args><e><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></e></args></fc></boolean><ifbk ldsrc="152,155"><e ldsrc="153"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="153"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="154"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="157,157"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="PropertyGreaterThanZero" internalname="PropertyGreaterThanZero#9" access="public" storage="static" ldsrc="160,160"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="160" /></P><P name="errorMessage" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="160"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="160,173"><Decls><d name="objName" ldsrc="161"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="161"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><Decls><d name="propertyStr" ldsrc="162"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="162"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><e ldsrc="171"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="165"><bk><if ldsrc="166"><boolean><bo op="LS"><l><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></l><r><lit str="0" type="integer" /></r></bo></boolean><ifbk ldsrc="167,170"><e ldsrc="168"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="168"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="169"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="172,172"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="CollectionNonEmpty" internalname="CollectionNonEmpty#10" access="public" storage="static" ldsrc="175,175"><Parameters><P name="collectionName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="175" /></P><P name="errorMessage" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="175"><dt typename="$STRING$" /><pi ref="true" /></type></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="175,188"><Decls><d name="objName" ldsrc="176"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="176"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><Decls><d name="collectionStr" ldsrc="177"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="177"><e><bo op="m"><l><n>collectionName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><e ldsrc="186"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><fc><l><bo op="m"><l><writecode ldsrc="180"><bk><if ldsrc="181"><boolean><bo op="EQ"><l><bo op="m"><l><n>$objName</n></l><r><n>$collectionName</n></r></bo></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="182,185"><e ldsrc="183"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="183"><list><e><n>$collectionStr</n></e><e><n>$collectionStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="184"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="187,187"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="PropertyCollection" internalname="PropertyCollection#11" access="public" storage="static" ldsrc="190,190"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="190" /></P><P name="referencedType" number="2"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="190" /></P><P name="modelData" number="3"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="190" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="191,231"><Decls><d name="entityType" ldsrc="193"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="193"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="194"><fc><l><bo op="m"><l><n>entityType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><bo op="m"><l><n>referencedType</n></l><r><n>Identifier</n></r></bo></l><r><lit str="Entity" /></r></bo></e></args></fc></e><documentation short="Para el tipo de lista&#xD;&#xA;" /><Decls><d name="listOfType" ldsrc="196"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="196"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="197"><fc><l><bo op="m"><l><n>listOfType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><bo><l><lit str="CollectionOf" /></l><r><bo op="m"><l><n>referencedType</n></l><r><n>Identifier</n></r></bo></r></bo></l><r><lit str="Entity" /></r></bo></e></args></fc></e><Decls><d name="listOfTypeName" ldsrc="198"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="198"><e><new><type typename="XplIName" /><init ldsrc="198"><list><e><fc><l><bo op="m"><l><n>listOfType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></e></list></init></new></e></i></d></Decls><Decls><d name="functionName" ldsrc="200"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="200"><e><new><type typename="XplIName" /><init ldsrc="200"><list><e><bo><l><lit str="Validate" /></l><r><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><Decls><d name="listaMiembros" ldsrc="202"><type ispointer="true"><dt typename="XplClassMembersList" /><pi ref="true" /></type><i ldsrc="202"><e><lit str="0" type="null" /></e></i></d></Decls><e ldsrc="219"><a><l><n>listaMiembros</n></l><r><writecode ldsrc="203"><classmembers><Function name="$functionName" storage="static" ldsrc="204,204"><Parameters><P name="$propertyName" number="1"><type ispointer="true" ldsrc="204"><dt typename="$listOfType" /><pi ref="true" /></type></P></Parameters><ReturnType typename="$BOOLEAN$" /><FunctionBody ldsrc="205,217"><e ldsrc="206"><fc><l><n>List::NewCollection</n></l><args><e><n>$listOfTypeName</n></e><e><t typename="$entityType" /></e></args></fc></e><Decls><d name="result" ldsrc="208"><type typename="$BOOLEAN$" /><i ldsrc="208"><e><lit str="true" type="bool" /></e></i></d></Decls><for ldsrc="210,210"><init><dl><d name="i" ldsrc="210"><type typename="$INTEGER$" /><i ldsrc="210"><e><lit str="0" type="integer" /></e></i></d></dl></init><condition><bo op="LS"><l><n>i</n></l><r><bo op="m"><l><n>$propertyName</n></l><r><n>Count</n></r></bo></r></bo></condition><repeat><e><uo op="inc"><u><n>i</n></u></uo></e></repeat><forblock ldsrc="211,214"><Decls><d name="item" ldsrc="212"><type ispointer="true"><dt typename="$entityType" /><pi ref="true" /></type><i ldsrc="212"><e><b><l><n>$propertyName</n></l><args><e><n>i</n></e></args></b></e></i></d></Decls><e ldsrc="213"><n>$modelData</n></e></forblock></for><return ldsrc="216,216"><n>result</n></return></FunctionBody></Function></classmembers></writecode></r></a></e><e ldsrc="221"><fc><l><n>XplNodeList::CopyNodesAtEnd</n></l><args><e><fc><l><bo op="m"><l><n>listaMiembros</n></l><r><n>Children</n></r></bo></l><args /></fc></e><e><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentClass</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></e></args></fc></e><Decls><d name="objName" ldsrc="223"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="223"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><return ldsrc="224,230"><writecode ldsrc="224"><bk><if ldsrc="226"><boolean><uo op="not"><u><fc><l><n>$functionName</n></l><args><e><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></e></args></fc></u></uo></boolean><ifbk ldsrc="227,229"><e ldsrc="228"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></bk></writecode></return></FunctionBody></Function><Function name="PropertyUnique" internalname="PropertyUnique#12" access="public" storage="static" ldsrc="233,233"><Parameters><P name="propertyName" number="1"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="233" /></P><P name="errorMessage" number="2"><type ispointer="true" typeStr="^_$STRING$" ldsrc="233"><dt typename="$STRING$" /><pi ref="true" /></type></P><P name="modelName" number="3"><type typename="$VOID$" ftype="iname" typeStr="$VOID$" ldsrc="233" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="233,267"><Decls><d name="varDataAccess" ldsrc="235"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="235"><e><new><type typename="XplIName" /><init ldsrc="235"><list><e><bo><l><fc><l><bo op="m"><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><n>ToLower</n></r></bo></l><args /></fc></l><r><lit str="DataAccess" /></r></bo></e></list></init></new></e></i></d></Decls><Decls><d name="propertyStatica" ldsrc="237"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="237"><e><new><type typename="XplIName" /><init ldsrc="237"><list><e><bo><l><lit str="DB" /></l><r><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><Decls><d name="propertyStr" ldsrc="239"><type ispointer="true"><dt typename="$STRING$" /><pi ref="true" /></type><i ldsrc="239"><e><bo op="m"><l><n>propertyName</n></l><r><n>Identifier</n></r></bo></e></i></d></Decls><Decls><d name="entityType" ldsrc="241"><type ispointer="true"><dt typename="XplType" /><pi ref="true" /></type><i ldsrc="241"><e><new><type typename="XplType" /></new></e></i></d></Decls><e ldsrc="242"><fc><l><bo op="m"><l><n>entityType</n></l><r><n>set_typename</n></r></bo></l><args><e><bo><l><bo op="m"><l><n>modelName</n></l><r><n>Identifier</n></r></bo></l><r><lit str="Entity" /></r></bo></e></args></fc></e><Decls><d name="listOfType" ldsrc="244"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="244"><e><new><type typename="XplIName" /><init ldsrc="244"><list><e><bo><l><lit str="CollectionOf" /></l><r><fc><l><bo op="m"><l><n>entityType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></r></bo></e></list></init></new></e></i></d></Decls><Decls><d name="objName" ldsrc="246"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="246"><e><fc><l><n>ObjName</n></l><args /></fc></e></i></d></Decls><Decls><d name="propertyStatic" ldsrc="248"><type ispointer="true"><dt typename="XplIName" /><pi ref="true" /></type><i ldsrc="248"><e><new><type typename="XplIName" /><init ldsrc="248"><list><e><bo><l><bo><l><fc><l><bo op="m"><l><n>entityType</n></l><r><n>get_typename</n></r></bo></l><args /></fc></l><r><lit str="::" /></r></bo></l><r><bo op="m"><l><n>propertyStatica</n></l><r><n>Identifier</n></r></bo></r></bo></e></list></init></new></e></i></d></Decls><e ldsrc="265"><fc><l><bo op="m"><l><fc><l><bo op="m"><l><bo op="m"><l><n>context</n></l><r><n>CurrentBlock</n></r></bo></l><r><n>Children</n></r></bo></l><args /></fc></l><r><n>InsertAfter</n></r></bo></l><args><e><writecode ldsrc="251"><bk><e ldsrc="253"><fc><l><n>List::NewCollection</n></l><args><e><n>$listOfType</n></e><e><t ispointer="true"><dt typename="$entityType" /><pi ref="true" /></t></e></args></fc></e><if ldsrc="254"><boolean><bo op="NOTEQ"><l><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></l><r><lit str="0" type="null" /></r></bo></boolean><ifbk ldsrc="255,263"><Decls><d name="listOfEquals" ldsrc="256"><type ispointer="true"><dt typename="$listOfType" /><pi ref="true" /></type><i ldsrc="256"><e><fc><l><bo op="m"><l><n>$varDataAccess</n></l><r><n>LoadWhere</n></r></bo></l><args><e><n>$propertyStatic</n></e><e><bo op="m"><l><n>$objName</n></l><r><n>$propertyName</n></r></bo></e><e><lit str="false" type="bool" /></e><e><n>OperatorType::Equal</n></e></args></fc></e></i></d></Decls><if ldsrc="258"><boolean><bo op="AND"><l><bo op="GR"><l><bo op="m"><l><n>listOfEquals</n></l><r><n>Count</n></r></bo></l><r><lit str="0" type="integer" /></r></bo></l><r><bo op="NOTEQ"><l><bo op="m"><l><b><l><n>listOfEquals</n></l><args><e><lit str="0" type="integer" /></e></args></b></l><r><n>Id</n></r></bo></l><r><bo op="m"><l><n>$objName</n></l><r><n>Id</n></r></bo></r></bo></r></bo></boolean><ifbk ldsrc="259,262"><e ldsrc="260"><fc><l><bo op="m"><l><bo op="m"><l><n>$objName</n></l><r><n>Errors</n></r></bo></l><r><n>Add</n></r></bo></l><args><e><new><type typename="Error" /><init ldsrc="260"><list><e><n>$propertyStr</n></e><e><n>$propertyStr</n></e><e><n>$errorMessage</n></e></list></init></new></e></args></fc></e><e ldsrc="261"><a><l><n>result</n></l><r><lit str="false" type="bool" /></r></a></e></ifbk></if></ifbk></if></bk></writecode></e><e><fc><l><bo op="m"><l><n>context</n></l><r><n>get_Parent</n></r></bo></l><args /></fc></e></args></fc></e><return ldsrc="266,266"><lit str="0" type="null" /></return></FunctionBody></Function><Function name="Custom" internalname="Custom#13" access="public" storage="static" ldsrc="269,269"><Parameters><P name="customBlock" number="1"><type typename="$BLOCK$" typeStr="$BLOCK$" ldsrc="269" /></P></Parameters><ReturnType ispointer="true" typeStr="^_DotNET.LayerD.CodeDOM.XplNode"><dt typename="XplNode" /><pi ref="true" /></ReturnType><FunctionBody ldsrc="269,271"><return ldsrc="270,270"><n>customBlock</n></return></FunctionBody></Function><Inherits><c name="DotNET.LayerD.ZOECompiler.ClassfactoryBase" access="public" /></Inherits></Class></Namespace></DocumentBody></XPLDocument>